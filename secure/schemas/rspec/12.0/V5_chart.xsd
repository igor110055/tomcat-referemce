<?xml version="1.0" encoding="UTF-8"?>
<!--
 Licensed Materials - Property of IBM
 IBM Cognos Products: rspec
 (C) Copyright IBM Corp. 2003, 2014
 US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:rspecExtension="http://developer.cognos.com/schemas/rspecExtension/" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:include schemaLocation="V5_layout.xsd"/>
	<xs:group name="chartElement">
		<xs:annotation>
			<xs:documentation>Contains all the chart elements</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element ref="pieChart"/>
			<xs:element ref="paretoChart"/>
			<xs:element ref="scatterChart"/>
			<xs:element ref="polarChart"/>
			<xs:element ref="radarChart"/>
			<xs:element ref="progressiveChart"/>
			<xs:element ref="combinationChart"/>
			<xs:element ref="bubbleChart"/>
			<xs:element ref="threeDCombinationChart"/>
			<xs:element ref="threeDScatterChart"/>
			<xs:element ref="gaugeChart"/>
			<xs:element ref="mapChart"/>
			<xs:element ref="metricsChart"/>
			<xs:element ref="marimekkoChart"/>
			<xs:element ref="winLossChart"/>
			<xs:element ref="v2_combinationChart"/>
			<xs:element ref="v2_scatterChart"/>
			<xs:element ref="v2_pieChart"/>
			<xs:element ref="v2_gaugeChart"/>
			<xs:element ref="v2_bubbleChart"/>
			<xs:element ref="v2_paretoChart"/>
			<xs:element ref="v2_progressiveChart"/>
			<xs:element ref="v2_bulletChart"/>
			<xs:element ref="viz"/>
		</xs:choice>
	</xs:group>
	<xs:element name="chartTextStyle">
		<xs:annotation>
			<xs:documentation>Represents text styling within the chart.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="fillEffects" type="FillEffectsType">
		<xs:annotation>
			<xs:documentation>Defines how the background of this portion of the chart is filled in.  This can either be a gradient, color or pattern.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="pieChart">
		<xs:annotation>
			<xs:documentation>This element represents one or more pies and pie slices based on the data used to create it.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="pies" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Each row will result in a new pie chart.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="chartNodes"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element name="pieSlices" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Each row will result in a new slice in each of the pies.  Each slice will also appear in the legend.  There is no axis definition associated with the pie slices.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="chartNodes"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element ref="notes" minOccurs="0"/>
				<xs:element ref="chartSubTitle" minOccurs="0"/>
				<xs:element ref="chartTitle" minOccurs="0"/>
				<xs:element ref="chartFooter" minOccurs="0"/>
				<xs:element ref="chartBody" minOccurs="0"/>
				<xs:element ref="chartPalette" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="conditionalChartColors" minOccurs="0"/>
				<xs:element ref="legend" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element name="pieLabels" minOccurs="0">
					<xs:annotation>
						<xs:documentation>This element represents the labels that will be drawn if multiple pies are rendered.  If this element does not exist, no labels will be rendred.  This, with the axis title, can be considered similar to the ordinal axis of other charts.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="style" minOccurs="0"/>
							<xs:element ref="conditionalStyles" minOccurs="0"/>
							<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
							<xs:element ref="reportDrills" minOccurs="0"/>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
						</xs:all>
						<xs:attributeGroup ref="CategoryTrunction"/>
					</xs:complexType>
				</xs:element>
				<xs:element ref="axisTitle" minOccurs="0"/>
				<xs:element ref="defaultChartMeasure" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="StandardChartAttributes"/>
			<xs:attribute name="holeSize" default="0">
				<xs:simpleType>
					<xs:restriction base="xs:nonNegativeInteger">
						<xs:maxInclusive value="99"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="depth" type="xs:nonNegativeInteger" default="0"/>
			<xs:attribute name="showPieLabels" default="none">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="none"/>
						<xs:enumeration value="inside"/>
						<xs:enumeration value="outside"/>
						<xs:enumeration value="outsideWithLines"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="showPieValues" default="none">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="none"/>
						<xs:enumeration value="inside"/>
						<xs:enumeration value="outside"/>
						<xs:enumeration value="outsideWithLines"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attributeGroup ref="ShowValuesAsPercent"/>
			<xs:attributeGroup ref="BorderProperties"/>
			<xs:attribute name="avoidLabelCollision" type="xs:boolean" default="false"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="radarChart">
		<xs:annotation>
			<xs:documentation>For a radar chart, the radius of each point along each radar line is determined by the measure.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="points" minOccurs="0"/>
				<xs:element name="radialClusters" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Each radial point in the chart will be for a single member.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="chartNodes"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element ref="radialMeasure" minOccurs="0"/>
				<xs:element ref="numericalAxisRadial" minOccurs="0"/>
				<xs:element ref="baselines" minOccurs="0"/>
				<xs:element ref="chartBody" minOccurs="0"/>
				<xs:element ref="chartFooter" minOccurs="0"/>
				<xs:element ref="chartPalette" minOccurs="0"/>
				<xs:element ref="chartSubTitle" minOccurs="0"/>
				<xs:element ref="chartTitle" minOccurs="0"/>
				<xs:element ref="markers" minOccurs="0"/>
				<xs:element ref="notes" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="conditionalChartColors" minOccurs="0"/>
				<xs:element ref="legend" minOccurs="0"/>
				<xs:element ref="ordinalAxis" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="StandardChartAttributes"/>
			<xs:attributeGroup ref="SpiderEffects"/>
			<xs:attribute name="radarType" default="line">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="line"/>
						<xs:enumeration value="area"/>
						<xs:enumeration value="stackedArea"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attributeGroup ref="BorderProperties"/>
			<xs:attributeGroup ref="PointChartDataPointAttributesForLineAndRadar"/>
			<xs:attributeGroup ref="ShowValuesAndLocation"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="progressiveChart">
		<xs:annotation>
			<xs:documentation>Progressive chart can also be called a waterfall chart. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="progressiveBars" minOccurs="0"/>
				<xs:element name="numericalAxisProgressive" type="MeasureAxisType" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Represents the numerical axis for the progressive chart.  If it is not present, no axis labels, axis titles or gridlines will be drawn.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="total" minOccurs="0">
					<xs:annotation>
						<xs:documentation>The presence of this element indicates that there should be a full bar rendered a the end of the bars to indicate the overall total.  The dataSource represents the label for this member.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element name="totalColumnColor" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Represents the color, gradient or pattern of the total column on the progressive chart.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:choice>
										<xs:element ref="chartPattern"/>
										<xs:element ref="chartColor"/>
										<xs:element ref="chartGradient"/>
									</xs:choice>
								</xs:complexType>
							</xs:element>
							<xs:element name="totalColumnLabel" minOccurs="0">
								<xs:annotation>
									<xs:documentation>This defines the label to be rendered for the total column.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element ref="chartContents" minOccurs="0"/>
									</xs:all>
								</xs:complexType>
							</xs:element>
							<xs:element ref="propertyList" minOccurs="0"/>
							<xs:element ref="style" minOccurs="0"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element name="firstColumnColor" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines the color, gradient or pattern to be used for the first column in the progressive chart.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice>
							<xs:element ref="chartColor"/>
							<xs:element ref="chartGradient"/>
							<xs:element ref="chartPattern"/>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element name="positiveColumnColor" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines the color, gradient or pattern to be used for columns in the progressive chart that represent positive values.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice>
							<xs:element ref="chartColor"/>
							<xs:element ref="chartGradient"/>
							<xs:element ref="chartPattern"/>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element name="negativeColumnColor" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines the color, gradient or pattern to be used for columns in the progressive chart that represent negative values.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice>
							<xs:element ref="chartColor"/>
							<xs:element ref="chartGradient"/>
							<xs:element ref="chartPattern"/>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element ref="chartBody" minOccurs="0"/>
				<xs:element ref="baselines" minOccurs="0"/>
				<xs:element ref="chartFooter" minOccurs="0"/>
				<xs:element ref="chartPalette" minOccurs="0"/>
				<xs:element ref="chartSubTitle" minOccurs="0"/>
				<xs:element ref="chartTitle" minOccurs="0"/>
				<xs:element ref="markers" minOccurs="0"/>
				<xs:element ref="notes" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="conditionalChartColors" minOccurs="0"/>
				<xs:element ref="ordinalAxis" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="connectLines" minOccurs="0"/>
				<xs:element ref="defaultChartMeasure" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="StandardChartAttributes"/>
			<xs:attributeGroup ref="VisualEffects"/>
			<xs:attribute name="orientation" default="vertical">
				<xs:annotation>
					<xs:documentation source="doc_att_orientation_chart"/>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="vertical"/>
						<xs:enumeration value="horizontal"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attributeGroup ref="ShowValuesAndLocation"/>
			<xs:attributeGroup ref="BorderProperties"/>
			<xs:attributeGroup ref="RotatedLabels"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="combinationChart">
		<xs:annotation>
			<xs:documentation>The combination chart can display many measures.  Each measure can be rendered as a line, area or bar.  The chart can have 2 measures axis and can be rendered bipolar if it has two axis.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="commonClusters" minOccurs="0"/>
				<xs:element ref="combinationChartTypes" minOccurs="0"/>
				<xs:element ref="baselines" minOccurs="0"/>
				<xs:element ref="chartBody" minOccurs="0"/>
				<xs:element ref="chartFooter" minOccurs="0"/>
				<xs:element ref="chartPalette" minOccurs="0"/>
				<xs:element ref="chartSubTitle" minOccurs="0"/>
				<xs:element ref="chartTitle" minOccurs="0"/>
				<xs:element ref="markers" minOccurs="0"/>
				<xs:element ref="notes" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="conditionalChartColors" minOccurs="0"/>
				<xs:element ref="legend" minOccurs="0"/>
				<xs:element ref="numericalAxisY1" minOccurs="0"/>
				<xs:element ref="numericalAxisY2" minOccurs="0"/>
				<xs:element ref="ordinalAxis" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="defaultChartMeasure" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="StandardChartAttributes"/>
			<xs:attributeGroup ref="RotatedLabels"/>
			<xs:attributeGroup ref="MatchSeriesColor"/>
			<xs:attributeGroup ref="VisualEffects"/>
			<xs:attribute name="orientation" default="vertical">
				<xs:annotation>
					<xs:documentation source="doc_att_orientation_chart"/>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="vertical"/>
						<xs:enumeration value="horizontal"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attributeGroup ref="AxisY2"/>
			<xs:attributeGroup ref="DisplayDataLocation"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="paretoChart">
		<xs:annotation>
			<xs:documentation>This element represents a pareto chart which is basically a bar chart with an accumulation line.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="cumulationLine" minOccurs="0">
					<xs:annotation>
						<xs:documentation>The presence of this element indicates whether or not a cumulation line is rendered.  The chartContents indicates whether or not text is associated with the line.  The cumulation line is plotted against the Y2 axis shows values between 0 and 100%.  If the stacked100MeasureAxis element is not present, a default will be generated.  Data item references will appear at the overall level of both edges in the QRD.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element name="cumulationAxis" minOccurs="0">
								<xs:complexType>
									<xs:all>
										<xs:element ref="axisTitle" minOccurs="0"/>
										<xs:element ref="gridlines" minOccurs="0"/>
										<xs:element ref="minorGridlines" minOccurs="0"/>
										<xs:element ref="axisLine" minOccurs="0"/>
										<xs:element ref="style" minOccurs="0"/>
										<xs:element ref="conditionalStyles" minOccurs="0"/>
										<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
									</xs:all>
									<xs:attribute name="scaleInterval" type="xs:float"/>
									<xs:attribute name="showAxisLabels" type="xs:boolean" default="true"/>
								</xs:complexType>
							</xs:element>
							<xs:element name="cumulationLabel" minOccurs="0">
								<xs:complexType>
									<xs:all>
										<xs:element ref="chartContents" minOccurs="0"/>
									</xs:all>
								</xs:complexType>
							</xs:element>
							<xs:element ref="propertyList" minOccurs="0"/>
						</xs:all>
						<xs:attributeGroup ref="DataPointAttributes"/>
						<xs:attributeGroup ref="LineStyles"/>
						<xs:attributeGroup ref="ShowValuesBoolean"/>
						<xs:attributeGroup ref="DisplayDataLocation"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="paretoBars" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Bars for a pareto chart are similar to those of a bar chart except that that axis must be stacked.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="chartNodes"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element name="paretoBarClusters" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Represents the clusters in a pareto chart.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="chartNodes"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element ref="baselines" minOccurs="0"/>
				<xs:element ref="notes" minOccurs="0"/>
				<xs:element ref="markers" minOccurs="0"/>
				<xs:element ref="chartBody" minOccurs="0"/>
				<xs:element ref="chartFooter" minOccurs="0"/>
				<xs:element ref="chartSubTitle" minOccurs="0"/>
				<xs:element ref="chartTitle" minOccurs="0"/>
				<xs:element ref="chartPalette" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="conditionalChartColors" minOccurs="0"/>
				<xs:element ref="legend" minOccurs="0"/>
				<xs:element ref="ordinalAxis" minOccurs="0"/>
				<xs:element name="numericalAxisPareto" type="MeasureAxisType" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Axis defintion for a pareto chart.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="connectLines" minOccurs="0"/>
				<xs:element ref="defaultChartMeasure" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="StandardChartAttributes"/>
			<xs:attributeGroup ref="RotatedLabels"/>
			<xs:attributeGroup ref="VisualEffects"/>
			<xs:attribute name="orientation" default="vertical">
				<xs:annotation>
					<xs:documentation source="doc_att_orientation_chart"/>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="vertical"/>
						<xs:enumeration value="horizontal"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attributeGroup ref="BorderProperties"/>
			<xs:attributeGroup ref="ShowValuesAndLocation"/>
			<xs:attributeGroup ref="ShowAbsoluteValues"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="marimekkoChart">
		<xs:annotation>
			<xs:documentation>This element represents a marimekko chart which is basically a bar chart where the width of the bars has meaning.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="marimekkoBars" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Bars for a pareto chart are similar to those of a bar chart except that that axis must be stacked.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="chartNodes"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element name="marimekkoBarClusters" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Represents the clusters in a pareto chart.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="chartNodes"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element ref="baselines" minOccurs="0"/>
				<xs:element ref="notes" minOccurs="0"/>
				<xs:element ref="markers" minOccurs="0"/>
				<xs:element ref="chartBody" minOccurs="0"/>
				<xs:element ref="chartFooter" minOccurs="0"/>
				<xs:element ref="chartSubTitle" minOccurs="0"/>
				<xs:element ref="chartTitle" minOccurs="0"/>
				<xs:element ref="chartPalette" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="conditionalChartColors" minOccurs="0"/>
				<xs:element ref="legend" minOccurs="0"/>
				<xs:element ref="ordinalAxis" minOccurs="0"/>
				<xs:element ref="numericalAxisY" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="defaultChartMeasure" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="StandardChartAttributes"/>
			<xs:attributeGroup ref="VisualEffects"/>
			<xs:attributeGroup ref="BorderProperties"/>
			<xs:attribute name="showMarimekkoValues" default="none">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="none"/>
						<xs:enumeration value="actual"/>
						<xs:enumeration value="percent"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="marimekkoTotals" type="xs:boolean" default="true"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="winLossChart">
		<xs:annotation>
			<xs:documentation>This element represents a win / loss chart.  Data comes into this chart and is converted to either a 1 or -1 and optional 0 based on the winLossValue.  If the data point is greater than the winLossValue it is converted to a 1, all other values are converted to -1.  If allowTies is set to true, data points that exactly equal the winLossValue are converted to 0.   </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="winLossBars" minOccurs="0">
					<xs:complexType>
						<xs:all>
							<xs:element ref="chartNodes"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element ref="chartBody" minOccurs="0"/>
				<xs:element ref="chartFooter" minOccurs="0"/>
				<xs:element ref="chartSubTitle" minOccurs="0"/>
				<xs:element ref="chartTitle" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element name="winColor">
					<xs:complexType>
						<xs:choice>
							<xs:element ref="chartColor"/>
							<xs:element ref="chartPattern"/>
							<xs:element ref="chartGradient"/>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element name="lossColor">
					<xs:complexType>
						<xs:choice>
							<xs:element ref="chartColor"/>
							<xs:element ref="chartPattern"/>
							<xs:element ref="chartGradient"/>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="defaultChartMeasure" minOccurs="0"/>
				<xs:element ref="winLossChartMeasure" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="axisLine" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="StandardChartAttributes"/>
			<xs:attribute name="orientation" default="vertical">
				<xs:annotation>
					<xs:documentation source="doc_att_orientation_chart"/>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="vertical"/>
						<xs:enumeration value="horizontal"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attributeGroup ref="BorderProperties"/>
			<xs:attribute name="winLossValue" type="xs:decimal" default="0"/>
			<xs:attribute name="allowTies" type="xs:boolean" default="false"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="scatterChart">
		<xs:annotation>
			<xs:documentation>The scatter chart is an x-y graph that requires exactly two measures.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="points" minOccurs="0"/>
				<xs:element ref="pointClusters" minOccurs="0"/>
				<xs:element ref="chartBody" minOccurs="0"/>
				<xs:element ref="chartFooter" minOccurs="0"/>
				<xs:element ref="defaultChartMeasure" minOccurs="0"/>
				<xs:element ref="pointXMeasure" minOccurs="0"/>
				<xs:element ref="pointYMeasure" minOccurs="0"/>
				<xs:element ref="numericalAxisX" minOccurs="0"/>
				<xs:element ref="numericalAxisY" minOccurs="0"/>
				<xs:element ref="chartPalette" minOccurs="0"/>
				<xs:element ref="chartSubTitle" minOccurs="0"/>
				<xs:element ref="chartTitle" minOccurs="0"/>
				<xs:element ref="notes" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="legend" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="pointChartMarkers" minOccurs="0"/>
				<xs:element ref="pointChartBaselines" minOccurs="0"/>
				<xs:element ref="conditionalChartColors" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="regressionLine" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="StandardChartAttributes"/>
			<xs:attributeGroup ref="BorderProperties"/>
			<xs:attributeGroup ref="PointChartDataPointAttributes"/>
			<xs:attributeGroup ref="DisplayDataLocation"/>
			<xs:attributeGroup ref="ShowPointValues"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="bubbleChart">
		<xs:annotation>
			<xs:documentation>Bubble chart shows 3 measures, one for the x and y axis and one for the size of each bubble.  Can also be used to represent the 1.x quadrantChart.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="points" minOccurs="0"/>
				<xs:element ref="pointClusters" minOccurs="0"/>
				<xs:element ref="defaultChartMeasure" minOccurs="0"/>
				<xs:element ref="pointXMeasure" minOccurs="0"/>
				<xs:element ref="pointYMeasure" minOccurs="0"/>
				<xs:element name="bubbleMeasure" type="ChartMeasureType" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Measure that indicates the size of each bubble.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="numericalAxisX" minOccurs="0"/>
				<xs:element ref="numericalAxisY" minOccurs="0"/>
				<xs:element ref="chartBody" minOccurs="0"/>
				<xs:element ref="chartFooter" minOccurs="0"/>
				<xs:element ref="chartPalette" minOccurs="0"/>
				<xs:element ref="chartSubTitle" minOccurs="0"/>
				<xs:element ref="chartTitle" minOccurs="0"/>
				<xs:element ref="notes" minOccurs="0"/>
				<xs:element ref="pointChartMarkers" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="legend" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="pointChartBaselines" minOccurs="0"/>
				<xs:element ref="conditionalChartColors" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="regressionLine" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="StandardChartAttributes"/>
			<xs:attributeGroup ref="BorderProperties"/>
			<xs:attributeGroup ref="PointChartDataShape"/>
			<xs:attributeGroup ref="ShowBubblePointValues"/>
			<xs:attributeGroup ref="DisplayDataLocation"/>
			<xs:attribute name="bubbleSizing" default="minimumBased">
				<xs:annotation>
					<xs:documentation source="Determines how the bubble size is computed. minimumBased will assign the smallest bubble to the minimum data value. zeroBased will compute the bubble size relative to 0. (Excel 2002 compatible) zeroBasedWithNegativesOutlines will show negative bubbles as hollow, with an outline. They will get larger as they get further from 0. zeroBasedWithNegativesOutlines is compatible with Excel 2007."/>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="minimumBased"/>
						<xs:enumeration value="zeroBased"/>
						<xs:enumeration value="zeroBasedWithNegativesOutlined"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="polarChart">
		<xs:annotation>
			<xs:documentation>The polar chart is a two measure graph.  One measure for the radius of points and one measure for the angular position of the point.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="defaultChartMeasure" minOccurs="0"/>
				<xs:element ref="radialMeasure" minOccurs="0"/>
				<xs:element name="angularMeasure" type="ChartMeasureType" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Measure that defines the angle of each point.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="numericalAxisAngular" type="MeasureAxisType" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Represents the angular axis of the chart.  If this element is not present, no axis line, grid lines, axis labels or axis titles will be drawn.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="numericalAxisRadial" minOccurs="0"/>
				<xs:element ref="points" minOccurs="0"/>
				<xs:element ref="pointClusters" minOccurs="0"/>
				<xs:element ref="chartBody" minOccurs="0"/>
				<xs:element ref="chartFooter" minOccurs="0"/>
				<xs:element ref="chartPalette" minOccurs="0"/>
				<xs:element ref="chartSubTitle" minOccurs="0"/>
				<xs:element ref="chartTitle" minOccurs="0"/>
				<xs:element ref="pointChartMarkers" minOccurs="0"/>
				<xs:element ref="notes" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="legend" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="pointChartBaselines" minOccurs="0"/>
				<xs:element ref="conditionalChartColors" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="StandardChartAttributes"/>
			<xs:attributeGroup ref="SpiderEffects"/>
			<xs:attributeGroup ref="BorderProperties"/>
			<xs:attributeGroup ref="PointChartDataPointAttributes"/>
			<xs:attributeGroup ref="ShowPointValues"/>
			<xs:attributeGroup ref="DisplayDataLocation"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="threeDCombinationChart">
		<xs:annotation>
			<xs:documentation>Three D or 3D Axis chart.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="commonClusters" minOccurs="0"/>
				<xs:element name="threeDCombinationChartTypes" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines the collection of things to draw on the combination chart.  This includes any number of bars, lines and areas in any order. </xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:choice maxOccurs="unbounded">
								<xs:element name="threeDBar">
									<xs:annotation>
										<xs:documentation>Represents the bars of a 3D combo chart.</xs:documentation>
									</xs:annotation>
									<xs:complexType>
										<xs:all>
											<xs:element ref="chartNodes" minOccurs="0"/>
										</xs:all>
										<xs:attributeGroup ref="BorderProperties"/>
										<xs:attribute name="showValues" type="xs:boolean" default="false"/>
									</xs:complexType>
								</xs:element>
								<xs:element name="threeDLine">
									<xs:annotation>
										<xs:documentation>Represents the lines of a 3D combo chart.</xs:documentation>
									</xs:annotation>
									<xs:complexType>
										<xs:all>
											<xs:element ref="chartNodes" minOccurs="0"/>
										</xs:all>
										<xs:attributeGroup ref="BorderProperties"/>
										<xs:attribute name="showValues" type="xs:boolean" default="false"/>
									</xs:complexType>
								</xs:element>
								<xs:element name="threeDArea">
									<xs:annotation>
										<xs:documentation>Represents the areas of a 3D combo chart.</xs:documentation>
									</xs:annotation>
									<xs:complexType>
										<xs:all>
											<xs:element ref="chartNodes" minOccurs="0"/>
										</xs:all>
										<xs:attributeGroup ref="BorderProperties"/>
										<xs:attribute name="showValues" type="xs:boolean" default="false"/>
									</xs:complexType>
								</xs:element>
							</xs:choice>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element ref="chartTitle" minOccurs="0"/>
				<xs:element ref="chartSubTitle" minOccurs="0"/>
				<xs:element ref="chartBody" minOccurs="0"/>
				<xs:element ref="chartFooter" minOccurs="0"/>
				<xs:element ref="chartPalette" minOccurs="0"/>
				<xs:element ref="notes" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="conditionalChartColors" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element name="numericalAxis" type="MeasureAxisType" minOccurs="0"/>
				<xs:element name="threeDComboBaselines" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Collection of baselines to be rendered in the 3D combination chart.  Baselines in 3D combo charts have special limitaions; they do not have a label and can only be rendered against the numerical Z axis.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="threeDComboBaseline" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>Definition of a baseline in a 3D Combo chart.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element ref="threeDBaselinePosition" minOccurs="0"/>
										<xs:element ref="style" minOccurs="0"/>
										<xs:element ref="conditionalStyles" minOccurs="0"/>
										<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
										<xs:element ref="propertyList" minOccurs="0"/>
										<xs:element ref="masterDetailLinks" minOccurs="0"/>
									</xs:all>
									<xs:attribute name="refQuery" type="xs:string" use="required"/>
									<xs:attributeGroup ref="LineStyles"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="ordinalAxisX" type="OrdinalAxisType" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Ordinal Axis definition.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="ordinalAxisY" type="OrdinalAxisType" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Ordinal Axis definition.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="defaultChartMeasure" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="StandardChartAttributes"/>
			<xs:attributeGroup ref="viewingAngle"/>
			<xs:attribute name="matchSeriesColor" type="xs:boolean" default="false"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="threeDScatterChart">
		<xs:annotation>
			<xs:documentation>This is 3D version of the scatter chart.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="points" minOccurs="0"/>
				<xs:element ref="pointClusters" minOccurs="0"/>
				<xs:element ref="defaultChartMeasure" minOccurs="0"/>
				<xs:element ref="pointXMeasure" minOccurs="0"/>
				<xs:element ref="pointYMeasure" minOccurs="0"/>
				<xs:element name="pointZMeasure" type="ChartMeasureType" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Measure that will run in the Z-plane on the graph.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="numericalAxisX" minOccurs="0"/>
				<xs:element ref="numericalAxisY" minOccurs="0"/>
				<xs:element name="numericalAxisZ" type="MeasureAxisType" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Represents the Z axis of the chart.  If this element is not present, no axisline, gridlines, axis labels or axis titles will be drawn.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="chartBody" minOccurs="0"/>
				<xs:element ref="chartFooter" minOccurs="0"/>
				<xs:element ref="chartPalette" minOccurs="0"/>
				<xs:element ref="chartSubTitle" minOccurs="0"/>
				<xs:element ref="chartTitle" minOccurs="0"/>
				<xs:element ref="notes" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element name="threeDScatterBaselines" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Represents the list of baselines to draw in a 3D Scatter chart.  These baselines have special restrictions; they can only be positioned on the numerical Z Axis.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="threeDScatterBaseline" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>Represents a baseline on a 3D Scatter chart.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:choice>
										<xs:element ref="threeDBaselinePosition" minOccurs="0"/>
										<xs:element ref="style" minOccurs="0"/>
										<xs:element ref="conditionalStyles" minOccurs="0"/>
										<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
										<xs:element ref="propertyList" minOccurs="0"/>
										<xs:element ref="masterDetailLinks" minOccurs="0"/>
									</xs:choice>
									<xs:attribute name="refQuery" type="xs:string" use="required"/>
									<xs:attributeGroup ref="LineStyles"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element ref="legend" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="conditionalChartColors" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="StandardChartAttributes"/>
			<xs:attributeGroup ref="viewingAngle"/>
			<xs:attribute name="showFeelers" type="xs:boolean" default="true"/>
			<xs:attributeGroup ref="PointChartDataPointAttributes"/>
			<xs:attributeGroup ref="ShowPointValues"/>
			<xs:attributeGroup ref="BorderProperties"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="gaugeChart">
		<xs:annotation>
			<xs:documentation>This element represents one or more gauges.  It is similar in capability to a pie chart.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="gauges" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Each row will result in a new gauge chart.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="chartNodes"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element name="indicators" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Each row will result in a indicator (needle) in each of the gauges.  Each indicator will also appear in the legend.  There is no axis definition associated with the  indicators.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="chartNodes"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element ref="notes" minOccurs="0"/>
				<xs:element ref="chartSubTitle" minOccurs="0"/>
				<xs:element ref="chartTitle" minOccurs="0"/>
				<xs:element ref="chartFooter" minOccurs="0"/>
				<xs:element ref="chartBody" minOccurs="0"/>
				<xs:element ref="chartPalette" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="conditionalChartColors" minOccurs="0"/>
				<xs:element ref="legend" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element name="gaugeLabels" minOccurs="0">
					<xs:annotation>
						<xs:documentation>This element represents the labels that will be drawn if multiple pies are rendered.  If this element does not exist, no labels will be rendred.  This, with the axis title, can be considered similar to the ordinal axis of other charts.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="style" minOccurs="0"/>
							<xs:element ref="conditionalStyles" minOccurs="0"/>
							<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
							<xs:element ref="reportDrills" minOccurs="0"/>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
						</xs:all>
						<xs:attributeGroup ref="CategoryTrunction"/>
					</xs:complexType>
				</xs:element>
				<xs:element ref="axisTitle" minOccurs="0"/>
				<xs:element ref="defaultChartMeasure" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element name="gaugeNumericalAxis" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Represents the ranged arc of the gauge chart.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="gridlines" minOccurs="0"/>
							<xs:element ref="minorGridlines" minOccurs="0"/>
							<xs:element ref="style" minOccurs="0"/>
							<xs:element ref="conditionalStyles" minOccurs="0"/>
							<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
						</xs:all>
						<xs:attribute name="min" type="xs:float">
							<xs:annotation>
								<xs:documentation source="doc_att_min_chart"/>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="max" type="xs:float">
							<xs:annotation>
								<xs:documentation source="doc_att_max_chart"/>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="scaleInterval" type="xs:float"/>
						<xs:attribute name="scale" default="linear">
							<xs:annotation>
								<xs:documentation source="doc_att_scale_chart"/>
							</xs:annotation>
							<xs:simpleType>
								<xs:restriction base="xs:NMTOKEN">
									<xs:enumeration value="linear"/>
									<xs:enumeration value="log"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="sameRangeAllInstances" type="xs:boolean" default="true"/>
						<xs:attribute name="includeZeroForAutoScale" type="xs:boolean" default="true"/>
					</xs:complexType>
				</xs:element>
				<xs:element ref="gaugePalette" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="StandardChartAttributes"/>
			<xs:attributeGroup ref="BorderProperties"/>
			<xs:attribute name="faceColor" type="ColorType" default="white"/>
			<xs:attribute name="faceTransparency" default="0">
				<xs:simpleType>
					<xs:restriction base="xs:decimal">
						<xs:minInclusive value="0"/>
						<xs:maxInclusive value="100"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="dialOutlineColor" type="ColorType" default="black"/>
			<xs:attribute name="dialOutlineTransparency" default="0">
				<xs:simpleType>
					<xs:restriction base="xs:decimal">
						<xs:minInclusive value="0"/>
						<xs:maxInclusive value="100"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="mapChart">
		<xs:annotation>
			<xs:documentation>This element represents a map chart.  Colored regions, colored points and point sizes indicate measure values.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="notes" minOccurs="0"/>
				<xs:element ref="chartSubTitle" minOccurs="0"/>
				<xs:element ref="chartTitle" minOccurs="0"/>
				<xs:element ref="chartFooter" minOccurs="0"/>
				<xs:element ref="chartBody" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="legend" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element name="pointLayer" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Points to a layer that has defined points.  The color and the size of each point is determined by their respective measure.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="defaultChartMeasure" minOccurs="0"/>
							<xs:element name="pointSizeMeasure" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Measure that controls the size of the points.  If this element is not present, all points will be drawn the same size.  If this element is present, the point size on the pointLayer is ignored.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:complexContent>
										<xs:extension base="ChartMeasureType">
											<xs:attribute name="minPointSize" type="xs:decimal" default="5"/>
											<xs:attribute name="maxPointSize" type="xs:decimal" default="30"/>
										</xs:extension>
									</xs:complexContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="pointMeasure" type="ChartMeasureType" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Measure that controls the color of each point.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element ref="numericChartPalette" minOccurs="0"/>
							<xs:element ref="style" minOccurs="0"/>
							<xs:element ref="conditionalStyles" minOccurs="0"/>
							<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
							<xs:element ref="mapChartDrills" minOccurs="0"/>
							<xs:element name="mapPointLocation" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Location information from the model used to match region feature names in the map.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element name="mapPointRefinementLocation" minOccurs="0">
											<xs:annotation>
												<xs:documentation>Location information from the model that is used to qualify the parent element.  For example, if the parent element is set to city, this could set to country for extra qualification.</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:attribute name="refDataItem" type="xs:string" use="required"/>
											</xs:complexType>
										</xs:element>
									</xs:all>
									<xs:attribute name="refDataItem" type="xs:string" use="required"/>
								</xs:complexType>
							</xs:element>
							<xs:element ref="conditionalChartColors" minOccurs="0"/>
							<xs:element name="pointSizeLegendTitle" minOccurs="0">
								<xs:annotation>
									<xs:documentation>This defines a title within the legend above the palette for the point size.  If this element is not defined, no additional title is drawn.  If no legend is drawn, this element is ignored.  Styling for this element is inherited from the legend title element.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element ref="chartContents" minOccurs="0"/>
										<xs:element ref="masterDetailLinks" minOccurs="0"/>
										<xs:element ref="propertyList" minOccurs="0"/>
									</xs:all>
									<xs:attribute name="refQuery" type="xs:string" use="required"/>
								</xs:complexType>
							</xs:element>
							<xs:element name="pointColorLegendTitle" minOccurs="0">
								<xs:annotation>
									<xs:documentation>This defines a title within the legend above the palette for the point color.  If this element is not defined, no additional title is drawn.  If no legend is drawn, this element is ignored.  Styling for this element is inherited from the legend title element.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element ref="chartContents" minOccurs="0"/>
										<xs:element ref="masterDetailLinks" minOccurs="0"/>
										<xs:element ref="propertyList" minOccurs="0"/>
									</xs:all>
									<xs:attribute name="refQuery" type="xs:string" use="required"/>
								</xs:complexType>
							</xs:element>
							<xs:element ref="fillEffects" minOccurs="0"/>
						</xs:all>
						<xs:attributeGroup ref="MapLayerProperties"/>
						<xs:attributeGroup ref="MapDataLayerProperties"/>
						<xs:attributeGroup ref="ShowMapValuesAndLabels"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="regionLayer" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Points to a layer in the map that has defined regions.  Each region will be colored differently based on the measure.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="defaultChartMeasure" minOccurs="0"/>
							<xs:element name="regionMeasure" type="ChartMeasureType" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Measure that controls the color of each region.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="regionColorLegendTitle" minOccurs="0">
								<xs:annotation>
									<xs:documentation>This defines a title within the legend above the palette for the region color.  If this element is not defined, no additional title is drawn.  If no legend is drawn, this element is ignored.  Styling for this element is inherited from the legend title element.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element ref="chartContents" minOccurs="0"/>
										<xs:element ref="masterDetailLinks" minOccurs="0"/>
										<xs:element ref="propertyList" minOccurs="0"/>
									</xs:all>
									<xs:attribute name="refQuery" type="xs:string" use="required"/>
								</xs:complexType>
							</xs:element>
							<xs:element name="mapRegionLocation" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Location information from the model used to match region feature names in the map.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element name="mapRegionRefinementLocation" minOccurs="0">
											<xs:annotation>
												<xs:documentation>Location information from the model that is used to qualify the parent element.  For example, if the parent element is set to city, this could set to country for extra qualification.</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:attribute name="refDataItem" type="xs:string" use="required"/>
											</xs:complexType>
										</xs:element>
									</xs:all>
									<xs:attribute name="refDataItem" type="xs:string" use="required"/>
								</xs:complexType>
							</xs:element>
							<xs:element ref="numericChartPalette" minOccurs="0"/>
							<xs:element ref="style" minOccurs="0"/>
							<xs:element ref="conditionalStyles" minOccurs="0"/>
							<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
							<xs:element ref="mapChartDrills" minOccurs="0"/>
							<xs:element ref="conditionalChartColors" minOccurs="0"/>
							<xs:element ref="fillEffects" minOccurs="0"/>
						</xs:all>
						<xs:attributeGroup ref="MapLayerProperties"/>
						<xs:attributeGroup ref="MapDataLayerProperties"/>
						<xs:attributeGroup ref="ShowMapValuesAndLabels"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="displayLayers" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Collection of layers that are shown purely for display purposes, i.e., they are not data driven.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="displayLayer" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>Layer that is shown only for display purposes.  This could be a set of rivers or municipal boundries.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element ref="style" minOccurs="0"/>
										<xs:element ref="conditionalStyles" minOccurs="0"/>
										<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
										<xs:element ref="fillEffects" minOccurs="0"/>
									</xs:all>
									<xs:attributeGroup ref="MapLayerProperties"/>
									<xs:attributeGroup ref="ShowLabelsBoolean"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="mapDictionary" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Use the dictionary if the string in the data does not exactly match the string in the map.  For example, if you want China to match People's Republic of China, use the dictionary.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="mapDictionaryEntry" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>Forces a match between data strings and map feature names.  Most useful in the case of errors in the data or the map.  For example, if the map has a feature TRONTO and the data has TORONTO, define a map entry for both and they will be treated the same.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:attribute name="dataName" type="xs:string" use="required"/>
									<xs:attribute name="locale" type="xs:string"/>
									<xs:attribute name="mapName" type="xs:string" use="required"/>
									<xs:attribute name="mapRefinementName" type="xs:string"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element ref="axisTitle" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="chartTextStyle" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
				<xs:element ref="appMapProperties" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="StandardChartAttributes"/>
			<xs:attribute name="refMap" type="xs:string" use="required"/>
			<xs:attribute name="noDataFeaturesSize" type="xs:decimal" default="5"/>
			<xs:attribute name="allowUnplottedData" type="xs:boolean" default="false"/>
			<xs:attribute name="dataLocale" type="xs:string">
				<xs:annotation>
					<xs:documentation>This attribute defines what locale the data is in.  This is important in maps because the server needs to know which names in the map file to try and match with the data.  Normally this does not need to be set since the default will work.  However, if the data is in english and the run locale is set to russian, depending on the map, you could run into trouble.  In this case you would set the data locale to be english.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="expandFeatures" type="xs:boolean" default="false"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="metricsChart">
		<xs:annotation>
			<xs:documentation>This is same as the metrics manager history chart.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="commonClusters" minOccurs="0"/>
				<xs:element ref="combinationChartTypes" minOccurs="0"/>
				<xs:element ref="defaultChartMeasure" minOccurs="0"/>
				<xs:element name="toleranceMeasure" type="ChartMeasureType" minOccurs="0">
					<xs:annotation>
						<xs:documentation>This element represents the tolerance range of tolerance marker.  If this element is not presence, no tolerance will be drawn.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="targetMeasure" type="ChartMeasureType" minOccurs="0">
					<xs:annotation>
						<xs:documentation>This element represents the target range or tolerance marker.  If this element is not presence, no marker will be drawn and the chart will essentially be a simple combination chart.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="baselines" minOccurs="0"/>
				<xs:element ref="chartBody" minOccurs="0"/>
				<xs:element ref="chartFooter" minOccurs="0"/>
				<xs:element ref="chartPalette" minOccurs="0"/>
				<xs:element ref="chartSubTitle" minOccurs="0"/>
				<xs:element ref="chartTitle" minOccurs="0"/>
				<xs:element ref="markers" minOccurs="0"/>
				<xs:element ref="notes" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="conditionalChartColors" minOccurs="0"/>
				<xs:element ref="legend" minOccurs="0"/>
				<xs:element ref="numericalAxisY1" minOccurs="0"/>
				<xs:element ref="ordinalAxis" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element name="targetLabel" minOccurs="0">
					<xs:annotation>
						<xs:documentation>This is the label for the target range that will be drawn in the legend.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="chartContents" minOccurs="0"/>
							<xs:element ref="propertyList" minOccurs="0"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element name="toleranceLabel" minOccurs="0">
					<xs:annotation>
						<xs:documentation>This is the label for the tolernace range that will be drawn in the legend.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="chartContents" minOccurs="0"/>
							<xs:element ref="propertyList" minOccurs="0"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element name="diamondLabel" minOccurs="0">
					<xs:annotation>
						<xs:documentation>This is the label for the target diamond marker that will be drawn in the legend.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="chartContents" minOccurs="0"/>
							<xs:element ref="propertyList" minOccurs="0"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="StandardChartAttributes"/>
			<xs:attributeGroup ref="VisualEffects"/>
			<xs:attributeGroup ref="DisplayDataLocation"/>
			<xs:attribute name="toleranceColor" type="ColorType" default="green"/>
			<xs:attribute name="toleranceTransparency" default="0">
				<xs:simpleType>
					<xs:restriction base="xs:decimal">
						<xs:minInclusive value="0"/>
						<xs:maxInclusive value="100"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="targetRange" type="xs:decimal" default="50"/>
			<xs:attribute name="targetColor" type="ColorType" default="#FFC800"/>
			<xs:attribute name="targetTransparency" default="0">
				<xs:simpleType>
					<xs:restriction base="xs:decimal">
						<xs:minInclusive value="0"/>
						<xs:maxInclusive value="100"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="markerColor" type="ColorType" default="green"/>
			<xs:attribute name="markerTransparency" default="0">
				<xs:simpleType>
					<xs:restriction base="xs:decimal">
						<xs:minInclusive value="0"/>
						<xs:maxInclusive value="100"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="targetBorderColor" type="ColorType" default="black"/>
			<xs:attribute name="targetBorderTransparency" default="0">
				<xs:simpleType>
					<xs:restriction base="xs:decimal">
						<xs:minInclusive value="0"/>
						<xs:maxInclusive value="100"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="performancePattern" default="onTarget">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="onTarget"/>
						<xs:enumeration value="belowTarget"/>
						<xs:enumeration value="aboveTarget"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="skew" type="xs:decimal" default="100"/>
			<xs:attribute name="showTargetMarker" type="xs:boolean" default="true"/>
			<xs:attribute name="targetMarkerPosition" default="first">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="first"/>
						<xs:enumeration value="center">
							<xs:annotation>
								<xs:documentation source="doc_enum_center_targetMarkerPosition"/>
							</xs:annotation>
						</xs:enumeration>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="ordinalAxis" type="OrdinalAxisType">
		<xs:annotation>
			<xs:documentation>Defines the axis line for a non-numeric axis.  Styling is applied to axis line.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="baselines">
		<xs:annotation>
			<xs:documentation>Collection of baselines to draw on the chart.  The baselines can be either horizontal or vertical.  The position of the baseline can be determined by a static value, an expression or a specific member.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="baseline" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Each baseline can be data driven from another query.  If refQuery is not present, it is assumed to apply to the query of the chart.  If the baseline is data driven and multiple rows are returned for the this value, the value of the first row will be used rather than returning an error.  Data items referenced here will go into the overall level of both edges in the QRD unless it comes from a different query in which case it will have its own QRD.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element name="baselinePosition" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Indicates what value the baseline will be drawn at.  Note that it is possible to draw a baseline at a specific member, like 'Canada', for example.  This will be done by either specifying the correctstatic value or by the correct expression.  The author tool should prevent the creation of meaningless baselines, if possible.  For example, drawing a vertical baseline at 'Canada' on a scatter chart has no meaning.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:choice>
										<xs:element ref="numericPosition"/>
										<xs:element ref="memberPosition"/>
									</xs:choice>
									<xs:attributeGroup ref="UseNumericalAxis"/>
								</xs:complexType>
							</xs:element>
							<xs:element ref="baselineLabel" minOccurs="0"/>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
							<xs:element ref="style" minOccurs="0"/>
							<xs:element ref="conditionalStyles" minOccurs="0"/>
							<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
							<xs:element ref="propertyList" minOccurs="0"/>
							<xs:element ref="masterDetailLinks" minOccurs="0"/>
						</xs:all>
						<xs:attributeGroup ref="BaselineAttributes"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="notes">
		<xs:annotation>
			<xs:documentation>Collection of notes to draw on the chart</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="note" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>The datasource defines the contents of the note.  It is required since there is no point in having a note without text of some sort.  If the value of the note is data driven, it can come from another query.  If the refQuery of this element is empty or not present, the query for the chart is assumed.  If multiple rows are returned for a data driven note, the value of the first row will be used rather than returning an error.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
							<xs:element name="noteContent" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Defines the contents of the note.  This is similar to the baseline label and the marker label.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element ref="chartContents"/>
										<xs:element ref="style" minOccurs="0"/>
										<xs:element ref="masterDetailLinks" minOccurs="0"/>
										<xs:element ref="conditionalStyles" minOccurs="0"/>
										<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
										<xs:element ref="propertyList" minOccurs="0"/>
									</xs:all>
									<xs:attribute name="refQuery" type="xs:string" use="required"/>
								</xs:complexType>
							</xs:element>
							<xs:element name="noteBorder" minOccurs="0">
								<xs:annotation>
									<xs:documentation>This element represents the borders on a note.  If this element is not present, no border will be drawn on the note.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:attributeGroup ref="LineStyleAttribute"/>
									<xs:attribute name="color" type="ColorType" default="black"/>
									<xs:attribute name="transparency" default="0">
										<xs:simpleType>
											<xs:restriction base="xs:decimal">
												<xs:minInclusive value="0"/>
												<xs:maxInclusive value="100"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
								</xs:complexType>
							</xs:element>
						</xs:all>
						<xs:attribute name="bottom" type="xs:nonNegativeInteger" default="0"/>
						<xs:attribute name="left" type="xs:nonNegativeInteger" default="0"/>
						<xs:attribute name="height" type="xs:positiveInteger" default="35">
							<xs:annotation>
								<xs:documentation source="doc_att_height_chart"/>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="width" type="xs:positiveInteger" default="150">
							<xs:annotation>
								<xs:documentation source="doc_att_width_chart"/>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="pointChartMarkers">
		<xs:annotation>
			<xs:documentation>Collection of markers for a point chart</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="pointChartMarker" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Defines a marker for a point chart.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="markerLabel" minOccurs="0"/>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
							<xs:element name="pointChartMarkerPosition">
								<xs:annotation>
									<xs:documentation>Defines the position of a marker in a point chart.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element ref="XPosition"/>
										<xs:element ref="YPosition"/>
									</xs:all>
								</xs:complexType>
							</xs:element>
							<xs:element ref="style" minOccurs="0"/>
							<xs:element ref="conditionalStyles" minOccurs="0"/>
							<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
							<xs:element ref="propertyList" minOccurs="0"/>
							<xs:element ref="masterDetailLinks" minOccurs="0"/>
						</xs:all>
						<xs:attributeGroup ref="DataPointAttributes"/>
						<xs:attribute name="dataPointColor" type="ColorType" default="black"/>
						<xs:attribute name="refQuery" type="xs:string" use="required"/>
						<xs:attribute name="dataPointTransparency" default="0">
							<xs:simpleType>
								<xs:restriction base="xs:decimal">
									<xs:minInclusive value="0"/>
									<xs:maxInclusive value="100"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="markerTextLocation" default="chart">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="none"/>
						<xs:enumeration value="chart"/>
						<xs:enumeration value="legend"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="markers">
		<xs:annotation>
			<xs:documentation>Common definition of markers to draw on the chart.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="marker" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>The datasource for the marker label  defines that text that maybe associated with.  It is optional since text is not required.  Data references will be added to the lowest level of both edges in the QRD.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element name="markerPosition">
								<xs:annotation>
									<xs:documentation>This controls where the marker will be drawn on the chart.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element ref="memberPosition"/>
										<xs:element ref="numericPosition"/>
									</xs:all>
									<xs:attributeGroup ref="UseNumericalAxis"/>
								</xs:complexType>
							</xs:element>
							<xs:element ref="markerLabel" minOccurs="0"/>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
							<xs:element ref="style" minOccurs="0"/>
							<xs:element ref="conditionalStyles" minOccurs="0"/>
							<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
							<xs:element ref="propertyList" minOccurs="0"/>
							<xs:element ref="masterDetailLinks" minOccurs="0"/>
						</xs:all>
						<xs:attribute name="dataPointColor" type="ColorType" default="black"/>
						<xs:attributeGroup ref="DataPointAttributes"/>
						<xs:attribute name="refQuery" type="xs:string" use="required"/>
						<xs:attribute name="dataPointTransparency" default="0">
							<xs:simpleType>
								<xs:restriction base="xs:decimal">
									<xs:minInclusive value="0"/>
									<xs:maxInclusive value="100"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="markerTextLocation" default="chart">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="none"/>
						<xs:enumeration value="chart"/>
						<xs:enumeration value="legend"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="legend">
		<xs:annotation>
			<xs:documentation>Common definition for a chart legend.  If this element  is not present in the chart no legend will be rendered.  The associated style and conditional style will affect each row in the legend.  Report Drills defined here applies to the items in the legend contents, i.e., each row of the legend.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element name="legendPosition">
					<xs:annotation>
						<xs:documentation>Controls where the legend will appear.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice>
							<xs:element name="relativePosition">
								<xs:annotation>
									<xs:documentation>Positions the chart by setting an enumeration value.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:attribute name="legendPosition" default="right">
										<xs:simpleType>
											<xs:restriction base="xs:NMTOKEN">
												<xs:enumeration value="right"/>
												<xs:enumeration value="left"/>
												<xs:enumeration value="bottom"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
								</xs:complexType>
							</xs:element>
							<xs:element name="absolutePosition">
								<xs:annotation>
									<xs:documentation>Positions the legend by setting the pixel position of the top left corner of the legend.  This position is in chart co-ordinates.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:attribute name="topLegendPosition" type="xs:nonNegativeInteger" default="50"/>
									<xs:attribute name="leftLegendPosition" type="xs:nonNegativeInteger" default="0"/>
									<xs:attribute name="rightLegendPosition" type="xs:nonNegativeInteger" default="50"/>
									<xs:attribute name="bottomLegendPosition" type="xs:nonNegativeInteger" default="0"/>
								</xs:complexType>
							</xs:element>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element name="legendTitle" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Represents the legend title.  If this element does not exist, no legend title will be generated.  If it exists, and its contents are empty, a default one will be generated.  Data references will be added to the overall level of both edges in the QRD.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:complexContent>
							<xs:extension base="ChartTitleType"/>
						</xs:complexContent>
					</xs:complexType>
				</xs:element>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="fillEffects" minOccurs="0"/>
			</xs:all>
			<xs:attribute name="autoFontResizing" type="xs:boolean" default="true"/>
			<xs:attribute name="allowTruncation" type="xs:boolean" default="true"/>
			<xs:attribute name="truncationText" type="xs:string" default="..."/>
			<xs:attribute name="maxCharacters" type="xs:positiveInteger" default="48"/>
			<xs:attribute name="separator" type="xs:string" default=" - ">
				<xs:annotation>
					<xs:documentation>This is used to separate multiple levels in the legend.  For example, if the legend must show country, city and qty / margin, the default separator could be used to show Canada-Ottawa-Qty.  If the chartContents is defined, this separator is not used since they author is explicitly saying what they want and would include a text item for the separator if so desired.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attributeGroup ref="BorderProperties"/>
			<xs:attribute name="showLegendValues" default="none">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="none"/>
						<xs:enumeration value="first">
							<xs:annotation>
								<xs:documentation source="doc_enum_first_showLegendValues"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="last"/>
						<xs:enumeration value="min">
							<xs:annotation>
								<xs:documentation source="doc_enum_min_showLegendValues"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="max">
							<xs:annotation>
								<xs:documentation source="doc_enum_max_showLegendValues"/>
							</xs:annotation>
						</xs:enumeration>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="chartTitle">
		<xs:annotation>
			<xs:documentation>Title to display on the chart</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="ChartTitleType"/>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="chartSubTitle">
		<xs:annotation>
			<xs:documentation>Sub title to diplay in the chart</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="ChartTitleType"/>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="chartGradient">
		<xs:annotation>
			<xs:documentation>Defines a color gradient</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="direction" default="down">
				<xs:annotation>
					<xs:documentation source="doc_att_direction_chart"/>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="up">
							<xs:annotation>
								<xs:documentation source="doc_enum_direction_up"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="down">
							<xs:annotation>
								<xs:documentation source="doc_enum_direction_down"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="left">
							<xs:annotation>
								<xs:documentation source="doc_enum_direction_left"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="right">
							<xs:annotation>
								<xs:documentation source="doc_enum_direction_right"/>
							</xs:annotation>
						</xs:enumeration>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="fromColor" type="ColorType" default="black"/>
			<xs:attribute name="toColor" type="ColorType" default="white"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="chartColor">
		<xs:annotation>
			<xs:documentation>Defines a color</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="value" default="black">
				<xs:annotation>
					<xs:documentation source="doc_att_chartColor_value"/>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="ColorType"/>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="chartPattern">
		<xs:annotation>
			<xs:documentation>Defines a background pattern.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="patternType" default="horizontal">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="horizontal">
							<xs:annotation>
								<xs:documentation source="doc_enum_patternType_horizontal"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="vertical">
							<xs:annotation>
								<xs:documentation source="doc_enum_patternType_vertical"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="forwardDiagonal"/>
						<xs:enumeration value="backwardDiagonal"/>
						<xs:enumeration value="cross"/>
						<xs:enumeration value="diagonalCross"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="foregroundColor" type="ColorType" default="black"/>
			<xs:attribute name="backgroundColor" type="ColorType" default="white"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="chartPalette">
		<xs:annotation>
			<xs:documentation>Defines a palette for the chart.  It contains an ordered list of gradients and / or colors.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:choice maxOccurs="unbounded">
					<xs:element ref="chartGradient"/>
					<xs:element ref="chartColor"/>
					<xs:element ref="chartPattern"/>
				</xs:choice>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="chartNode">
		<xs:annotation>
			<xs:documentation>One edge of the chart.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="chartNodeMembers">
					<xs:complexType>
						<xs:sequence>
							<xs:element ref="chartNodeMember" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="chartNestedNodes" minOccurs="0">
					<xs:complexType>
						<xs:sequence>
							<xs:element ref="chartNode" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="chartFooter">
		<xs:annotation>
			<xs:documentation>Defines a footer that is rendered as part of the chart.  In the end it is simply a piece of stylized text.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="ChartTitleType"/>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="chartBody">
		<xs:annotation>
			<xs:documentation>Defines the body of the chart itself.  The style of the body can be set independently of the chart itself.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="fillEffects" minOccurs="0"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="progressiveBars">
		<xs:annotation>
			<xs:documentation>Bar definition for the progressive Chart.  The child chartContents node applies to the labels of each bar.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="chartNodes" minOccurs="0"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="gridlines">
		<xs:annotation>
			<xs:documentation>The presence of this element means that gridlines should be drawn for the appropriate axis.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="LineStyles"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="pointXMeasure" type="ChartMeasureType">
		<xs:annotation>
			<xs:documentation>Measure that will run horizontally on the graph.  The style is only for formatting display values. </xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="pointYMeasure" type="ChartMeasureType">
		<xs:annotation>
			<xs:documentation>Measure that will run vertically on the graph.  The style is only to allow data formatting of display values.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="points">
		<xs:annotation>
			<xs:documentation>Each row defines a single point that will appear in each cluster.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="chartNodes"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="pointClusters">
		<xs:annotation>
			<xs:documentation>Each row defines a cluster of points.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="chartNodes"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="axisTitle">
		<xs:annotation>
			<xs:documentation>Represents the title drawn for the axis.  If this element is not present, no title will be drawn, if it is present but empty (no dataSource) a default title is drawn.  Data references will be added to the overall level of both edges in the QRD.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="ChartTitleType"/>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="conditionalChartColors">
		<xs:annotation>
			<xs:documentation>Contains a sequence of conditional colors.  If the condition is true, that color or gradient is used for the relevant piece of chart (bar, point, etc...)</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="conditionalChartColor" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Conditional define a color for a piece of chart.  Canada (or Fred) is red.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice>
							<xs:element ref="chartColor"/>
							<xs:element ref="chartGradient"/>
							<xs:element ref="chartPattern"/>
						</xs:choice>
						<xs:attributeGroup ref="ConditionalPartAttributes"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attributeGroup ref="ConditionalOwnerAttributes"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="chartContents">
		<xs:annotation>
			<xs:documentation>Defines the contents for this item.  It could contain multiple pieces of text that can be styled individually.  For example, in the legend, it will be possible to show 'Canada $357,98' by including two chartTextItems.  If this element is not present, then no labels or legend items will be rendered.  If the contents of it are empty, then the default will be generated.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="chartTextItem" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Defines one piece of text to display.  For a chart, this will typically be a legend item, legend title, axis label or axis title.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="conditionalDataSources" minOccurs="0"/>
							<xs:element ref="dataSource"/>
							<xs:element ref="style" minOccurs="0"/>
							<xs:element ref="conditionalStyles" minOccurs="0"/>
							<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="commonClusters">
		<xs:annotation>
			<xs:documentation>Common axis for all items in the combination chart.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="chartNodes"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="chartNodes">
		<xs:annotation>
			<xs:documentation>Collection of nodes for this part of the graph.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="chartNode" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="radialMeasure" type="ChartMeasureType">
		<xs:annotation>
			<xs:documentation>Measure that defines the radius of each point.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="bar">
		<xs:annotation>
			<xs:documentation>Represents the bars of a combination chart.  The connecting lines element will only be applied if the valueType of the bar is 'stacked'.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="chartNodes" minOccurs="0"/>
				<xs:element ref="connectLines" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="BorderProperties"/>
			<xs:attributeGroup ref="UseNumericalAxis"/>
			<xs:attributeGroup ref="ChartValueType"/>
			<xs:attribute name="showValues" type="xs:boolean" default="false"/>
			<xs:attributeGroup ref="ShowAbsoluteValues"/>
			<xs:attributeGroup ref="DisplayDataLocation"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="line">
		<xs:annotation>
			<xs:documentation>Represents the lines of a combination chart.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="chartNodes" minOccurs="0"/>
				<xs:element name="highMarker" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Marker that is drawn for the highest value in this line.  Its position is the highest numeric value in the series and the corresponding ordinal value.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attributeGroup ref="DataPointAttributes"/>
						<xs:attribute name="dataPointColor" type="ColorType" default="black"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="lowMarker" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Marker that is drawn for the lowest value in the line.  Its position is the lowest numerical value for the line and the corresponding oridnal value.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="dataPointColor" type="ColorType" default="black"/>
						<xs:attributeGroup ref="DataPointAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="openMarker" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Marker that is drawn for the first non-null value in the line.  Its position is the first ordinal value and the numeric value that corresponds to that ordinal.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="dataPointColor" type="ColorType" default="black"/>
						<xs:attributeGroup ref="DataPointAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="closeMarker" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Marker that is drawn for he last non-null value in the line.  It's position is the last ordinal value and the numeric value that corresponds to that ordinal.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="dataPointColor" type="ColorType" default="black"/>
						<xs:attributeGroup ref="DataPointAttributes"/>
					</xs:complexType>
				</xs:element>
			</xs:all>
			<xs:attributeGroup ref="UseNumericalAxis"/>
			<xs:attributeGroup ref="ChartValueType"/>
			<xs:attribute name="showLine" type="xs:boolean" default="true"/>
			<xs:attribute name="showValues" type="xs:boolean" default="false"/>
			<xs:attributeGroup ref="ShowAbsoluteValues"/>
			<xs:attributeGroup ref="PointChartDataPointAttributesForLineAndRadar"/>
			<xs:attributeGroup ref="BorderProperties"/>
			<xs:attributeGroup ref="LineStylesNoColor"/>
			<xs:attributeGroup ref="DisplayDataLocation"/>
			<xs:attribute name="lineType" default="pointToPoint">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="pointToPoint"/>
						<xs:enumeration value="stepBetweenPoints"/>
						<xs:enumeration value="stepAtPoint"/>
						<xs:enumeration value="smooth"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="area">
		<xs:annotation>
			<xs:documentation>Represents the areas of a combination chart.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="chartNodes" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="UseNumericalAxis"/>
			<xs:attributeGroup ref="ChartValueType"/>
			<xs:attribute name="showValues" type="xs:boolean" default="false"/>
			<xs:attributeGroup ref="BorderProperties"/>
			<xs:attributeGroup ref="ShowAbsoluteValues"/>
			<xs:attributeGroup ref="DisplayDataLocation"/>
			<xs:attribute name="areaType" default="pointToPoint">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="pointToPoint"/>
						<xs:enumeration value="smooth"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="numericalAxisY1">
		<xs:annotation>
			<xs:documentation>Primary Y Axis</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="MeasureAxisType"/>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="numericalAxisY2">
		<xs:annotation>
			<xs:documentation>Secondary Y Axis</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="MeasureAxisType"/>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="numericPosition">
		<xs:annotation>
			<xs:documentation>The position is a numeric value on a numeric axis.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="ChartDynamicValueType"/>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="memberPosition" type="MemberPositionType">
		<xs:annotation>
			<xs:documentation>The position is given by the member returned by the datasource.  If this is a static value, such as Canada, it should be matched by string comparison.  The offset is relative to that member.  Negative values mean to the left and position values mean to the right.  This is a percentage value.  50 means  half way to the member to the immediate right.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="numericalAxisX" type="MeasureAxisType">
		<xs:annotation>
			<xs:documentation>Represents the X Axis of the chart.  If this element is not present, no axis line, gridlines, axis labels or axis title will be drawn.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="numericalAxisY" type="MeasureAxisType">
		<xs:annotation>
			<xs:documentation>Represents the Y Axis of the chart.  If this element is not present, no axis line, gridlines, axis labels or axis title will be drawn.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="numericalAxisRadial" type="MeasureAxisType">
		<xs:annotation>
			<xs:documentation>Represents the radial axis of the polar chart.  If this element is not present no axis line, grid lines, axis label or axis title will be drawn.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="baselineLabel">
		<xs:annotation>
			<xs:documentation>Label that will be shown with the rendered baseline.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="chartContents"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="threeDBaselinePosition" type="ChartDynamicValueType">
		<xs:annotation>
			<xs:documentation>Three D Baselines can only be positioned numerically on the Z Axis.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="markerLabel">
		<xs:annotation>
			<xs:documentation>This is the label that may be displayed with the marker.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="chartContents"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="pointChartBaselines">
		<xs:annotation>
			<xs:documentation>Collection of point chart related baselines</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="pointChartBaseline" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Defines a baseline for a point chart.  Baselines can only be positioned on a point chart by specifying two numeric values.  The style and conditional style specified on the baseline is applied to its label (if defined).</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="baselineLabel" minOccurs="0"/>
							<xs:element ref="conditionalRender" minOccurs="0"/>
							<xs:element name="pointChartBaselinePosition" type="ChartDynamicValueType">
								<xs:annotation>
									<xs:documentation>Container element for the position of a pointChartBaseline.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
							<xs:element ref="masterDetailLinks" minOccurs="0"/>
							<xs:element ref="propertyList" minOccurs="0"/>
						</xs:all>
						<xs:attributeGroup ref="BaselineAttributes"/>
						<xs:attribute name="pointChartAxis" default="xAxis">
							<xs:simpleType>
								<xs:restriction base="xs:NMTOKEN">
									<xs:enumeration value="xAxis"/>
									<xs:enumeration value="yAxis"/>
									<xs:enumeration value="radialAxis"/>
									<xs:enumeration value="angularAxis"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="XPosition" type="ChartDynamicValueType">
		<xs:annotation>
			<xs:documentation>Position along the X or Radial axis of a point chart.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="YPosition" type="ChartDynamicValueType">
		<xs:annotation>
			<xs:documentation>Position along the y or angular axis of a point chart.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="defaultChartMeasure" type="ChartMeasureType">
		<xs:annotation>
			<xs:documentation>This element identifies the default measure to be used for a chart. If the measures of  the chart cannot be determined by what is being rendered on the edges, then the default measure will be rendered.  The style is appropriate only for data formating of values.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="winLossChartMeasure" type="ChartMeasureType">
		<xs:annotation>
			<xs:documentation>This element identifies the actual measure for a bullet chart.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="connectLines">
		<xs:annotation>
			<xs:documentation>The presence of this element indicates that connecting lines will be drawn between the bars.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="LineStyles"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="numericChartPalette">
		<xs:annotation>
			<xs:documentation>Co0ntrols the colors used in the chart based on a numeric range.  The percentValues attributes indicates whether the pallete values are percentages or absolute values.  If percentages, it represents a percent of the span of all the measure values.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element name="discreteChartPalette">
					<xs:annotation>
						<xs:documentation>This is an ordered list of palette entires.  Determining which one to use for a point or region depends on the current measure value and the attribute paletteValue.  If the measure value is lower then the first enty, that palette is used.  If the value is between the first and second value, the second entry is used and so forth.  Note that the value on the last entry is not used if set.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="discreteChartPaletteEntry" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>Defines an entry in the palette.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:choice>
										<xs:element ref="chartGradient"/>
										<xs:element ref="chartPattern"/>
										<xs:element ref="chartColor"/>
									</xs:choice>
									<xs:attribute name="paletteValue" type="xs:float" use="optional"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element ref="continuousChartPalette"/>
			</xs:choice>
			<xs:attribute name="percentValues" type="xs:boolean" default="true"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="mapChartDrills">
		<xs:annotation>
			<xs:documentation>This defines a set of drill throughs for each feature in this layer.  This will allow the author to define a different drill through target report for each state, for example.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="mapChartDrill" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Defines a drill through for one feature.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="reportDrills" minOccurs="0"/>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
						</xs:all>
						<xs:attribute name="featureId" type="xs:string" use="required"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="minorGridlines">
		<xs:annotation>
			<xs:documentation>This element represents minor gridlines.  The attribute numberOfMinorGridlines controls how many are drawn between each major gridline.  Zero means no minor gridlines, two means two between each gridline.  If this element is not present, no minor gridlines will be drawn.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="numberOfMinorGridlines" type="xs:nonNegativeInteger" default="0"/>
			<xs:attributeGroup ref="LineStyles"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="regressionLine">
		<xs:annotation>
			<xs:documentation>This represents one regression line in a chart.  The regression line can be drawn for the data of all series, one regression line can be drawn for each series or one regression line can be drawn for a specific series.  The drawForSeries attribute controls this.  All means one line for all series, each means one line for each series and speicfic means that it will be drawn for the series identified by the string attribute specificSeries.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="regressionLinePosition">
					<xs:annotation>
						<xs:documentation>Defines how the regression line is position on the chart.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice>
							<xs:element name="commonLog">
								<xs:annotation>
									<xs:documentation>Uses a common log regression.</xs:documentation>
								</xs:annotation>
								<xs:complexType/>
							</xs:element>
							<xs:element name="naturalLog">
								<xs:annotation>
									<xs:documentation>Uses a natural log regression.</xs:documentation>
								</xs:annotation>
								<xs:complexType/>
							</xs:element>
							<xs:element name="linear">
								<xs:annotation>
									<xs:documentation>Uses linear regression.</xs:documentation>
								</xs:annotation>
								<xs:complexType/>
							</xs:element>
							<xs:element name="exponential">
								<xs:annotation>
									<xs:documentation>Uses exponential regression.</xs:documentation>
								</xs:annotation>
								<xs:complexType/>
							</xs:element>
							<xs:element name="polynomialFit">
								<xs:annotation>
									<xs:documentation>Fits a polynomial curve to the data.  The exponent attribute indicates the highest exponent of the fit equation.  For example, if set to 3, the equation used would be y=Ax^3 + Bx^2 + Cx + D</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:attribute name="exponent" default="1">
										<xs:simpleType>
											<xs:restriction base="xs:positiveInteger">
												<xs:maxInclusive value="10"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
								</xs:complexType>
							</xs:element>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element name="regressionLineLabel" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Label that will be will be shown in the legend for the regression line.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="chartContents" minOccurs="0"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="propertyList" minOccurs="0"/>
			</xs:all>
			<xs:attribute name="numberOfRegressionLines" default="oneForAllData">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="oneForAllData"/>
						<xs:enumeration value="oneForEachSeries"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attributeGroup ref="LineStyles"/>
			<xs:attribute name="showInLegend" type="xs:boolean" default="true"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="combinationChartTypes">
		<xs:annotation>
			<xs:documentation>Defines the things that are rendered in the chart.  This could include any combination, in any order, of bars, lines, or areas.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:choice maxOccurs="unbounded">
					<xs:element ref="bar"/>
					<xs:element ref="line"/>
					<xs:element ref="area"/>
				</xs:choice>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="axisLine">
		<xs:annotation>
			<xs:documentation>The presence of this element indicates that an axis line should be rendered.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="LineStyles"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="continuousChartPalette">
		<xs:annotation>
			<xs:documentation>Defines a continuous chart palette.   The color used from the palette is determined by a linear interpolation between the colors in the palette based on a measure value.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="continuousChartPaletteEntry" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Defines an entry in the palette.  If the measure value is equal to the value of paletteEntryValue, this color will be used.  Note that this is an ordered list and the value of the attribute paletteEntryValue must increase.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="paletteEntryValue" type="xs:float" use="required"/>
						<xs:attribute name="paletteEntryColor" type="ColorType" default="black"/>
						<xs:attribute name="transparency" default="0">
							<xs:simpleType>
								<xs:restriction base="xs:decimal">
									<xs:minInclusive value="0"/>
									<xs:maxInclusive value="100"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="chartLabel">
		<xs:annotation>
			<xs:documentation>Defines the label for this item.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="chartContents" minOccurs="0"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="percentAlongAxis">
		<xs:annotation>
			<xs:documentation>Percentage along the axis.  50% will be the middle of the axis.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="percentAlongAxis" type="xs:decimal" default="50"/>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="FillEffectsType">
		<xs:choice>
			<xs:element ref="chartGradient"/>
			<xs:element ref="chartPattern"/>
			<xs:element ref="chartColor"/>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="ChartMeasureType">
		<xs:annotation>
			<xs:documentation>Definition of a measure used within a chart.</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element ref="style" minOccurs="0"/>
			<xs:element ref="conditionalStyles" minOccurs="0"/>
			<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
			<xs:element ref="chartLabel" minOccurs="0"/>
			<xs:element ref="XMLAttributes" minOccurs="0"/>
		</xs:all>
		<xs:attribute name="refDataItem" type="xs:string" use="required"/>
		<xs:attributeGroup ref="SolveOrderAttributes"/>
	</xs:complexType>
	<xs:complexType name="ChartTitleType">
		<xs:annotation>
			<xs:documentation>Generic type that represents a title on a chart.</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element ref="chartContents" minOccurs="0"/>
			<xs:element ref="style" minOccurs="0"/>
			<xs:element ref="conditionalStyles" minOccurs="0"/>
			<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
			<xs:element ref="XMLAttributes" minOccurs="0"/>
			<xs:element ref="propertyList" minOccurs="0"/>
			<xs:element ref="masterDetailLinks" minOccurs="0"/>
		</xs:all>
		<xs:attribute name="refQuery" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="ChartDynamicValueType">
		<xs:annotation>
			<xs:documentation>Complex type to define special chart values.</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element ref="dataSource"/>
			<xs:element name="mean">
				<xs:annotation>
					<xs:documentation>Mean of the data, adjusted by the number of standard deviations (+ or -)</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="numberOfStddev" type="xs:decimal" default="0"/>
					<xs:attribute name="comboIndex" type="xs:nonNegativeInteger" default="0"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="limit">
				<xs:annotation>
					<xs:documentation>Mininum or maximum of the data.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="limitType" default="max">
						<xs:simpleType>
							<xs:restriction base="xs:string">
								<xs:enumeration value="min"/>
								<xs:enumeration value="max"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="comboIndex" type="xs:nonNegativeInteger" default="0"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="percentile">
				<xs:annotation>
					<xs:documentation>Percentile of the data</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="percentile" type="xs:decimal" default="50"/>
					<xs:attribute name="comboIndex" type="xs:nonNegativeInteger" default="0"/>
				</xs:complexType>
			</xs:element>
			<xs:element ref="percentAlongAxis"/>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="MeasureAxisType">
		<xs:annotation>
			<xs:documentation>Allows selection of an appropriate axis type.  The style element is primarily for data formating.</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element ref="axisTitle" minOccurs="0"/>
			<xs:element ref="gridlines" minOccurs="0"/>
			<xs:element ref="minorGridlines" minOccurs="0"/>
			<xs:element ref="axisLine" minOccurs="0"/>
			<xs:element ref="style" minOccurs="0"/>
			<xs:element ref="conditionalStyles" minOccurs="0"/>
			<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
		</xs:all>
		<xs:attributeGroup ref="MeasureAxisAttributes"/>
		<xs:attribute name="includeZeroForAutoScale" type="xs:boolean" default="true"/>
		<xs:attribute name="showAxisLabels" type="xs:boolean" default="true"/>
	</xs:complexType>
	<xs:complexType name="EmptyType">
		<xs:annotation>
			<xs:documentation>This defines an empty complex type.</xs:documentation>
		</xs:annotation>
	</xs:complexType>
	<xs:complexType name="OrdinalAxisType">
		<xs:annotation>
			<xs:documentation>Type that represents an ordinal or discrete axis.</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element ref="style" minOccurs="0"/>
			<xs:element ref="conditionalStyles" minOccurs="0"/>
			<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
			<xs:element ref="axisTitle" minOccurs="0"/>
			<xs:element ref="reportDrills" minOccurs="0"/>
			<xs:element ref="gridlines" minOccurs="0"/>
			<xs:element ref="minorGridlines" minOccurs="0"/>
			<xs:element ref="axisLine" minOccurs="0"/>
			<xs:element name="labelControl" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Controls how labels are rendered</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:choice>
						<xs:element name="autoLabelControl">
							<xs:annotation>
								<xs:documentation>Specifying this element allows the server to control how the labels are rendered.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:attribute name="allowRotate45DegreesForCategoryLabels" type="xs:boolean" default="true"/>
								<xs:attribute name="allowRotate90DegreesForCategoryLabels" type="xs:boolean" default="true"/>
								<xs:attribute name="allowStaggerForCategoryLabels" type="xs:boolean" default="true"/>
								<xs:attribute name="allowSkipForCategoryLabels" type="xs:boolean" default="true"/>
							</xs:complexType>
						</xs:element>
						<xs:element name="manualLabelControl">
							<xs:annotation>
								<xs:documentation>Specifying this element allows the author more control over the labels.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:attribute name="displayFrequency" type="xs:integer" default="5"/>
								<xs:attribute name="firstLabel" type="xs:integer" default="1"/>
							</xs:complexType>
						</xs:element>
					</xs:choice>
				</xs:complexType>
			</xs:element>
		</xs:all>
		<xs:attribute name="categoryitemMaxCharacters" type="xs:positiveInteger" default="48"/>
		<xs:attribute name="categoryitemEnableTruncation" type="xs:boolean" default="true"/>
		<xs:attribute name="truncationText" type="xs:string" default="..."/>
		<xs:attribute name="showAxisLabels" type="xs:boolean" default="true"/>
	</xs:complexType>
	<xs:complexType name="MemberPositionType">
		<xs:annotation>
			<xs:documentation>The position is given by the member returned by the datasource.  If this is a static value, such as Canada, it should be matched by string comparison.  The offset is relative to that member.  Negative values mean to the left and position values mean to the right.  This is a percentage value.  50 means  half way to the member to the immediate right.</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element ref="reportExpression"/>
			<xs:element ref="percentAlongAxis"/>
			<xs:element name="memberIndex">
				<xs:annotation>
					<xs:documentation>One based index of the member.</xs:documentation>
				</xs:annotation>
				<xs:complexType mixed="false">
					<xs:attribute name="memberIndex" type="xs:unsignedInt" default="1"/>
				</xs:complexType>
			</xs:element>
		</xs:choice>
		<xs:attribute name="memberOffset" type="xs:decimal" default="0"/>
	</xs:complexType>
	<xs:attributeGroup name="StandardChartAttributes">
		<xs:annotation>
			<xs:documentation>Common set of chart attributes.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="refQuery" type="xs:string" use="required"/>
		<xs:attributeGroup ref="CommonLayoutAttributes"/>
		<xs:attributeGroup ref="RepeatEveryPageAttributes"/>
		<xs:attribute name="showTooltips" type="xs:boolean" default="false"/>
		<xs:attributeGroup ref="NoPageWhenNoDataAttributes"/>
		<xs:attribute name="maxHotspots" type="xs:nonNegativeInteger"/>
		<xs:attributeGroup ref="AppOrientationControlAttributes"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="ChartValueType">
		<xs:annotation>
			<xs:documentation>Indicates whether the values are stacked, absolute or stacked 100%</xs:documentation>
		</xs:annotation>
		<xs:attribute name="valueType" default="absolute">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="absolute"/>
					<xs:enumeration value="stacked"/>
					<xs:enumeration value="stacked100Percent"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="AxisY2">
		<xs:attribute name="axisY2Position" default="dual">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="dual"/>
					<xs:enumeration value="bipolar"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="BaselineAttributes">
		<xs:annotation>
			<xs:documentation>Common Attributes for baselines</xs:documentation>
		</xs:annotation>
		<xs:attribute name="refQuery" type="xs:string" use="required"/>
		<xs:attribute name="showInLegend" type="xs:boolean" default="true"/>
		<xs:attributeGroup ref="LineStyles"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="MeasureAxisAttributes">
		<xs:annotation>
			<xs:documentation>Common Attributes for a measure axis</xs:documentation>
		</xs:annotation>
		<xs:attribute name="min" type="xs:float">
			<xs:annotation>
				<xs:documentation source="doc_att_min_chart"/>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="max" type="xs:float">
			<xs:annotation>
				<xs:documentation source="doc_att_max_chart"/>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="scaleInterval" type="xs:float"/>
		<xs:attribute name="scale" default="linear">
			<xs:annotation>
				<xs:documentation source="doc_att_scale_chart"/>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="linear"/>
					<xs:enumeration value="log"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="sameRangeAllInstances" type="xs:boolean" default="true"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="VisualEffects">
		<xs:annotation>
			<xs:documentation>Visual affects for controlling the 2.5D look of some charts.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="depth" type="xs:nonNegativeInteger" default="0"/>
		<xs:attribute name="visualAngle" type="xs:nonNegativeInteger" default="45"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="SpiderEffects">
		<xs:annotation>
			<xs:documentation>Indicates whether or not to use spider effects.  For polar type charts, indicates whether the arcs are cut or not.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="useSpiderEffects" type="xs:boolean" default="false"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="DataPointShape">
		<xs:attribute name="dataPointShape" default="plainX">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="circle"/>
					<xs:enumeration value="square"/>
					<xs:enumeration value="house"/>
					<xs:enumeration value="hexagon"/>
					<xs:enumeration value="pentagon"/>
					<xs:enumeration value="diamond"/>
					<xs:enumeration value="triangle"/>
					<xs:enumeration value="downTriangle"/>
					<xs:enumeration value="rightTriangle"/>
					<xs:enumeration value="leftTriangle"/>
					<xs:enumeration value="skewLeftTriangle"/>
					<xs:enumeration value="skewRightTriangle"/>
					<xs:enumeration value="downSkewLeftTriangle"/>
					<xs:enumeration value="downSkewRightTriangle"/>
					<xs:enumeration value="verticalLine"/>
					<xs:enumeration value="horizontalLine"/>
					<xs:enumeration value="plus"/>
					<xs:enumeration value="fatPlus"/>
					<xs:enumeration value="star90"/>
					<xs:enumeration value="pentagram"/>
					<xs:enumeration value="star"/>
					<xs:enumeration value="skewedStar"/>
					<xs:enumeration value="plainX"/>
					<xs:enumeration value="softX"/>
					<xs:enumeration value="fatX"/>
					<xs:enumeration value="spikedX"/>
					<xs:enumeration value="castle"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="DataPointAttributes">
		<xs:annotation>
			<xs:documentation>Common set of attributes for data points.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="dataPointSize" default="0">
			<xs:simpleType>
				<xs:restriction base="xs:decimal">
					<xs:maxInclusive value="10000"/>
					<xs:minInclusive value="0"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attributeGroup ref="DataPointShape"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="LineStyles">
		<xs:annotation>
			<xs:documentation>Common definition of a line style</xs:documentation>
		</xs:annotation>
		<xs:attributeGroup ref="LineStylesNoColor"/>
		<xs:attribute name="color" type="ColorType" default="black"/>
		<xs:attribute name="transparency" default="0">
			<xs:simpleType>
				<xs:restriction base="xs:decimal">
					<xs:minInclusive value="0"/>
					<xs:maxInclusive value="100"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="LineStylesNoColor">
		<xs:annotation>
			<xs:documentation>Common definition of a line style</xs:documentation>
		</xs:annotation>
		<xs:attributeGroup ref="LineStyleAttribute"/>
		<xs:attribute name="weight" default="0">
			<xs:simpleType>
				<xs:restriction base="xs:decimal">
					<xs:minInclusive value="0"/>
					<xs:maxInclusive value="99"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="viewingAngle">
		<xs:annotation>
			<xs:documentation>Defines the set of enumerations for a viewing angle.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="threeDViewingAngle" default="standard">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="standard"/>
					<xs:enumeration value="thickStandard"/>
					<xs:enumeration value="lowThin"/>
					<xs:enumeration value="near1x3"/>
					<xs:enumeration value="tallFar"/>
					<xs:enumeration value="groupView"/>
					<xs:enumeration value="nearView"/>
					<xs:enumeration value="seriesView"/>
					<xs:enumeration value="groupStretch"/>
					<xs:enumeration value="seriesStretch"/>
					<xs:enumeration value="birdsEye"/>
					<xs:enumeration value="lowHigh"/>
					<xs:enumeration value="lowLow"/>
					<xs:enumeration value="tallDistortion"/>
					<xs:enumeration value="lowDistort"/>
					<xs:enumeration value="isometric"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="LineAttributes">
		<xs:annotation>
			<xs:documentation>Attributes common to line graphs.</xs:documentation>
		</xs:annotation>
		<xs:attributeGroup ref="LineStyles"/>
		<xs:attributeGroup ref="DataPointAttributes"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="LineAttributesNoColor">
		<xs:annotation>
			<xs:documentation>Attributes common to line graphs.</xs:documentation>
		</xs:annotation>
		<xs:attributeGroup ref="LineStylesNoColor"/>
		<xs:attributeGroup ref="DataPointAttributes"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="MatchSeriesColor">
		<xs:annotation>
			<xs:documentation>Used in combination charts</xs:documentation>
		</xs:annotation>
		<xs:attribute name="matchSeriesColor" type="xs:boolean" default="false"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="UseNumericalAxis">
		<xs:annotation>
			<xs:documentation>Which axis does this thing point to.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="useNumericalAxis" default="numericalAxisY1">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="numericalAxisY1"/>
					<xs:enumeration value="numericalAxisY2"/>
					<xs:enumeration value="xAxis"/>
					<xs:enumeration value="yAxis"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="DisplayDataLocation">
		<xs:annotation>
			<xs:documentation>Attribute to show data values</xs:documentation>
		</xs:annotation>
		<xs:attribute name="displayDataLocation" default="centered">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="insideAtTop"/>
					<xs:enumeration value="outsideAtTop"/>
					<xs:enumeration value="insideAtBottom"/>
					<xs:enumeration value="outsideAtBottom"/>
					<xs:enumeration value="centered"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="v2_displayDataLocation">
		<xs:annotation>
			<xs:documentation>Attribute to show data values</xs:documentation>
		</xs:annotation>
		<xs:attribute name="displayDataLocation" default="outsideAtTop">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="insideAtTop"/>
					<xs:enumeration value="outsideAtTop"/>
					<xs:enumeration value="insideAtBottom"/>
					<xs:enumeration value="outsideAtBottom"/>
					<xs:enumeration value="centered"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="CategoryTrunction">
		<xs:annotation>
			<xs:documentation>Attributes to control the truncation of categoyr items.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="categoryitemMaxCharacters" type="xs:positiveInteger" default="48"/>
		<xs:attribute name="categoryitemEnableTruncation" type="xs:boolean" default="true"/>
		<xs:attribute name="truncationText" type="xs:string" default="..."/>
	</xs:attributeGroup>
	<xs:attributeGroup name="ShowValuesAsPercent">
		<xs:annotation>
			<xs:documentation>Attribute to indicate that display values should be shown as percentages.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="showValuesAsPercent" type="xs:boolean" default="false"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="ShowAbsoluteValues">
		<xs:annotation>
			<xs:documentation>Attribute to indicate that display values are absolute values and not the cumulative values.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="showAbsoluteValues" type="xs:boolean" default="true"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="PointChartDataShape">
		<xs:annotation>
			<xs:documentation>Attribute for point charts that has two extra enumeration values in it.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="pointChartDataPointShape" default="series">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="series"/>
					<xs:enumeration value="category"/>
					<xs:enumeration value="circle"/>
					<xs:enumeration value="square"/>
					<xs:enumeration value="house"/>
					<xs:enumeration value="hexagon"/>
					<xs:enumeration value="pentagon"/>
					<xs:enumeration value="diamond"/>
					<xs:enumeration value="triangle"/>
					<xs:enumeration value="downTriangle"/>
					<xs:enumeration value="rightTriangle"/>
					<xs:enumeration value="leftTriangle"/>
					<xs:enumeration value="skewLeftTriangle"/>
					<xs:enumeration value="skewRightTriangle"/>
					<xs:enumeration value="downSkewLeftTriangle"/>
					<xs:enumeration value="downSkewRightTriangle"/>
					<xs:enumeration value="verticalLine"/>
					<xs:enumeration value="horizontalLine"/>
					<xs:enumeration value="plus"/>
					<xs:enumeration value="fatPlus"/>
					<xs:enumeration value="star90"/>
					<xs:enumeration value="pentagram"/>
					<xs:enumeration value="star"/>
					<xs:enumeration value="skewedStar"/>
					<xs:enumeration value="plainX"/>
					<xs:enumeration value="softX"/>
					<xs:enumeration value="fatX"/>
					<xs:enumeration value="spikedX"/>
					<xs:enumeration value="castle"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="PointChartDataShapeForLineAndRadar">
		<xs:annotation>
			<xs:documentation>Attribute for point charts that has two extra enumeration values in it.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="pointChartDataPointShape" default="series">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="series"/>
					<xs:enumeration value="circle"/>
					<xs:enumeration value="square"/>
					<xs:enumeration value="house"/>
					<xs:enumeration value="hexagon"/>
					<xs:enumeration value="pentagon"/>
					<xs:enumeration value="diamond"/>
					<xs:enumeration value="triangle"/>
					<xs:enumeration value="downTriangle"/>
					<xs:enumeration value="rightTriangle"/>
					<xs:enumeration value="leftTriangle"/>
					<xs:enumeration value="skewLeftTriangle"/>
					<xs:enumeration value="skewRightTriangle"/>
					<xs:enumeration value="downSkewLeftTriangle"/>
					<xs:enumeration value="downSkewRightTriangle"/>
					<xs:enumeration value="verticalLine"/>
					<xs:enumeration value="horizontalLine"/>
					<xs:enumeration value="plus"/>
					<xs:enumeration value="fatPlus"/>
					<xs:enumeration value="star90"/>
					<xs:enumeration value="pentagram"/>
					<xs:enumeration value="star"/>
					<xs:enumeration value="skewedStar"/>
					<xs:enumeration value="plainX"/>
					<xs:enumeration value="softX"/>
					<xs:enumeration value="fatX"/>
					<xs:enumeration value="spikedX"/>
					<xs:enumeration value="castle"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="PointChartDataPointAttributes">
		<xs:annotation>
			<xs:documentation>Attributes for point charts that.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="dataPointSize" default="6">
			<xs:simpleType>
				<xs:restriction base="xs:decimal">
					<xs:maxInclusive value="10000"/>
					<xs:minInclusive value="0"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attributeGroup ref="PointChartDataShape"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="PointChartDataPointAttributesForLineAndRadar">
		<xs:annotation>
			<xs:documentation>Attributes for point charts that.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="dataPointSize" default="6">
			<xs:simpleType>
				<xs:restriction base="xs:decimal">
					<xs:maxInclusive value="10000"/>
					<xs:minInclusive value="0"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attributeGroup ref="PointChartDataShapeForLineAndRadar"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="BorderProperties">
		<xs:annotation>
			<xs:documentation>Attributes to define borders on pie slices, bars, etc...</xs:documentation>
		</xs:annotation>
		<xs:attribute name="showBorders" type="xs:boolean" default="false"/>
		<xs:attribute name="borderColor" type="ColorType" default="black"/>
		<xs:attribute name="borderTransparency" default="0">
			<xs:simpleType>
				<xs:restriction base="xs:decimal">
					<xs:minInclusive value="0"/>
					<xs:maxInclusive value="100"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="MapLayerProperties">
		<xs:annotation>
			<xs:documentation>Properties common to all map layers.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="refLayer" type="xs:string" use="required"/>
		<xs:attributeGroup ref="BorderProperties"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="ShowValuesBoolean">
		<xs:annotation>
			<xs:documentation>Attribute to control the display of values</xs:documentation>
		</xs:annotation>
		<xs:attribute name="showValues" type="xs:boolean" default="false"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="ShowValuesAndLocation">
		<xs:annotation>
			<xs:documentation>Attributes to show location and presence of display values.</xs:documentation>
		</xs:annotation>
		<xs:attributeGroup ref="ShowValuesBoolean"/>
		<xs:attributeGroup ref="DisplayDataLocation"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="ShowLabelsBoolean">
		<xs:attribute name="showLabels" type="xs:boolean" default="false"/>
		<xs:attribute name="hideOverlappingLabels" type="xs:boolean" default="false"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="MapDataLayerProperties">
		<xs:annotation>
			<xs:documentation>Attributes related to data driven map layers.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="showNoDataFeatures" type="xs:boolean" default="true">
			<xs:annotation>
				<xs:documentation>Indicates whether or not features that do not have corresponding data are rendered.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="showDataRangeInLegend" type="xs:boolean" default="true">
			<xs:annotation>
				<xs:documentation>Ensures that the full range of data is included in the legend.  If set to false, only the values from the palette will be shown.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="LineStyleAttribute">
		<xs:annotation>
			<xs:documentation>Attribute that is a shared definition of a line style.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="lineStyle" default="solid">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="solid"/>
					<xs:enumeration value="dash"/>
					<xs:enumeration value="dot"/>
					<xs:enumeration value="dotdash"/>
					<xs:enumeration value="dashdotdot"/>
					<xs:enumeration value="mediumdash"/>
					<xs:enumeration value="shortdash"/>
					<xs:enumeration value="longdash"/>
					<xs:enumeration value="longdot"/>
					<xs:enumeration value="dotdotdot"/>
					<xs:enumeration value="dashdashdot"/>
					<xs:enumeration value="dashdashdotdot"/>
					<xs:enumeration value="longdashdot"/>
					<xs:enumeration value="longdashdotdot"/>
					<xs:enumeration value="longdashdashdot"/>
					<xs:enumeration value="longdashdashdotdot"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="ShowPointValues">
		<xs:attribute name="showPointValues" default="none">
			<xs:annotation>
				<xs:documentation>Shows the measure values/labels for the points in the charts.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="none"/>
					<xs:enumeration value="valuesAndLabels"/>
					<xs:enumeration value="valuesOnly"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="showPointValuesForPoints" default="none">
			<xs:annotation>
				<xs:documentation>Shows the point (legend) values/labels for the points in the charts.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="none"/>
					<xs:enumeration value="valuesAndLabels">
						<xs:annotation>
							<xs:documentation source="doc_enum_valuesAndLabels_showPointValuesForPoints"/>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="valuesOnly">
						<xs:annotation>
							<xs:documentation source="doc_enum_valuesOnly_showPointValuesForPoints"/>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="showPointValuesForPointClusters" default="none">
			<xs:annotation>
				<xs:documentation>Shows the point cluster (category) values/labels for the points in the charts.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="none"/>
					<xs:enumeration value="valuesAndLabels">
						<xs:annotation>
							<xs:documentation source="doc_enum_valuesAndLabels_showPointValuesForPointClusters"/>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="valuesOnly">
						<xs:annotation>
							<xs:documentation source="doc_enum_valuesOnly_showPointValuesForPointClusters"/>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="ShowBubblePointValues">
		<xs:attribute name="showBubblePointValues" default="none">
			<xs:annotation>
				<xs:documentation>Shows the measure values/labels for the points in the charts.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="none"/>
					<xs:enumeration value="valuesAndLabels">
						<xs:annotation>
							<xs:documentation source="doc_enum_valuesAndLabels_showBubblePointValues"/>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="valuesOnly"/>
					<xs:enumeration value="sizeValueAndLabel"/>
					<xs:enumeration value="sizeValueOnly"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="showPointValuesForPoints" default="none">
			<xs:annotation>
				<xs:documentation>Shows the point (legend) values/labels for the points in the charts.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="none"/>
					<xs:enumeration value="valuesAndLabels">
						<xs:annotation>
							<xs:documentation source="doc_enum_valuesAndLabels_showPointValuesForPoints"/>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="valuesOnly">
						<xs:annotation>
							<xs:documentation source="doc_enum_valuesOnly_showPointValuesForPoints"/>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="showPointValuesForPointClusters" default="none">
			<xs:annotation>
				<xs:documentation>Shows the point cluster (category) values/labels for the points in the charts.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="none"/>
					<xs:enumeration value="valuesAndLabels">
						<xs:annotation>
							<xs:documentation source="doc_enum_valuesAndLabels_showPointValuesForPointClusters"/>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="valuesOnly">
						<xs:annotation>
							<xs:documentation source="doc_enum_valuesOnly_showPointValuesForPointClusters"/>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="ShowMapValuesAndLabels">
		<xs:attribute name="showValues" type="xs:boolean" default="false"/>
		<xs:attribute name="showLabels" type="xs:boolean" default="true"/>
		<xs:attribute name="hideOverlappingLabels" type="xs:boolean" default="false"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="BaselineAttributes2">
		<xs:annotation>
			<xs:documentation>Attributes common to baselines.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="lineThickness" type="CSSLength" default="1px"/>
		<xs:attribute name="lineStyle" type="LineStyleType2" default="solid"/>
		<xs:attribute name="lineColor" type="ColorType" default="black"/>
		<xs:attribute name="lineTransparency" type="TransparencyType2" default="0"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="RotatedLabels">
		<xs:annotation>
			<xs:documentation>Attribute to control whether or not labels are rotated with the chart.  This may help make labels easier to read on rotated charts.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="rotateLabelsWithChart" type="xs:boolean" default="false"/>
	</xs:attributeGroup>
	<xs:annotation>
		<xs:documentation>-</xs:documentation>
	</xs:annotation>
	<xs:annotation>
		<xs:documentation>===================================== Chart Types ==================================================</xs:documentation>
	</xs:annotation>
	<xs:element name="v2_pieChart">
		<xs:annotation>
			<xs:documentation>Pie Chart.  Repeating pies will not be directly supported.  Instead use the matrix chart to have pies repeat.  The exploded value is a percentage.  Excel allows percentages up to 400. </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element name="v2_pieSlices" minOccurs="0">
					<xs:annotation>
						<xs:documentation>How do we handle the leader lines on this chart for any chart values?  Still have not addressed the positiong of chart values.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="chartNodes" minOccurs="0"/>
							<xs:element name="v2_pieDataLabels" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Data labels shown in a pie chart.  These labels only have preset locations.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:attribute name="pieLabelStyle" default="radial">
										<xs:simpleType>
											<xs:restriction base="xs:NMTOKEN">
												<xs:enumeration value="radial"/>
												<xs:enumeration value="stack"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
									<xs:attribute name="pieLabels" default="hide">
										<xs:simpleType>
											<xs:restriction base="xs:NMTOKEN">
												<xs:enumeration value="hide">
													<xs:annotation>
														<xs:documentation source="doc_enum_pieLabels_hide"/>
													</xs:annotation>
												</xs:enumeration>
												<xs:enumeration value="show">
													<xs:annotation>
														<xs:documentation source="doc_enum_pieLabels_show"/>
													</xs:annotation>
												</xs:enumeration>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
									<xs:attribute name="pieValues" default="hide">
										<xs:simpleType>
											<xs:restriction base="xs:NMTOKEN">
												<xs:enumeration value="hide">
													<xs:annotation>
														<xs:documentation source="doc_enum_pieValues_hide"/>
													</xs:annotation>
												</xs:enumeration>
												<xs:enumeration value="absolute">
													<xs:annotation>
														<xs:documentation source="doc_enum_pieValues_absolute"/>
													</xs:annotation>
												</xs:enumeration>
												<xs:enumeration value="percentage">
													<xs:annotation>
														<xs:documentation source="doc_enum_pieValues_percentage"/>
													</xs:annotation>
												</xs:enumeration>
												<xs:enumeration value="both"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
									<xs:attribute name="pieLabelCollisionMode" default="none">
										<xs:simpleType>
											<xs:restriction base="xs:NMTOKEN">
												<xs:enumeration value="none">
													<xs:annotation>
														<xs:documentation source="doc_enum_pieLabelCollisionMode_none"/>
													</xs:annotation>
												</xs:enumeration>
												<xs:enumeration value="normal">
													<xs:annotation>
														<xs:documentation source="doc_enum_labelCollisionMode_normal"/>
													</xs:annotation>
												</xs:enumeration>
												<xs:enumeration value="coarse_stagger"/>
												<xs:enumeration value="fine_stagger"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
									<xs:attribute name="pieLabelLeaders" default="show">
										<xs:simpleType>
											<xs:restriction base="xs:NMTOKEN">
												<xs:enumeration value="show">
													<xs:annotation>
														<xs:documentation source="doc_enum_leaderLines_show"/>
													</xs:annotation>
												</xs:enumeration>
												<xs:enumeration value="hide">
													<xs:annotation>
														<xs:documentation source="doc_enum_pieLabelLeaders_hide"/>
													</xs:annotation>
												</xs:enumeration>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
								</xs:complexType>
							</xs:element>
							<xs:element ref="v2_conditionalSolidPalette" minOccurs="0"/>
							<xs:element name="v2_explodedSlices" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Individual pies can be exploded.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:sequence>
										<xs:element name="v2_explodedSlice" maxOccurs="unbounded">
											<xs:annotation>
												<xs:documentation>An exploded pie slice.  The exploded value is a percentage.  The slice to explode is either identified by report expression or index.  This value overrides the global pie explosion value that is set on the chart.</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:choice>
													<xs:element ref="v2_ordinalIndex"/>
													<xs:element name="v2_calculatedSlice">
														<xs:annotation>
															<xs:documentation>Use a report expression to determine which slice to explode.</xs:documentation>
														</xs:annotation>
														<xs:complexType>
															<xs:all>
																<xs:element ref="reportExpression"/>
															</xs:all>
														</xs:complexType>
													</xs:element>
												</xs:choice>
												<xs:attribute name="explosionValue" default="0">
													<xs:simpleType>
														<xs:restriction base="xs:nonNegativeInteger">
															<xs:minInclusive value="0"/>
															<xs:maxInclusive value="100"/>
														</xs:restriction>
													</xs:simpleType>
												</xs:attribute>
											</xs:complexType>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
							<xs:element ref="v2_solidPalette" minOccurs="0"/>
							<xs:element ref="v2_maxItems" minOccurs="0"/>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
						</xs:all>
						<xs:attributeGroup ref="MaterialEffects"/>
						<xs:attributeGroup ref="BorderDefinition2"/>
						<xs:attribute name="sliceDirection" default="clockwise">
							<xs:simpleType>
								<xs:restriction base="xs:NMTOKEN">
									<xs:enumeration value="clockwise"/>
									<xs:enumeration value="counterclockwise"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element ref="v2_axisTitle" minOccurs="0"/>
				<xs:element ref="v2_legend" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines the legend.  STYLE:  The legend will support font, color, background color, background image, generated background and padding.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="v2_defaultChartMeasure" minOccurs="0"/>
				<xs:element ref="v2_chartTitle" minOccurs="0"/>
				<xs:element ref="v2_chartSubTitle" minOccurs="0"/>
				<xs:element ref="v2_chartFooter" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="v2_chartBody" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Used to style the chart body or plot area.  In CGS lingo, this is the chart.  STYLE:  Only the following styles are allowed on the chartBody: background color, background image, generated background.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="v2_notes" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="v2_dropShadow" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="v2_matrix" minOccurs="0"/>
				<xs:element ref="v2_category" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element name="v2_pieTooltips" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Indicates whether tooltips should be rendered and what type of values to dipslay</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="pieTooltipValueType" default="absolute">
							<xs:simpleType>
								<xs:restriction base="xs:NMTOKEN">
									<xs:enumeration value="absolute">
										<xs:annotation>
											<xs:documentation source="doc_enum_tooltipValueType_absolute"/>
										</xs:annotation>
									</xs:enumeration>
									<xs:enumeration value="percentage"/>
									<xs:enumeration value="both"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
				<xs:element ref="v2_chartTextStyle" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="CommonChartAttributes2"/>
			<xs:attribute name="holeSize" type="xs:nonNegativeInteger" default="0"/>
			<xs:attribute name="sliceStartAngle" default="0">
				<xs:simpleType>
					<xs:restriction base="xs:nonNegativeInteger">
						<xs:minInclusive value="0"/>
						<xs:maxInclusive value="360"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attributeGroup ref="Depth2"/>
			<xs:attributeGroup ref="BevelType2"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_combinationChart">
		<xs:annotation>
			<xs:documentation>Combination Chart.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="v2_commonAxis" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Common axis for all items in the combination chart.  Spacing attributes go here.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="v2_topLeftAxis" type="CombinationNumericAxisType2" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Normally rendered as the top left axis.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="v2_topRightAxis" type="CombinationNumericAxisType2" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Normally rendered as the top right axis.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="v2_bottomLeftAxis" type="CombinationNumericAxisType2" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Normally rendered as the top left axis.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="v2_bottomRightAxis" type="CombinationNumericAxisType2" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Normally rendered as the top right axis.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="v2_legend" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines the legend.  STYLE:  The legend will support font, color, background color, background image, generated background and padding.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="v2_defaultChartMeasure" minOccurs="0"/>
				<xs:element ref="v2_chartTitle" minOccurs="0"/>
				<xs:element ref="v2_chartSubTitle" minOccurs="0"/>
				<xs:element ref="v2_chartFooter" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="v2_chartBody" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Used to style the chart body or plot area.  In CGS lingo, this is the chart.  STYLE:  Only the following styles are allowed on the chartBody: background color, background image, generated background.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="v2_notes" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="v2_dropShadow" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="v2_matrix" minOccurs="0"/>
				<xs:element ref="v2_combinationTypeTooltips" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Tooltips are defined for the entire chart.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="v2_plotArea" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
				<xs:element ref="v2_chartTextStyle" minOccurs="0"/>
			</xs:all>
			<xs:attribute name="matchSeriesColor" type="xs:boolean" default="false"/>
			<xs:attributeGroup ref="MaterialEffects"/>
			<xs:attributeGroup ref="CommonChartAttributes2"/>
			<xs:attributeGroup ref="OrientationGroup"/>
			<xs:attributeGroup ref="Depth2"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_gaugeChart">
		<xs:annotation>
			<xs:documentation>Gauge Chart.  Repeating gauges will not be directly supported.  Instead use the matrix chart to have gauges repeat.  Again I feel like we are exposing implementation and this should be cleaned up.  Angles on the gauge chart are measures from the horizontal  (3 o'clock) with positive angles going in the counter clockwise direction.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element name="v2_pivot" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Center point for all the needles.  No idea how to specify the height of the pivot, or more correctly, what the value means.  They seem to be percentages.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="pivotColor" type="ColorType" default="black"/>
						<xs:attribute name="pivotBevelStyle" default="round">
							<xs:simpleType>
								<xs:restriction base="xs:NMTOKEN">
									<xs:enumeration value="round"/>
									<xs:enumeration value="flat"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="pivotHeight" default="20">
							<xs:simpleType>
								<xs:restriction base="xs:float">
									<xs:minInclusive value="0"/>
									<xs:maxInclusive value="100"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="pivotRadius" default="10">
							<xs:simpleType>
								<xs:restriction base="xs:float">
									<xs:minInclusive value="0"/>
									<xs:maxInclusive value="100"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="pivotBevelRadius" default="10">
							<xs:simpleType>
								<xs:restriction base="xs:float">
									<xs:minInclusive value="0"/>
									<xs:maxInclusive value="100"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="pivotPaddingNonFullCircle" default="25">
							<xs:simpleType>
								<xs:restriction base="xs:float">
									<xs:minInclusive value="0"/>
									<xs:maxInclusive value="100"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name="v2_dialBorder" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Styling of the border of the dial.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="gaugeBorderHeight" default="10">
							<xs:simpleType>
								<xs:restriction base="xs:float">
									<xs:minInclusive value="0"/>
									<xs:maxInclusive value="100"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="gaugeBorderWidthStyle" default="deep">
							<xs:simpleType>
								<xs:restriction base="xs:NMTOKEN">
									<xs:enumeration value="deep"/>
									<xs:enumeration value="shallow"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="gaugeBorderColor" type="ColorType" default="black"/>
						<xs:attribute name="gaugeBorderBevel" default="round">
							<xs:simpleType>
								<xs:restriction base="xs:NMTOKEN">
									<xs:enumeration value="round"/>
									<xs:enumeration value="flat"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="gaugeBorderRadius" default="50">
							<xs:simpleType>
								<xs:restriction base="xs:float">
									<xs:minInclusive value="0"/>
									<xs:maxInclusive value="100"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name="v2_gaugeAxes" minOccurs="0">
					<xs:annotation>
						<xs:documentation>A gauge can have multiple axes visible on its face.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="v2_gaugeAxis" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>Defines a single axis on the face of the gauge.  It is unlikely that the engine will have such generic support, likely the tickMark and label elements will have to be replaced with something specific to this chart (yuck).</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element ref="v2_axisRange"/>
										<xs:element name="v2_gaugeAxisLine" minOccurs="0">
											<xs:complexType>
												<xs:attributeGroup ref="LineStyleAndColorAttributes2"/>
											</xs:complexType>
										</xs:element>
										<xs:element ref="v2_axisTitle" minOccurs="0"/>
										<xs:element ref="v2_axisColors" minOccurs="0"/>
										<xs:element ref="v2_axisLabels" minOccurs="0"/>
										<xs:element name="v2_gaugeNeedle" minOccurs="0">
											<xs:annotation>
												<xs:documentation>Each row resulting in the chart nodes will be a needle.  So, it chart nodes represents countries, this needle definition will be replicated for each country.</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:all>
													<xs:element ref="v2_solidPalette" minOccurs="0"/>
													<xs:element ref="v2_conditionalSolidPalette" minOccurs="0"/>
													<xs:element ref="chartNodes" minOccurs="0"/>
													<xs:element ref="XMLAttributes" minOccurs="0"/>
												</xs:all>
												<xs:attribute name="needleHeight" default="40">
													<xs:simpleType>
														<xs:restriction base="xs:float">
															<xs:minInclusive value="0"/>
															<xs:maxInclusive value="100"/>
														</xs:restriction>
													</xs:simpleType>
												</xs:attribute>
												<xs:attribute name="needleHeadLength" default="90">
													<xs:simpleType>
														<xs:restriction base="xs:float">
															<xs:minInclusive value="0"/>
															<xs:maxInclusive value="100"/>
														</xs:restriction>
													</xs:simpleType>
												</xs:attribute>
												<xs:attribute name="needleHeadWidth" default="10">
													<xs:simpleType>
														<xs:restriction base="xs:float">
															<xs:minInclusive value="0"/>
															<xs:maxInclusive value="100"/>
														</xs:restriction>
													</xs:simpleType>
												</xs:attribute>
												<xs:attribute name="needlePivotWidth" default="10">
													<xs:simpleType>
														<xs:restriction base="xs:float">
															<xs:minInclusive value="0"/>
															<xs:maxInclusive value="100"/>
														</xs:restriction>
													</xs:simpleType>
												</xs:attribute>
												<xs:attribute name="needleTailWidth" default="10">
													<xs:simpleType>
														<xs:restriction base="xs:float">
															<xs:minInclusive value="0"/>
															<xs:maxInclusive value="100"/>
														</xs:restriction>
													</xs:simpleType>
												</xs:attribute>
												<xs:attribute name="needleTailLength" default="20">
													<xs:simpleType>
														<xs:restriction base="xs:float">
															<xs:minInclusive value="0"/>
															<xs:maxInclusive value="100"/>
														</xs:restriction>
													</xs:simpleType>
												</xs:attribute>
												<xs:attribute name="needleHeadStyle" default="round">
													<xs:simpleType>
														<xs:restriction base="xs:NMTOKEN">
															<xs:enumeration value="round"/>
															<xs:enumeration value="flat"/>
															<xs:enumeration value="triangular"/>
														</xs:restriction>
													</xs:simpleType>
												</xs:attribute>
												<xs:attribute name="needleTailStyle" default="round">
													<xs:simpleType>
														<xs:restriction base="xs:NMTOKEN">
															<xs:enumeration value="round"/>
															<xs:enumeration value="flat"/>
															<xs:enumeration value="triangular"/>
														</xs:restriction>
													</xs:simpleType>
												</xs:attribute>
												<xs:attribute name="needleBevelRadius" default="100">
													<xs:simpleType>
														<xs:restriction base="xs:float">
															<xs:minInclusive value="0"/>
															<xs:maxInclusive value="100"/>
														</xs:restriction>
													</xs:simpleType>
												</xs:attribute>
												<xs:attribute name="needleBevelStyle" default="round">
													<xs:simpleType>
														<xs:restriction base="xs:NMTOKEN">
															<xs:enumeration value="round"/>
															<xs:enumeration value="flat"/>
														</xs:restriction>
													</xs:simpleType>
												</xs:attribute>
											</xs:complexType>
										</xs:element>
										<xs:element name="v2_gaugeAxisMajorGridlines" minOccurs="0">
											<xs:annotation>
												<xs:documentation>Major gridlines on a gauge chart axis.</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:attribute name="gridlineLength" type="CSSLength" default="5pt"/>
												<xs:attribute name="gridlineStyle" type="LineStyleType2" default="solid"/>
												<xs:attribute name="gridlineWeight" type="CSSLength" default="1px"/>
												<xs:attribute name="gridlineColor" type="ColorType" default="black"/>
											</xs:complexType>
										</xs:element>
										<xs:element name="v2_gaugeAxisMinorGridlines" minOccurs="0">
											<xs:annotation>
												<xs:documentation>Major gridlines on a gauge chart axis.</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:attribute name="gridlineLength" type="CSSLength" default="5pt"/>
												<xs:attribute name="gridlineStyle" type="LineStyleType2" default="solid"/>
												<xs:attribute name="gridlineWeight" type="CSSLength" default="1px"/>
												<xs:attribute name="gridlineColor" type="ColorType" default="black"/>
											</xs:complexType>
										</xs:element>
										<xs:element ref="XMLAttributes" minOccurs="0"/>
									</xs:all>
									<xs:attribute name="numberOfMinorIntervals" default="2">
										<xs:simpleType>
											<xs:restriction base="xs:nonNegativeInteger">
												<xs:minInclusive value="2"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
									<xs:attribute name="gaugeAxisStartAngle" default="10">
										<xs:simpleType>
											<xs:restriction base="xs:float">
												<xs:minInclusive value="0"/>
												<xs:maxInclusive value="360"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
									<xs:attribute name="gaugeAxisEndAngle" default="360">
										<xs:simpleType>
											<xs:restriction base="xs:float">
												<xs:minInclusive value="0"/>
												<xs:maxInclusive value="360"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
									<xs:attribute name="gaugeAxisDirection" default="clockwise">
										<xs:simpleType>
											<xs:restriction base="xs:NMTOKEN">
												<xs:enumeration value="clockwise"/>
												<xs:enumeration value="counterclockwise"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
									<xs:attribute name="gaugeAxisJustification" default="inside">
										<xs:simpleType>
											<xs:restriction base="xs:NMTOKEN">
												<xs:enumeration value="inside"/>
												<xs:enumeration value="outside"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
									<xs:attribute name="gaugeAxisInnerRadius" default="75">
										<xs:simpleType>
											<xs:restriction base="xs:float">
												<xs:minInclusive value="0"/>
												<xs:maxInclusive value="100"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
									<xs:attribute name="gaugeAxisOuterRadius" default="95">
										<xs:simpleType>
											<xs:restriction base="xs:float">
												<xs:minInclusive value="0"/>
												<xs:maxInclusive value="100"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
									<xs:attribute name="gaugeAxisTextOrientation" default="upright">
										<xs:simpleType>
											<xs:restriction base="xs:NMTOKEN">
												<xs:enumeration value="perpendicularInward"/>
												<xs:enumeration value="perpendicularOutward"/>
												<xs:enumeration value="upright"/>
												<xs:enumeration value="tangentialClockwise"/>
												<xs:enumeration value="tangentialCounterClockwise"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element ref="v2_legend" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines the legend.  STYLE:  The legend will support font, color, background color, background image, generated background and padding.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="v2_defaultChartMeasure" minOccurs="0"/>
				<xs:element ref="v2_chartTitle" minOccurs="0"/>
				<xs:element ref="v2_chartSubTitle" minOccurs="0"/>
				<xs:element ref="v2_chartFooter" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="v2_chartBody" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Used to style the chart body or plot area.  In CGS lingo, this is the chart.  STYLE:  Only the following styles are allowed on the chartBody: background color, background image, generated background.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="v2_notes" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="v2_dropShadow" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element name="v2_dialFace" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Instead of sectors, we have just a face color.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="v2_fillEffect"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element ref="v2_matrix" minOccurs="0"/>
				<xs:element ref="v2_category" minOccurs="0"/>
				<xs:element ref="v2_basicTooltips" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
				<xs:element ref="v2_chartTextStyle" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="CommonChartAttributes2"/>
			<xs:attribute name="gaugeStartAngle" default="0">
				<xs:simpleType>
					<xs:restriction base="xs:float">
						<xs:minInclusive value="0"/>
						<xs:maxInclusive value="360"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="gaugeEndAngle" default="360">
				<xs:simpleType>
					<xs:restriction base="xs:float">
						<xs:minInclusive value="0"/>
						<xs:maxInclusive value="360"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_scatterChart">
		<xs:annotation>
			<xs:documentation>Scatter Chart.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="v2_xAxis"/>
				<xs:element ref="v2_yAxis"/>
				<xs:element name="v2_scatterDataLabels" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Element to control display of scatter chart properties.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
						</xs:all>
						<xs:attribute name="labelCollisionMode" default="none">
							<xs:simpleType>
								<xs:restriction base="xs:NMTOKEN">
									<xs:enumeration value="none">
										<xs:annotation>
											<xs:documentation source="doc_enum_pieLabelCollisionMode_none"/>
										</xs:annotation>
									</xs:enumeration>
									<xs:enumeration value="coarse_stagger"/>
									<xs:enumeration value="fine_stagger"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="leaderLines" default="hide">
							<xs:simpleType>
								<xs:restriction base="xs:NMTOKEN">
									<xs:enumeration value="show">
										<xs:annotation>
											<xs:documentation source="doc_enum_leaderLines_show"/>
										</xs:annotation>
									</xs:enumeration>
									<xs:enumeration value="hide">
										<xs:annotation>
											<xs:documentation source="doc_enum_leaderLines_hide"/>
										</xs:annotation>
									</xs:enumeration>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="categoryValues" default="none">
							<xs:simpleType>
								<xs:restriction base="xs:NMTOKEN">
									<xs:enumeration value="none">
										<xs:annotation>
											<xs:documentation source="doc_enum_categoryValues_none"/>
										</xs:annotation>
									</xs:enumeration>
									<xs:enumeration value="value">
										<xs:annotation>
											<xs:documentation source="doc_enum_categoryValues_value"/>
										</xs:annotation>
									</xs:enumeration>
									<xs:enumeration value="valueAndLabel">
										<xs:annotation>
											<xs:documentation source="doc_enum_categoryValues_valueAndLabel"/>
										</xs:annotation>
									</xs:enumeration>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="seriesValues" default="none">
							<xs:simpleType>
								<xs:restriction base="xs:NMTOKEN">
									<xs:enumeration value="none">
										<xs:annotation>
											<xs:documentation source="doc_enum_seriesValues_none"/>
										</xs:annotation>
									</xs:enumeration>
									<xs:enumeration value="value">
										<xs:annotation>
											<xs:documentation source="doc_enum_seriesValues_value"/>
										</xs:annotation>
									</xs:enumeration>
									<xs:enumeration value="valueAndLabel">
										<xs:annotation>
											<xs:documentation source="doc_enum_seriesValues_valueAndLabel"/>
										</xs:annotation>
									</xs:enumeration>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="measureValues" default="value">
							<xs:simpleType>
								<xs:restriction base="xs:NMTOKEN">
									<xs:enumeration value="none"/>
									<xs:enumeration value="value"/>
									<xs:enumeration value="valueAndLabel"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attributeGroup ref="v2_displayDataLocation"/>
					</xs:complexType>
				</xs:element>
				<xs:element ref="v2_category" minOccurs="0"/>
				<xs:element ref="v2_series" minOccurs="0"/>
				<xs:element ref="v2_trendLines" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="v2_legend" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines the legend.  STYLE:  The legend will support font, color, background color, background image, generated background and padding.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="v2_defaultChartMeasure" minOccurs="0"/>
				<xs:element ref="v2_chartTitle" minOccurs="0"/>
				<xs:element ref="v2_chartSubTitle" minOccurs="0"/>
				<xs:element ref="v2_chartFooter" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="v2_chartBody" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Used to style the chart body or plot area.  In CGS lingo, this is the chart.  STYLE:  Only the following styles are allowed on the chartBody: background color, background image, generated background.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="v2_notes" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="v2_dropShadow" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="v2_scatterMarkers" minOccurs="0"/>
				<xs:element ref="v2_pointPalette" minOccurs="0"/>
				<xs:element ref="v2_conditionalPointPalette" minOccurs="0"/>
				<xs:element ref="v2_matrix" minOccurs="0"/>
				<xs:element ref="v2_numericColoredRegions" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="v2_basicTooltips" minOccurs="0"/>
				<xs:element ref="v2_plotArea" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
				<xs:element ref="v2_chartTextStyle" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="MaterialEffects"/>
			<xs:attributeGroup ref="CommonChartAttributes2"/>
			<xs:attribute name="changeShapeByCategory" type="xs:boolean" default="true"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_bubbleChart">
		<xs:annotation>
			<xs:documentation>Bubble Chart from.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="v2_xAxis"/>
				<xs:element ref="v2_yAxis"/>
				<xs:element name="v2_bubbleDataLabels" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Element to control display of bubble chart properties.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
						</xs:all>
						<xs:attribute name="labelCollisionMode" default="none">
							<xs:simpleType>
								<xs:restriction base="xs:NMTOKEN">
									<xs:enumeration value="none">
										<xs:annotation>
											<xs:documentation source="doc_enum_pieLabelCollisionMode_none"/>
										</xs:annotation>
									</xs:enumeration>
									<xs:enumeration value="coarse_stagger"/>
									<xs:enumeration value="fine_stagger"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="leaderLines" default="hide">
							<xs:simpleType>
								<xs:restriction base="xs:NMTOKEN">
									<xs:enumeration value="show">
										<xs:annotation>
											<xs:documentation source="doc_enum_leaderLines_show"/>
										</xs:annotation>
									</xs:enumeration>
									<xs:enumeration value="hide">
										<xs:annotation>
											<xs:documentation source="doc_enum_leaderLines_hide"/>
										</xs:annotation>
									</xs:enumeration>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="categoryValues" default="none">
							<xs:simpleType>
								<xs:restriction base="xs:NMTOKEN">
									<xs:enumeration value="none">
										<xs:annotation>
											<xs:documentation source="doc_enum_categoryValues_none"/>
										</xs:annotation>
									</xs:enumeration>
									<xs:enumeration value="value"/>
									<xs:enumeration value="valueAndLabel"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="seriesValues" default="none">
							<xs:simpleType>
								<xs:restriction base="xs:NMTOKEN">
									<xs:enumeration value="none"/>
									<xs:enumeration value="value"/>
									<xs:enumeration value="valueAndLabel"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="bubbleMeasureValues" default="value">
							<xs:simpleType>
								<xs:restriction base="xs:NMTOKEN">
									<xs:enumeration value="none">
										<xs:annotation>
											<xs:documentation source="doc_enum_bubbleMeasureValues_none"/>
										</xs:annotation>
									</xs:enumeration>
									<xs:enumeration value="value"/>
									<xs:enumeration value="valueAndLabel"/>
									<xs:enumeration value="sizeValueOnly">
										<xs:annotation>
											<xs:documentation source="doc_enum_bubbleMeasureValues_sizeValueOnly"/>
										</xs:annotation>
									</xs:enumeration>
									<xs:enumeration value="sizeValueOnlyAndLabel"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attributeGroup ref="v2_displayDataLocation"/>
					</xs:complexType>
				</xs:element>
				<xs:element ref="v2_category" minOccurs="0"/>
				<xs:element ref="v2_series" minOccurs="0"/>
				<xs:element name="v2_bubbleMeasure" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines the measure to be used to size the data points.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:complexContent>
							<xs:extension base="ChartMeasureType2"/>
						</xs:complexContent>
					</xs:complexType>
				</xs:element>
				<xs:element ref="v2_trendLines" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="v2_legend" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines the legend.  STYLE:  The legend will support font, color, background color, background image, generated background and padding.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="v2_defaultChartMeasure" minOccurs="0"/>
				<xs:element ref="v2_chartTitle" minOccurs="0"/>
				<xs:element ref="v2_chartSubTitle" minOccurs="0"/>
				<xs:element ref="v2_chartFooter" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="v2_chartBody" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Used to style the chart body or plot area.  In CGS lingo, this is the chart.  STYLE:  Only the following styles are allowed on the chartBody: background color, background image, generated background.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="v2_notes" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="v2_dropShadow" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="v2_scatterMarkers" minOccurs="0"/>
				<xs:element ref="v2_matrix" minOccurs="0"/>
				<xs:element ref="v2_pointPalette" minOccurs="0"/>
				<xs:element ref="v2_conditionalPointPalette" minOccurs="0"/>
				<xs:element ref="v2_numericColoredRegions" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="v2_basicTooltips" minOccurs="0"/>
				<xs:element name="v2_bubbleSizing">
					<xs:annotation>
						<xs:documentation>Element which controls how to size the bubbles in a bubble chart.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice>
							<xs:element name="v2_bubbleZero">
								<xs:annotation>
									<xs:documentation>Bubbles are sized from zero to max.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:attribute name="includeNegativeValues" type="xs:boolean" default="false"/>
									<xs:attribute name="maxBubbleSize" type="CSSLength" default="20pt"/>
								</xs:complexType>
							</xs:element>
							<xs:element name="v2_bubbleMinMax">
								<xs:annotation>
									<xs:documentation>Bubbles are sized between the min and max values on the elment.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:attribute name="minBubbleSize" type="CSSLength" default="5pt"/>
									<xs:attribute name="maxBubbleSize" type="CSSLength" default="20pt"/>
								</xs:complexType>
							</xs:element>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element ref="v2_plotArea" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
				<xs:element ref="v2_chartTextStyle" minOccurs="0"/>
			</xs:all>
			<xs:attribute name="changeShapeByCategory" type="xs:boolean" default="true"/>
			<xs:attributeGroup ref="CommonChartAttributes2"/>
			<xs:attributeGroup ref="MaterialEffects"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_progressiveChart">
		<xs:annotation>
			<xs:documentation>Progressive Chart.  The progressive chart does not support series.  As such the legend is not particularly useful, but it can still show colors for positive, negative and total bars, for example.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="v2_progressiveAxis" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Category axis for the progressive chart.  Slightly different than the combination chart.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="chartNodes" minOccurs="0"/>
							<xs:element ref="v2_ordinalAxis" minOccurs="0"/>
							<xs:element ref="v2_ordinalBaselines" minOccurs="0"/>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element ref="v2_connectLines" minOccurs="0"/>
				<xs:element ref="v2_numericBaselines" minOccurs="0"/>
				<xs:element ref="v2_markers" minOccurs="0"/>
				<xs:element ref="v2_chartDataLabels" minOccurs="0"/>
				<xs:element ref="v2_numericAxis" minOccurs="0"/>
				<xs:element ref="v2_progressivePalette" minOccurs="0"/>
				<xs:element ref="v2_conditionalSolidPalette" minOccurs="0"/>
				<xs:element name="v2_progressiveTotal" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Presence of this element indicates that the total bar should be rendered.  The text items represent the label for the bar.</xs:documentation>
					</xs:annotation>
					<xs:complexType/>
				</xs:element>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="v2_legend" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines the legend.  STYLE:  The legend will support font, color, background color, background image, generated background and padding.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="v2_defaultChartMeasure" minOccurs="0"/>
				<xs:element ref="v2_chartTitle" minOccurs="0"/>
				<xs:element ref="v2_chartSubTitle" minOccurs="0"/>
				<xs:element ref="v2_chartFooter" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="v2_chartBody" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Used to style the chart body or plot area.  In CGS lingo, this is the chart.  STYLE:  Only the following styles are allowed on the chartBody: background color, background image, generated background.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="v2_notes" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="v2_dropShadow" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="v2_matrix" minOccurs="0"/>
				<xs:element ref="v2_numericOrdinalColoredRegions" minOccurs="0"/>
				<xs:element ref="v2_combinationTypeTooltips" minOccurs="0"/>
				<xs:element ref="v2_series" minOccurs="0"/>
				<xs:element ref="v2_plotArea" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
				<xs:element ref="v2_chartTextStyle" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="OrientationGroup"/>
			<xs:attributeGroup ref="MaterialEffects"/>
			<xs:attributeGroup ref="BevelType2"/>
			<xs:attribute name="setOrdinalWidthScale" default="80">
				<xs:simpleType>
					<xs:restriction base="xs:unsignedInt">
						<xs:minInclusive value="0"/>
						<xs:maxInclusive value="100"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attributeGroup ref="CommonChartAttributes2"/>
			<xs:attributeGroup ref="Depth2"/>
			<xs:attributeGroup ref="BorderDefinition2"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_paretoChart">
		<xs:annotation>
			<xs:documentation>Pareto chart.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="v2_paretoBars" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Bars of a pareto chart.  The chart nodes will become series here.  The bars are plotted against the left axis.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="chartNodes" minOccurs="0"/>
							<xs:element ref="v2_conditionalSolidPalette" minOccurs="0"/>
							<xs:element ref="v2_solidPalette" minOccurs="0"/>
							<xs:element ref="v2_numericBaselines" minOccurs="0"/>
							<xs:element ref="v2_markers" minOccurs="0"/>
							<xs:element ref="v2_axis" minOccurs="0"/>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
							<xs:element ref="v2_numericOrdinalColoredRegions" minOccurs="0"/>
							<xs:element ref="v2_chartDataLabels" minOccurs="0"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element name="v2_paretoLine" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Line in the pareto chart, it represents a cumulation of values.  The line is plotted against the right axis.  There will only ever be a single line, there a complete palette is not required.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="v2_numericBaselines" minOccurs="0"/>
							<xs:element ref="v2_markers" minOccurs="0"/>
							<xs:element ref="v2_numericOrdinalColoredRegions" minOccurs="0"/>
							<xs:element ref="v2_axis" minOccurs="0"/>
							<xs:element name="v2_cumulationLine" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Represents the cumulation line in the pareto chart.  If this element is not present the cumulation line is not drawn.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element name="v2_paretoLineDataLabels" minOccurs="0">
											<xs:annotation>
												<xs:documentation>Data labels for the cumulation line.</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:all>
													<xs:element ref="XMLAttributes" minOccurs="0"/>
												</xs:all>
											</xs:complexType>
										</xs:element>
										<xs:element name="v2_cumulationLabel" minOccurs="0">
											<xs:complexType>
												<xs:all>
													<xs:element ref="v2_chartTextContents"/>
													<xs:element ref="propertyList" minOccurs="0"/>
													<xs:element ref="style" minOccurs="0"/>
													<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
													<xs:element ref="XMLAttributes" minOccurs="0"/>
												</xs:all>
												<xs:attribute name="refQuery" type="xs:string" use="required"/>
											</xs:complexType>
										</xs:element>
									</xs:all>
									<xs:attribute name="markers" default="show">
										<xs:simpleType>
											<xs:restriction base="xs:NMTOKEN">
												<xs:enumeration value="show">
													<xs:annotation>
														<xs:documentation source="doc_enum_markers_show"/>
													</xs:annotation>
												</xs:enumeration>
												<xs:enumeration value="hide">
													<xs:annotation>
														<xs:documentation source="doc_enum_markers_hide"/>
													</xs:annotation>
												</xs:enumeration>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
									<xs:attributeGroup ref="MarkerStyleAttributes2"/>
									<xs:attributeGroup ref="LineStyleAndColorAttributes2"/>
									<xs:attributeGroup ref="MarkerShape2"/>
								</xs:complexType>
							</xs:element>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element ref="v2_commonAxis" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="v2_legend" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines the legend.  STYLE:  The legend will support font, color, background color, background image, generated background and padding.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="v2_defaultChartMeasure" minOccurs="0"/>
				<xs:element ref="v2_chartTitle" minOccurs="0"/>
				<xs:element ref="v2_chartSubTitle" minOccurs="0"/>
				<xs:element ref="v2_chartFooter" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="v2_chartBody" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Used to style the chart body or plot area.  In CGS lingo, this is the chart.  STYLE:  Only the following styles are allowed on the chartBody: background color, background image, generated background.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="v2_combinationTypeTooltips" minOccurs="0"/>
				<xs:element ref="v2_notes" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="v2_dropShadow" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="v2_matrix" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="v2_plotArea" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
				<xs:element ref="v2_chartTextStyle" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="BorderDefinition2"/>
			<xs:attributeGroup ref="BevelType2"/>
			<xs:attributeGroup ref="OrientationGroup"/>
			<xs:attributeGroup ref="MaterialEffects"/>
			<xs:attribute name="setOrdinalWidthScale" default="80">
				<xs:simpleType>
					<xs:restriction base="xs:unsignedInt">
						<xs:minInclusive value="0"/>
						<xs:maxInclusive value="100"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attributeGroup ref="CommonChartAttributes2"/>
			<xs:attributeGroup ref="Depth2"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_bulletChart">
		<xs:annotation>
			<xs:documentation>Bullet Chart Definition</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="v2_defaultChartMeasure" minOccurs="0"/>
				<xs:element name="v2_bulletMeasure" type="BulletChartMeasureType2" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Bullet or actual value for the bullet chart.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="v2_bulletTargetMeasure" type="BulletChartMeasureType2" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Target or expected value.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="v2_bulletIndicator" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Indicator for the bullet.  This can be either a bar or a point. </xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice>
							<xs:element ref="v2_pointPaletteEntry"/>
							<xs:element ref="v2_solidPaletteEntry"/>
						</xs:choice>
						<xs:attribute name="pointIndicatorSize" type="CSSLength" default="5pt"/>
						<xs:attribute name="barIndicatorWidth" default="80">
							<xs:simpleType>
								<xs:restriction base="xs:float">
									<xs:minInclusive value="0"/>
									<xs:maxInclusive value="100"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name="v2_targetIndicator" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Target shown in the bullet chart.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="v2_pointPaletteEntry"/>
						</xs:all>
						<xs:attribute name="pointIndicatorSize" type="CSSLength" default="5pt"/>
					</xs:complexType>
				</xs:element>
				<xs:element ref="v2_numericAxis" minOccurs="0"/>
				<xs:element ref="v2_chartTitle" minOccurs="0"/>
				<xs:element ref="v2_chartSubTitle" minOccurs="0"/>
				<xs:element ref="v2_chartFooter" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="v2_chartBody" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Used to style the chart body or plot area.  In CGS lingo, this is the chart.  STYLE:  Only the following styles are allowed on the chartBody: background color, background image, generated background.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="v2_notes" minOccurs="0"/>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="v2_dropShadow" minOccurs="0"/>
				<xs:element ref="chartSuppress" minOccurs="0"/>
				<xs:element ref="noDataHandler" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element ref="v2_matrix" minOccurs="0"/>
				<xs:element ref="v2_numericOrdinalColoredRegions" minOccurs="0"/>
				<xs:element ref="v2_basicTooltips" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Enables tool tips.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="v2_markers" minOccurs="0"/>
				<xs:element ref="v2_legend" minOccurs="0"/>
				<xs:element ref="v2_category" minOccurs="0"/>
				<xs:element ref="v2_series" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
				<xs:element ref="appDrills" minOccurs="0"/>
				<xs:element ref="appContainerSelect" minOccurs="0"/>
				<xs:element ref="appChartProperties" minOccurs="0"/>
				<xs:element ref="v2_chartTextStyle" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="BevelType2"/>
			<xs:attributeGroup ref="CommonChartAttributes2"/>
			<xs:attributeGroup ref="OrientationGroup"/>
		</xs:complexType>
	</xs:element>
	<xs:annotation>
		<xs:documentation>===================================== Simple Types =================================================</xs:documentation>
	</xs:annotation>
	<xs:simpleType name="TransparencyType2">
		<xs:annotation>
			<xs:documentation>Definition for a transparency attribute</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:unsignedInt">
			<xs:minInclusive value="0"/>
			<xs:maxInclusive value="100"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="LineStyleType2">
		<xs:annotation>
			<xs:documentation>Definition for a line style attribute</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:NMTOKEN">
			<xs:enumeration value="solid"/>
			<xs:enumeration value="dash"/>
			<xs:enumeration value="dot"/>
			<xs:enumeration value="dash_dot"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="BarShape2">
		<xs:annotation>
			<xs:documentation>Shapes for bars</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:NMTOKEN">
			<xs:enumeration value="box"/>
			<xs:enumeration value="cylinder"/>
			<xs:enumeration value="cone"/>
			<xs:enumeration value="pyramid"/>
			<xs:enumeration value="rectangle"/>
			<xs:enumeration value="triangle"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="TickMarkLocation2">
		<xs:annotation>
			<xs:documentation>Controls where tickmarks are drawn</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:NMTOKEN">
			<xs:enumeration value="none">
				<xs:annotation>
					<xs:documentation source="doc_enum_tickMarkLocation_none"/>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="outside">
				<xs:annotation>
					<xs:documentation source="doc_enum_tickMarkLocation_outside"/>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="inside">
				<xs:annotation>
					<xs:documentation source="doc_enum_tickMarkLocation_inside"/>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="cross">
				<xs:annotation>
					<xs:documentation source="doc_enum_tickMarkLocation_cross"/>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:annotation>
		<xs:documentation>===================================== Attribute Groups ===============================================</xs:documentation>
	</xs:annotation>
	<xs:attributeGroup name="SeriesTypeAttributes">
		<xs:attribute name="seriesType" default="clustered">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="clustered"/>
					<xs:enumeration value="stacked"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="PaletteBehaviourAttributes">
		<xs:attribute name="seriesDisplayed" default="filtered">
			<xs:annotation>
				<xs:documentation>Indicates whether the series values will be used after filtering, before filtering or if all the values shared between this chart and the chart that is sharing a series with it.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="filtered">
						<xs:annotation>
							<xs:documentation>Display only the "series" categories in the filtered chart</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="unfiltered">
						<xs:annotation>
							<xs:documentation>Display all possible "series" categories in the unfiltered chart</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="shared">
						<xs:annotation>
							<xs:documentation>Display all possible "series" categories in the unfiltered chart and any additional entries from a shared series.</xs:documentation>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="ComboIndex">
		<xs:attribute name="comboIndex" type="xs:unsignedInt"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="TextTruncationAttributes2">
		<xs:attribute name="autoTruncation" type="xs:boolean" default="true"/>
		<xs:attribute name="truncationText" type="xs:string" default="..."/>
		<xs:attribute name="manualTruncationMaxChars" type="xs:unsignedInt" default="50"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="AutoFontSizing2">
		<xs:attribute name="autoFontSizing" type="xs:boolean" default="false"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="LineStyleAttributes2">
		<xs:annotation>
			<xs:documentation>Common attributes for lines in v2 charts</xs:documentation>
		</xs:annotation>
		<xs:attribute name="lineStyle" type="LineStyleType2" default="solid"/>
		<xs:attribute name="lineWeight" type="CSSLength" default="1px"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="LineStyleAndColorAttributes2">
		<xs:attributeGroup ref="LineStyleAttributes2"/>
		<xs:attribute name="lineColor" type="ColorType" default="black"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="MarkerStyleAttributes2">
		<xs:annotation>
			<xs:documentation>Common attributes for markers in v2 charts.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="markerBorders" default="hide">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="show">
						<xs:annotation>
							<xs:documentation source="doc_enum_markerBorders_show"/>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="hide">
						<xs:annotation>
							<xs:documentation source="doc_enum_markerBorders_hide"/>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="markerBorderColor" type="ColorType" default="black"/>
		<xs:attribute name="markerSize" type="CSSLength" default="10pt"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="MarkerShape2">
		<xs:attribute name="markerShape" default="circle">
			<xs:annotation>
				<xs:documentation>Define a list of shapes for markers and data points.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="circle"/>
					<xs:enumeration value="diamond"/>
					<xs:enumeration value="x"/>
					<xs:enumeration value="square"/>
					<xs:enumeration value="taperedX"/>
					<xs:enumeration value="upperLeftTriangle"/>
					<xs:enumeration value="hexagon"/>
					<xs:enumeration value="horizontalBar"/>
					<xs:enumeration value="upperRightTriangle"/>
					<xs:enumeration value="house"/>
					<xs:enumeration value="star"/>
					<xs:enumeration value="thinX"/>
					<xs:enumeration value="upTriangle"/>
					<xs:enumeration value="verticalBar"/>
					<xs:enumeration value="chalet"/>
					<xs:enumeration value="downTriangle"/>
					<xs:enumeration value="thickCross"/>
					<xs:enumeration value="fivePointStar"/>
					<xs:enumeration value="thickX"/>
					<xs:enumeration value="notchedSquare"/>
					<xs:enumeration value="gunSight"/>
					<xs:enumeration value="leftTriangle"/>
					<xs:enumeration value="rightTriangle"/>
					<xs:enumeration value="ninjaStar"/>
					<xs:enumeration value="lowerLeftTriangle"/>
					<xs:enumeration value="lowerRightTriangle"/>
					<xs:enumeration value="notchedX"/>
					<xs:enumeration value="taperedCross"/>
					<xs:enumeration value="triangle"/>
					<xs:enumeration value="cross2D"/>
					<xs:enumeration value="verticalBar3D"/>
					<xs:enumeration value="gunSight3D"/>
					<xs:enumeration value="diamond3D"/>
					<xs:enumeration value="upperLeftTriangle3D"/>
					<xs:enumeration value="upperRightTriangle3D"/>
					<xs:enumeration value="downTriangle3D"/>
					<xs:enumeration value="leftTriangle3D"/>
					<xs:enumeration value="thinX3D"/>
					<xs:enumeration value="cross3D"/>
					<xs:enumeration value="rightTriangle3D"/>
					<xs:enumeration value="lowerLeftTriangle3D"/>
					<xs:enumeration value="lowerRightTriangle3D"/>
					<xs:enumeration value="box"/>
					<xs:enumeration value="upTriangle3D"/>
					<xs:enumeration value="horizontalBar3D"/>
					<xs:enumeration value="cone"/>
					<xs:enumeration value="dodecahedron"/>
					<xs:enumeration value="icosahedron"/>
					<xs:enumeration value="sphere32"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="CommonChartAttributes2">
		<xs:attribute name="refQuery" type="xs:string" use="required"/>
		<xs:attribute name="maxHotspots" type="xs:nonNegativeInteger"/>
		<xs:attribute name="renderPageWhenEmpty" type="xs:boolean" default="true"/>
		<xs:attribute name="name" type="xs:string"/>
		<xs:attributeGroup ref="RepeatEveryPageAttributes"/>
		<xs:attributeGroup ref="AppOrientationControlAttributes"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="SeriesType2">
		<xs:attribute name="seriesType" default="absolute">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="absolute"/>
					<xs:enumeration value="stacked"/>
					<xs:enumeration value="stacked100Percent"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="LineAreaShape">
		<xs:attribute name="lineAreaShape" default="pointToPoint">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="pointToPoint"/>
					<xs:enumeration value="stepAtPoint"/>
					<xs:enumeration value="stepBetweenPoints"/>
					<xs:enumeration value="smooth"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="OrientationGroup">
		<xs:attribute name="orientation" default="vertical">
			<xs:annotation>
				<xs:documentation source="doc_att_orientation_chart"/>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="vertical"/>
					<xs:enumeration value="horizontal"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="MinorIntervals">
		<xs:attribute name="numberOfMinorIntervals" default="0">
			<xs:simpleType>
				<xs:restriction base="xs:nonNegativeInteger"/>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="AxisAttributes2">
		<xs:attribute name="numberOfMinorIntervals" default="2">
			<xs:simpleType>
				<xs:restriction base="xs:nonNegativeInteger">
					<xs:minInclusive value="2"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="showInMatrix" type="xs:boolean" default="true"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="RegressionLineAttributes">
		<xs:attribute name="showEquation" default="equation">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="equation"/>
					<xs:enumeration value="rSquared"/>
					<xs:enumeration value="both">
						<xs:annotation>
							<xs:documentation source="doc_enum_showEquation_both"/>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="MaterialEffects">
		<xs:attribute name="materialEffects" default="none">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="none">
						<xs:annotation>
							<xs:documentation source="doc_enum_materialEffects_none"/>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="matte"/>
					<xs:enumeration value="metal"/>
					<xs:enumeration value="plastic"/>
					<xs:enumeration value="semigloss"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="Depth2">
		<xs:annotation>
			<xs:documentation>Depth is an arbitary value to define a 2.5 D look.  0 means no depth, 100 means a nice looking depth.  There is no upper limit.</xs:documentation>
		</xs:annotation>
		<xs:attribute name="depth" type="xs:nonNegativeInteger" default="0">
			<xs:annotation>
				<xs:documentation>Depth is an arbitary value to define a 2.5 D look.  0 means no depth, 100 means a nice looking depth.  There is no upper limit.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="BevelType2">
		<xs:annotation>
			<xs:documentation>Attribute to control the bevel of different elements</xs:documentation>
		</xs:annotation>
		<xs:attribute name="bevel" default="none">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="none">
						<xs:annotation>
							<xs:documentation source="doc_enum_bevel_none"/>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="round"/>
					<xs:enumeration value="flat"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="ColorByValueMissing">
		<xs:annotation>
			<xs:documentation>Attributes to be used if color by value measure is missing</xs:documentation>
		</xs:annotation>
		<xs:attribute name="missingColor" type="ColorType" default="black"/>
		<xs:attribute name="missingColorTransparency" type="TransparencyType2" default="0"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="BorderDefinition2">
		<xs:annotation>
			<xs:documentation>Borders on chart elements</xs:documentation>
		</xs:annotation>
		<xs:attribute name="borders" default="hide">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="show">
						<xs:annotation>
							<xs:documentation source="doc_enum_borders_show"/>
						</xs:annotation>
					</xs:enumeration>
					<xs:enumeration value="hide">
						<xs:annotation>
							<xs:documentation source="doc_enum_borders_hide"/>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attribute name="borderColor" type="ColorType" default="black"/>
	</xs:attributeGroup>
	<xs:attributeGroup name="LabelLocation">
		<xs:attribute name="labelLocation" default="legend">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="chart"/>
					<xs:enumeration value="legend"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="MatrixLabelsLocation">
		<xs:attribute name="matrixLabelsLocation" default="primary">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="primary"/>
					<xs:enumeration value="secondary"/>
					<xs:enumeration value="both">
						<xs:annotation>
							<xs:documentation source="doc_enum_matrixLabelsLocation_both"/>
						</xs:annotation>
					</xs:enumeration>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:annotation>
		<xs:documentation>===================================== Complex Types  ==============================================</xs:documentation>
	</xs:annotation>
	<xs:complexType name="ChartText2">
		<xs:annotation>
			<xs:documentation>This is a string of chart text items that can be individually styled.</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element ref="style" minOccurs="0"/>
			<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
			<xs:element ref="v2_chartTextItems" minOccurs="0"/>
			<xs:element ref="masterDetailLinks" minOccurs="0"/>
			<xs:element ref="conditionalRender" minOccurs="0"/>
			<xs:element ref="propertyList" minOccurs="0"/>
			<xs:element ref="XMLAttributes" minOccurs="0"/>
		</xs:all>
		<xs:attribute name="refQuery" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="ChartTextLegendLabel2">
		<xs:annotation>
			<xs:documentation>This is a string of chart text items that can be individually styled.</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element ref="style" minOccurs="0"/>
			<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
			<xs:element ref="v2_chartTextItems" minOccurs="0"/>
			<xs:element ref="masterDetailLinks" minOccurs="0"/>
			<xs:element ref="conditionalRender" minOccurs="0"/>
			<xs:element ref="propertyList" minOccurs="0"/>
			<xs:element ref="XMLAttributes" minOccurs="0"/>
		</xs:all>
		<xs:attribute name="refQuery" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="AutomaticTextType2">
		<xs:annotation>
			<xs:documentation>Represents any text that is generated by the charting engine.</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element ref="style" minOccurs="0"/>
			<xs:element ref="conditionalRender" minOccurs="0"/>
			<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
			<xs:element ref="XMLAttributes" minOccurs="0"/>
		</xs:all>
		<xs:attributeGroup ref="AutoFontSizing2"/>
	</xs:complexType>
	<xs:complexType name="OrdinalPositionType2">
		<xs:annotation>
			<xs:documentation>The position is given by the member returned by the datasource.  If this is a static value, such as Canada, it should be matched by string comparison.  The offset is relative to that member.  Negative values mean to the left and position values mean to the right.  This is a percentage value.  50 means  half way to the member to the immediate right.</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element ref="reportExpression"/>
			<xs:element ref="v2_ordinalIndex"/>
			<xs:element ref="v2_percentAlongAxis"/>
		</xs:choice>
		<xs:attribute name="memberOffset" type="xs:decimal" default="0"/>
	</xs:complexType>
	<xs:complexType name="NumericAxisType2">
		<xs:annotation>
			<xs:documentation>Common definition for anythying that uses a numerical axis.</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element ref="v2_axisRange"/>
			<xs:element ref="v2_axisLabels" minOccurs="0">
				<xs:annotation>
					<xs:documentation>These will be either numeric or string labels depending on the context.  If this element is not defined, labels will not be rendered for this axis.  Labels will be drawn at every scale interval.  TODO: Deal with label orientation and fitting.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="v2_axisTitle" minOccurs="0">
				<xs:annotation>
					<xs:documentation>This is the generated or automatic title of an axis.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="v2_majorBackgroundColors" minOccurs="0"/>
			<xs:element ref="v2_minorGridlines" minOccurs="0"/>
			<xs:element ref="v2_majorGridlines" minOccurs="0"/>
			<xs:element ref="v2_axisLine" minOccurs="0"/>
			<xs:element ref="XMLAttributes" minOccurs="0"/>
		</xs:all>
		<xs:attributeGroup ref="AxisAttributes2"/>
	</xs:complexType>
	<xs:complexType name="OrdinalAxis2Type">
		<xs:annotation>
			<xs:documentation>TODO: This is incomplete.  Missing label position control.  The number of minor intervals controls how many minor gridlines or tick marks are rendered.  This allows you to have either minor gridlines, minor tick marks or both.</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element ref="v2_axisTitle" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Axis title.  This can either be specified or automatically generated by the server.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="reportDrills" minOccurs="0"/>
			<xs:element ref="v2_axisLabels" minOccurs="0"/>
			<xs:element ref="v2_axisLine" minOccurs="0">
				<xs:annotation>
					<xs:documentation>If this element is not present no axis line will be rendered.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="v2_majorGridlines" minOccurs="0"/>
			<xs:element ref="v2_minorGridlines" minOccurs="0"/>
			<xs:element ref="v2_majorBackgroundColors" minOccurs="0"/>
			<xs:element ref="XMLAttributes" minOccurs="0"/>
			<xs:element name="v2_labelControl" minOccurs="0">
				<xs:complexType>
					<xs:attribute name="numberOfStaggerLevels" default="1">
						<xs:simpleType>
							<xs:restriction base="xs:nonNegativeInteger">
								<xs:minInclusive value="1"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="rotationAngle" type="xs:decimal" default="0"/>
					<xs:attribute name="displayFrequency" default="5">
						<xs:simpleType>
							<xs:restriction base="xs:nonNegativeInteger">
								<xs:minInclusive value="1"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="firstLabel" default="1">
						<xs:simpleType>
							<xs:restriction base="xs:nonNegativeInteger"/>
						</xs:simpleType>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:all>
		<xs:attributeGroup ref="TextTruncationAttributes2"/>
		<xs:attributeGroup ref="AxisAttributes2"/>
		<xs:attribute name="reverseCategoryOrder" type="xs:boolean" default="false"/>
		<xs:attribute name="labelDisplayType" default="nested">
			<xs:simpleType>
				<xs:restriction base="xs:NMTOKEN">
					<xs:enumeration value="nested"/>
					<xs:enumeration value="concat"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="CombinationNumericAxisType2">
		<xs:annotation>
			<xs:documentation>Generic numerical axis definition for the combination chart.</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element ref="v2_axis" minOccurs="0"/>
			<xs:element name="v2_combinationChartTypes">
				<xs:annotation>
					<xs:documentation>This is an incomplete definition.  Also, it can be extended to include the stock / candle stick.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence maxOccurs="unbounded">
						<xs:choice>
							<xs:element name="v2_bar">
								<xs:annotation>
									<xs:documentation>Bars of a bar or column chart, depending on the chart orientation.  If the bar thickness is not specified a suitable server default will be used.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element ref="chartNodes" minOccurs="0"/>
										<xs:element ref="v2_chartDataLabels" minOccurs="0">
											<xs:annotation>
												<xs:documentation>Values display in the chart for each data point.  This defintion is not complete since it is missing placement and alignment control.</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element ref="v2_solidPalette" minOccurs="0"/>
										<xs:element ref="v2_conditionalSolidPalette" minOccurs="0"/>
										<xs:element ref="v2_trendLines" minOccurs="0"/>
										<xs:element ref="XMLAttributes" minOccurs="0"/>
									</xs:all>
									<xs:attribute name="setOrdinalWidthScale" default="80">
										<xs:simpleType>
											<xs:restriction base="xs:unsignedInt">
												<xs:minInclusive value="0"/>
												<xs:maxInclusive value="100"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
									<xs:attributeGroup ref="BevelType2"/>
									<xs:attributeGroup ref="SeriesType2"/>
									<xs:attribute name="barShape" type="BarShape2" default="rectangle"/>
									<xs:attributeGroup ref="BorderDefinition2"/>
								</xs:complexType>
							</xs:element>
							<xs:element name="v2_line">
								<xs:annotation>
									<xs:documentation>Lines of a line chart.  Can include data points or data markers.  This does not have the showLine property.  Use the v2_points element for points chart.  If dataPoints are enabled here, their style will be defined by the line palette.  If special data points are also defined, they will be drawn on top of the regular data points.  Data points will be shown on the line if defined for the palette.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element ref="chartNodes" minOccurs="0"/>
										<xs:element ref="v2_conditionalLinePalette" minOccurs="0"/>
										<xs:element ref="v2_chartDataLabels" minOccurs="0">
											<xs:annotation>
												<xs:documentation>Values display in the chart for each data point.  This defintion is not complete since it is missing placement and alignment control.</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element name="v2_specialDataPoints" minOccurs="0">
											<xs:annotation>
												<xs:documentation>Put a marker at the high, low, open and / or close data value.  If regular data points are also defined, these will be drawn on top.</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:all>
													<xs:element name="v2_firstPoint" minOccurs="0">
														<xs:annotation>
															<xs:documentation>Marker that is drawn for he last non-null value in the line.  It's position is the last ordinal value and the numeric value that corresponds to that ordinal.</xs:documentation>
														</xs:annotation>
														<xs:complexType>
															<xs:all>
																<xs:element ref="v2_pointPaletteEntry" minOccurs="0"/>
															</xs:all>
														</xs:complexType>
													</xs:element>
													<xs:element name="v2_highestPoint" minOccurs="0">
														<xs:annotation>
															<xs:documentation>Marker that is drawn for the highest value in this line.  Its position is the highest numeric value in the series and the corresponding ordinal value.</xs:documentation>
														</xs:annotation>
														<xs:complexType>
															<xs:all>
																<xs:element ref="v2_pointPaletteEntry" minOccurs="0"/>
															</xs:all>
														</xs:complexType>
													</xs:element>
													<xs:element name="v2_lowestPoint" minOccurs="0">
														<xs:annotation>
															<xs:documentation>Marker that is drawn for the lowest value in the line.  Its position is the lowest numerical value for the line and the corresponding oridnal value.</xs:documentation>
														</xs:annotation>
														<xs:complexType>
															<xs:all>
																<xs:element ref="v2_pointPaletteEntry" minOccurs="0"/>
															</xs:all>
														</xs:complexType>
													</xs:element>
													<xs:element name="v2_lastPoint" minOccurs="0">
														<xs:annotation>
															<xs:documentation>Marker that is drawn for the first non-null value in the line.  Its position is the first ordinal value and the numeric value that corresponds to that ordinal.</xs:documentation>
														</xs:annotation>
														<xs:complexType>
															<xs:all>
																<xs:element ref="v2_pointPaletteEntry" minOccurs="0"/>
															</xs:all>
														</xs:complexType>
													</xs:element>
												</xs:all>
											</xs:complexType>
										</xs:element>
										<xs:element ref="v2_linePalette" minOccurs="0"/>
										<xs:element ref="v2_trendLines" minOccurs="0"/>
										<xs:element ref="XMLAttributes" minOccurs="0"/>
									</xs:all>
									<xs:attributeGroup ref="SeriesType2"/>
									<xs:attributeGroup ref="LineAreaShape"/>
									<xs:attribute name="lineDisplayType" default="line">
										<xs:simpleType>
											<xs:restriction base="xs:NMTOKEN">
												<xs:enumeration value="line">
													<xs:annotation>
														<xs:documentation source="doc_enum_lineDisplayType_line"/>
													</xs:annotation>
												</xs:enumeration>
												<xs:enumeration value="lineAndMarkers"/>
												<xs:enumeration value="markers"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
								</xs:complexType>
							</xs:element>
							<xs:element name="v2_area">
								<xs:annotation>
									<xs:documentation>Area chart.  When applying gradients or textures to an area, the bounding rectangle is used for calculation and placement, then the area itself is used as a mask (see Excel).</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element ref="chartNodes" minOccurs="0"/>
										<xs:element ref="v2_chartDataLabels" minOccurs="0">
											<xs:annotation>
												<xs:documentation>Values display in the chart for each data point.  This defintion is not complete since it is missing placement and alignment control.</xs:documentation>
											</xs:annotation>
										</xs:element>
										<xs:element ref="v2_conditionalSolidPalette" minOccurs="0"/>
										<xs:element ref="v2_solidPalette" minOccurs="0"/>
										<xs:element ref="v2_trendLines" minOccurs="0"/>
										<xs:element ref="XMLAttributes" minOccurs="0"/>
									</xs:all>
									<xs:attributeGroup ref="BorderDefinition2"/>
									<xs:attributeGroup ref="SeriesType2"/>
									<xs:attributeGroup ref="LineAreaShape"/>
									<xs:attribute name="extendWidth" type="xs:boolean" default="true"/>
								</xs:complexType>
							</xs:element>
						</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element ref="v2_numericOrdinalColoredRegions" minOccurs="0"/>
			<xs:element ref="v2_markers" minOccurs="0"/>
			<xs:element ref="v2_numericBaselines" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Baselines that are drawn against this numerical axis.  Baselines are rendered in order, therefore the last baseline in the list will be rendered on top.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:all>
	</xs:complexType>
	<xs:complexType name="NumericPositionType2">
		<xs:annotation>
			<xs:documentation>Complex type to define special chart values.</xs:documentation>
		</xs:annotation>
		<xs:choice>
			<xs:element ref="dataSource"/>
			<xs:element name="v2_mean">
				<xs:annotation>
					<xs:documentation>Mean of the data, adjusted by the number of standard deviations (+ or -)</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="numberOfStddev" type="xs:decimal" default="0"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="v2_limit">
				<xs:annotation>
					<xs:documentation>Mininum or maximum of the data.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="limitType" default="max">
						<xs:simpleType>
							<xs:restriction base="xs:NMTOKEN">
								<xs:enumeration value="min"/>
								<xs:enumeration value="max"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="v2_percentile">
				<xs:annotation>
					<xs:documentation>Percentile of the data</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="percentile" type="xs:decimal" default="50"/>
				</xs:complexType>
			</xs:element>
			<xs:element ref="v2_percentAlongAxis"/>
		</xs:choice>
	</xs:complexType>
	<xs:complexType name="ChartMeasureType2">
		<xs:annotation>
			<xs:documentation>Type for a generic chart measure.  This includes a label definition in the event that the server needs to use the label for the measure (titles, ect...).</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element ref="v2_chartTextItems" minOccurs="0"/>
			<xs:element ref="style" minOccurs="0"/>
			<xs:element ref="XMLAttributes" minOccurs="0"/>
			<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
		</xs:all>
		<xs:attribute name="refDataItem" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="BulletChartMeasureType2">
		<xs:annotation>
			<xs:documentation>Type for a bullet chart measure.  No conditionalStyleRefs. This includes a label definition in the event that the server needs to use the label for the measure (titles, ect...).</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element ref="v2_chartTextItems" minOccurs="0"/>
			<xs:element ref="style" minOccurs="0"/>
			<xs:element ref="XMLAttributes" minOccurs="0"/>
		</xs:all>
		<xs:attribute name="refDataItem" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="ColorByValuetMeasureType2">
		<xs:annotation>
			<xs:documentation>Same as the Chart Measure Type2 except for the addition of an attribute</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element ref="v2_chartTextItems" minOccurs="0"/>
			<xs:element ref="style" minOccurs="0"/>
			<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
			<xs:element ref="XMLAttributes" minOccurs="0"/>
		</xs:all>
		<xs:attribute name="refDataItem" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:complexType name="ScatterNumericAxisType2">
		<xs:annotation>
			<xs:documentation>Common definition for a scatter chart axis</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element ref="v2_axisRange"/>
			<xs:element ref="v2_axisLabels" minOccurs="0">
				<xs:annotation>
					<xs:documentation>These will be either numeric or string labels depending on the context.  If this element is not defined, labels will not be rendered for this axis.  Labels will be drawn at every scale interval.  TODO: Deal with label orientation and fitting.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="v2_axisTitle" minOccurs="0">
				<xs:annotation>
					<xs:documentation>This is the generated or automatic title of an axis.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="v2_minorGridlines" minOccurs="0"/>
			<xs:element ref="v2_majorGridlines" minOccurs="0"/>
			<xs:element ref="v2_axisLine" minOccurs="0"/>
			<xs:element ref="v2_chartMeasure" minOccurs="0"/>
			<xs:element ref="v2_numericBaselines" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Baselines that are drawn against this numerical axis.  Baselines are rendered in order, therefore the last baseline in the list will be rendered on top.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element ref="v2_majorBackgroundColors" minOccurs="0"/>
			<xs:element ref="XMLAttributes" minOccurs="0"/>
		</xs:all>
		<xs:attributeGroup ref="AxisAttributes2"/>
	</xs:complexType>
	<xs:complexType name="FillEffects2">
		<xs:sequence>
			<xs:element ref="v2_fillEffect" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Fill Effects supported by the server.  Shared between palettes and conditional palettes.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:annotation>
		<xs:documentation>===================================== Global Elements  ==============================================</xs:documentation>
	</xs:annotation>
	<xs:element name="v2_chartTextStyle">
		<xs:annotation>
			<xs:documentation>Represents text styling within the chart.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_defaultChartMeasure" type="ChartMeasureType2">
		<xs:annotation>
			<xs:documentation>This element identifies the default measure to be used for a chart. If the measures of  the chart cannot be determined by what is being rendered on the edges, then the default measure will be rendered.  The style is appropriate only for data formating of values.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="v2_axisLabels">
		<xs:annotation>
			<xs:documentation>These will be either numeric or string labels depending on the context.  If this element is not defined, labels will not be rendered for this axis.  TODO: Deal with label orientation and fitting.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="AutomaticTextType2"/>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_axisTitle">
		<xs:annotation>
			<xs:documentation>This is a title axis.  TODO: There should be attributes to control the orientation of the axis title and how it is rendered.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="v2_chartTextContents"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="propertyList" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
			</xs:all>
			<xs:attribute name="refQuery" type="xs:string" use="required"/>
			<xs:attributeGroup ref="AutoFontSizing2"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_commonAxis">
		<xs:annotation>
			<xs:documentation>Common axis for all items in the combination chart.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="chartNodes" minOccurs="0"/>
				<xs:element ref="v2_ordinalAxis" minOccurs="0"/>
				<xs:element ref="v2_ordinalBaselines" minOccurs="0"/>
				<xs:element ref="v2_maxItems" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_minorGridlines">
		<xs:annotation>
			<xs:documentation>This represents minor gridlines.  If not present, no minor gridlines will be rendred.  The number of gridlines means how many will appear per scale interval (or major gridline)</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="LineStyleAndColorAttributes2"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_majorGridlines">
		<xs:annotation>
			<xs:documentation>Major gridlines.  If this element is not present, no major gridlines will be rendered.  A major gridline will be drawn at every scale interval.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="LineStyleAndColorAttributes2"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_majorBackgroundColors">
		<xs:annotation>
			<xs:documentation>Alternating background colors.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="v2_firstBackgroundColor" minOccurs="0">
					<xs:annotation>
						<xs:documentation>First color to draw in the sequence</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="color" type="ColorType" default="black"/>
						<xs:attributeGroup ref="TransparencyAttributes"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="v2_secondBackgroundColor" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Second color to draw in the sequence</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="color" type="ColorType" default="black"/>
						<xs:attributeGroup ref="TransparencyAttributes"/>
					</xs:complexType>
				</xs:element>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_axisLine">
		<xs:annotation>
			<xs:documentation>If this element is not present , no axis line will be rendered.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="LineStyleAndColorAttributes2"/>
			<xs:attribute name="majorTickMarkLocation" type="TickMarkLocation2" default="outside"/>
			<xs:attribute name="minorTickMarkLocation" type="TickMarkLocation2" default="none"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_backgroundColor">
		<xs:annotation>
			<xs:documentation>Color used in alternating background colors.  When these elements are placed in a  sequence the first background color element will be applied to the first (lowest) gridline interval.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="color" type="ColorType" default="black"/>
			<xs:attributeGroup ref="TransparencyAttributes"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_ordinalAxis">
		<xs:annotation>
			<xs:documentation>Oridinal Axis Definition.  The gap between ordinals works like Excel.  It controls how much space (percent of bar width) that appears between clusters or ordinal values.  Series overlap works like Excel and controls how much the series overlap (if present).  It is expressed in percentage of bar thickness.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="OrdinalAxis2Type"/>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_chartDataLabels">
		<xs:annotation>
			<xs:documentation>Values display in the chart for each data point.  This author can define the contents of the data labels or automatic can be used.  For automatic, the server will determine the best choice.  Typically this will include the value of the data point formatted appropriately and may also include the category and / or series name.  Notes on the size from notes apply here as well.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
			</xs:all>
			<xs:attribute name="labelCollisionMode" default="none">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="none">
							<xs:annotation>
								<xs:documentation source="doc_enum_pieLabelCollisionMode_none"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="coarse_stagger"/>
						<xs:enumeration value="fine_stagger"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="leaderLines" default="hide">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="show">
							<xs:annotation>
								<xs:documentation source="doc_enum_leaderLines_show"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="hide">
							<xs:annotation>
								<xs:documentation source="doc_enum_leaderLines_hide"/>
							</xs:annotation>
						</xs:enumeration>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="labelValueType" default="absolute">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="absolute">
							<xs:annotation>
								<xs:documentation source="doc_enum_labelValueType_absolute"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="cumulative">
							<xs:annotation>
								<xs:documentation source="doc_enum_labelValueType_cumulative"/>
							</xs:annotation>
						</xs:enumeration>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attributeGroup ref="v2_displayDataLocation"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_numericBaselines">
		<xs:annotation>
			<xs:documentation>Baselines that are drawn against this numerical axis.  Baselines are rendered in order, therefore the last baseline in the list will be rendered on top.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="v2_numericBaseline" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Numerical Baseline drawn against this axis.  Style defines the color, transparency and possible gradient for the baseline.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="v2_numericPosition"/>
							<xs:element ref="v2_label" minOccurs="0"/>
							<xs:element ref="conditionalRender" minOccurs="0"/>
							<xs:element ref="masterDetailLinks" minOccurs="0"/>
							<xs:element ref="propertyList" minOccurs="0"/>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
						</xs:all>
						<xs:attributeGroup ref="ComboIndex"/>
						<xs:attributeGroup ref="LineStyleAndColorAttributes2"/>
						<xs:attribute name="refQuery" type="xs:string" use="required"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_markers">
		<xs:annotation>
			<xs:documentation>Collection of markers to draw on a chart with an ordinal axis.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="v2_marker" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Single marker to draw on the chart.  The z-order of the markers is determined by their order in this list.  If no pointFill is defined, the marker is hollow (empty/transparent).  The marker can be filled by an image, gradient or color and includes transparency.  The position of the marker corresponds to the center of the marker.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="v2_label" minOccurs="0"/>
							<xs:element ref="conditionalRender" minOccurs="0"/>
							<xs:element ref="v2_numericPosition"/>
							<xs:element ref="v2_ordinalPosition"/>
							<xs:element ref="propertyList" minOccurs="0"/>
							<xs:element ref="masterDetailLinks" minOccurs="0"/>
							<xs:element ref="v2_pointPaletteEntry" minOccurs="0"/>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
						</xs:all>
						<xs:attributeGroup ref="ComboIndex"/>
						<xs:attribute name="refQuery" type="xs:string" use="required"/>
						<xs:attribute name="markerSize" type="CSSLength" default="10pt"/>
						<xs:attributeGroup ref="LabelLocation"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_scatterMarkers">
		<xs:annotation>
			<xs:documentation>Collection of markers to draw on a scatter or bubble chart.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="v2_scatterMarker" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Single marker to draw on the chart.  The z-order of the markers is determined by their order in this list.  If no pointFill is defined, the marker is hollow (empty/transparent).  The marker can be filled by an image, gradient or color and includes transparency.  The position of the marker corresponds to the center of the marker.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="masterDetailLinks" minOccurs="0"/>
							<xs:element ref="v2_label" minOccurs="0"/>
							<xs:element ref="conditionalRender" minOccurs="0"/>
							<xs:element name="v2_yAxisPosition" type="NumericPositionType2">
								<xs:annotation>
									<xs:documentation>Where the marker will be positioned on the y axis.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element name="v2_xAxisPosition" type="NumericPositionType2">
								<xs:annotation>
									<xs:documentation>Where the marker will be positioned on the x axis.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element ref="propertyList" minOccurs="0"/>
							<xs:element ref="v2_pointPaletteEntry" minOccurs="0"/>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
						</xs:all>
						<xs:attributeGroup ref="LabelLocation"/>
						<xs:attribute name="refQuery" type="xs:string" use="required"/>
						<xs:attribute name="markerSize" type="CSSLength" default="10pt"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_ordinalPosition" type="OrdinalPositionType2">
		<xs:annotation>
			<xs:documentation>Position along an ordinal axis</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="v2_legend">
		<xs:annotation>
			<xs:documentation>Defines the legend.  The legend has an optional width and height.  If not specified, the server will determine what makes sense based on an algorithm.  If either is specified, the server will attempt to fit everything in it.  STYLE: Padding, font, generated background, color, background color</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="v2_legendPosition">
					<xs:annotation>
						<xs:documentation>Position of the legend. This can be from a preset or from a specific setting.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice>
							<xs:element name="v2_legendPreset">
								<xs:annotation>
									<xs:documentation>Position the legend with a preset value.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:attribute name="legendPositionPreset" default="topRight">
										<xs:simpleType>
											<xs:restriction base="xs:NMTOKEN">
												<xs:enumeration value="top">
													<xs:annotation>
														<xs:documentation source="doc_enum_legendPositionPreset_top"/>
													</xs:annotation>
												</xs:enumeration>
												<xs:enumeration value="topRight">
													<xs:annotation>
														<xs:documentation source="doc_enum_legendPositionPreset_topRight"/>
													</xs:annotation>
												</xs:enumeration>
												<xs:enumeration value="topLeft">
													<xs:annotation>
														<xs:documentation source="doc_enum_legendPositionPreset_topLeft"/>
													</xs:annotation>
												</xs:enumeration>
												<xs:enumeration value="left"/>
												<xs:enumeration value="right"/>
												<xs:enumeration value="bottom"/>
												<xs:enumeration value="bottomRight">
													<xs:annotation>
														<xs:documentation source="doc_enum_legendPresetPosition_bottomRight"/>
													</xs:annotation>
												</xs:enumeration>
												<xs:enumeration value="bottomLeft">
													<xs:annotation>
														<xs:documentation source="doc_enum_legendPresetPosition_bottomLeft"/>
													</xs:annotation>
												</xs:enumeration>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
								</xs:complexType>
							</xs:element>
							<xs:element ref="v2_constrainedPosition"/>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element name="v2_legendTitle" minOccurs="0">
					<xs:annotation>
						<xs:documentation>This is a title axis.  TODO: There should be attributes to control the orientation of the axis title and how it is rendered.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="v2_chartTextContents"/>
							<xs:element ref="conditionalRender" minOccurs="0"/>
							<xs:element ref="masterDetailLinks" minOccurs="0"/>
							<xs:element ref="propertyList" minOccurs="0"/>
							<xs:element ref="style" minOccurs="0"/>
							<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
						</xs:all>
						<xs:attribute name="refQuery" type="xs:string" use="required"/>
						<xs:attributeGroup ref="AutoFontSizing2"/>
					</xs:complexType>
				</xs:element>
				<xs:element ref="reportDrills" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element name="v2_overflowText" type="LocalizedTextType" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Text to display in the legend when all the legend entries cannot fit.  Others... or More... seems appropriate but the author can put wahtever they want.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="AutoFontSizing2"/>
			<xs:attribute name="legendSeparator" type="xs:string" default=", "/>
			<xs:attribute name="legendSuffixValues" default="none">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="none">
							<xs:annotation>
								<xs:documentation source="doc_enum_legendSuffixValues_none"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="min">
							<xs:annotation>
								<xs:documentation source="doc_enum_legendSuffixValues_min"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="max">
							<xs:annotation>
								<xs:documentation source="doc_enum_legendSuffixValues_max"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="first">
							<xs:annotation>
								<xs:documentation source="doc_enum_legendSuffixValues_first"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="last">
							<xs:annotation>
								<xs:documentation source="doc_enum_legendSuffixValues_last"/>
							</xs:annotation>
						</xs:enumeration>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attributeGroup ref="TextTruncationAttributes2"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_notes">
		<xs:annotation>
			<xs:documentation>Notes displayed in a chart.  Notes could follow the same rendering as the tooltips.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="v2_note" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Note displayed in a chart.  The width of the note must be specified.  However, height is optional.  If not specified, the height of the note will be determined by fitting all the wrapped text.  The note will grow up or down depending on its anchor type.  To display images in a note use eithe the background image style or the generated background style.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="style" minOccurs="0"/>
							<xs:element ref="v2_constrainedPosition"/>
							<xs:element ref="conditionalRender" minOccurs="0"/>
							<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
							<xs:element ref="masterDetailLinks" minOccurs="0"/>
							<xs:element ref="propertyList" minOccurs="0"/>
							<xs:element ref="v2_chartTextItems" minOccurs="0"/>
						</xs:all>
						<xs:attribute name="refQuery" type="xs:string" use="required"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_chartBody">
		<xs:annotation>
			<xs:documentation>Used to style the chart body or plot area.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_ordinalIndex">
		<xs:annotation>
			<xs:documentation>Index of the ordinal.</xs:documentation>
			<xs:documentation>One based index of the member.</xs:documentation>
		</xs:annotation>
		<xs:complexType mixed="false">
			<xs:attribute name="ordinalIndex" type="xs:unsignedInt" default="1"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_chartTextContents">
		<xs:annotation>
			<xs:documentation>Defines the text for the element.  It can either be automatic or specified by the author.  In either case style is inherited from the parent.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element name="v2_automaticText">
					<xs:annotation>
						<xs:documentation>Server generated automatic text.</xs:documentation>
					</xs:annotation>
					<xs:complexType/>
				</xs:element>
				<xs:element ref="v2_chartTextItems"/>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_equationNote">
		<xs:annotation>
			<xs:documentation>Display the trend line equation and / or the R-squared value in a note. If the note is displayed in the legend, it will be displaye with the line style.  If it is displayed in the chart, it will be displayed near tht line.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="v2_equationNotePosition">
					<xs:annotation>
						<xs:documentation>Defines how the equation note is positioned.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice>
							<xs:element ref="v2_showInChart">
								<xs:annotation>
									<xs:documentation>If shown in the chart, it can be positioned and styled just as a note can.  Element would support the full styling of a note.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element ref="v2_showInLegend">
								<xs:annotation>
									<xs:documentation>If shown in the legend, the equations are shown just below the entry for the label of the trend line (if shown).  This element would only support style that applies to text.</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element name="style" minOccurs="0">
					<xs:annotation>
						<xs:appinfo>subtype</xs:appinfo>
						<xs:documentation source="doc_ele_style_dataFormat"/>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="dataFormat" minOccurs="0"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="RegressionLineAttributes"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_chartTextItems">
		<xs:annotation>
			<xs:documentation>Container for chart text items.  </xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="v2_chartTextItem" minOccurs="0" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Individual text items.  STYLE: The chart text item only supports font and color.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="style" minOccurs="0"/>
							<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
							<xs:element ref="conditionalRender" minOccurs="0"/>
							<xs:element ref="dataSource"/>
							<xs:element ref="conditionalDataSources" minOccurs="0"/>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_axis" type="NumericAxisType2">
		<xs:annotation>
			<xs:documentation>Numeric axis</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="v2_numericAxis" type="NumericAxisType2">
		<xs:annotation>
			<xs:documentation>Numeric axis</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="v2_dropShadow">
		<xs:annotation>
			<xs:documentation>Chart Drop Shadow</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="blurPreset" default="none">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="none">
							<xs:annotation>
								<xs:documentation source="doc_enum_blurPreset_none"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="minimumBlur"/>
						<xs:enumeration value="littleBlur"/>
						<xs:enumeration value="averageBlur"/>
						<xs:enumeration value="muchBlur"/>
						<xs:enumeration value="maximumBlur"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="color" type="ColorType" default="gray"/>
			<xs:attributeGroup ref="TransparencyAttributes"/>
			<xs:attribute name="shadowOffset" type="CSSLength" default="5px"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_endOrdinalPosition" type="OrdinalPositionType2">
		<xs:annotation>
			<xs:documentation>End point along the ordinal axis.  End must be after start.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="v2_startNumericPosition" type="NumericPositionType2">
		<xs:annotation>
			<xs:documentation>First numeric position region of the colored region.  Left and top are confused when chart is rotated.  Start must be less than  end.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="v2_endNumericPosition" type="NumericPositionType2">
		<xs:annotation>
			<xs:documentation>Last numeric position.  Left and top are coifusing when the chart is rotated.  End must be more than start.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="v2_startOrdinalPosition" type="OrdinalPositionType2">
		<xs:annotation>
			<xs:documentation>Starting point along hte ordinal axis.  Start must be before end.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="v2_showInLegend">
		<xs:annotation>
			<xs:documentation>If shown in the legend, the equations are shown just below the entry for the label of the trend line (if shown).</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_showInChart">
		<xs:annotation>
			<xs:documentation>If shown in the chart, it can be positioned and styled just as a note can.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="v2_constrainedPosition"/>
				<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_label" type="ChartTextLegendLabel2">
		<xs:annotation>
			<xs:documentation>Generic authored label for charts.  STYLE:  Labels support font and color</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="v2_numericPosition" type="NumericPositionType2">
		<xs:annotation>
			<xs:documentation>Position along the numeric axis.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="v2_trendLines">
		<xs:annotation>
			<xs:documentation>Lines that are calculated  based on statistics.  If this is used in anything other than a scatter chart, it will use the ordinal index or Date as its indepdentant variable.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="v2_trendLine" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Definition of a trend line. A line can have a gradient style.  </xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element name="v2_trendLineType">
								<xs:annotation>
									<xs:documentation>Type of the trend line.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:choice>
										<xs:element name="v2_linearRegression">
											<xs:annotation>
												<xs:documentation>Linear Regression Line</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:all>
													<xs:element ref="v2_equationNote" minOccurs="0">
														<xs:annotation>
															<xs:documentation>Display the trend line equation and / or the R-squared value in a note. If the note is displayed in the legend, it will be displaye with the line style.  If it is displayed in the chart, it will be displayed near tht line.</xs:documentation>
														</xs:annotation>
													</xs:element>
													<xs:element ref="XMLAttributes" minOccurs="0"/>
												</xs:all>
											</xs:complexType>
										</xs:element>
										<xs:element name="v2_exponentialRegression">
											<xs:annotation>
												<xs:documentation>Exponential Regression Line</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:all>
													<xs:element ref="v2_equationNote" minOccurs="0"/>
													<xs:element ref="XMLAttributes" minOccurs="0"/>
												</xs:all>
											</xs:complexType>
										</xs:element>
										<xs:element name="v2_polynomialRegression">
											<xs:annotation>
												<xs:documentation>Polynomial Regression Line</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:all>
													<xs:element ref="v2_equationNote" minOccurs="0"/>
													<xs:element ref="XMLAttributes" minOccurs="0"/>
												</xs:all>
												<xs:attribute name="polynomialOrder" default="2">
													<xs:simpleType>
														<xs:restriction base="xs:nonNegativeInteger">
															<xs:maxInclusive value="6"/>
															<xs:minInclusive value="2"/>
														</xs:restriction>
													</xs:simpleType>
												</xs:attribute>
											</xs:complexType>
										</xs:element>
										<xs:element name="v2_commonLogRegression">
											<xs:annotation>
												<xs:documentation>Common Log Regression Line</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:all>
													<xs:element ref="v2_equationNote" minOccurs="0"/>
													<xs:element ref="XMLAttributes" minOccurs="0"/>
												</xs:all>
											</xs:complexType>
										</xs:element>
										<xs:element name="v2_naturalLogRegression">
											<xs:annotation>
												<xs:documentation>Natural Log Regression Line</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:all>
													<xs:element ref="v2_equationNote" minOccurs="0"/>
													<xs:element ref="XMLAttributes" minOccurs="0"/>
												</xs:all>
											</xs:complexType>
										</xs:element>
										<xs:element name="v2_powerRegression">
											<xs:annotation>
												<xs:documentation>Power Regression Line</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:all>
													<xs:element ref="v2_equationNote" minOccurs="0"/>
													<xs:element ref="XMLAttributes" minOccurs="0"/>
												</xs:all>
											</xs:complexType>
										</xs:element>
										<xs:element name="v2_movingAverage">
											<xs:annotation>
												<xs:documentation>Not really a regression line, but kept here anyway.  Shows the moving average.  Periods is really just the number of ordinals.</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:all>
													<xs:element ref="XMLAttributes" minOccurs="0"/>
												</xs:all>
												<xs:attribute name="periods" type="xs:nonNegativeInteger" default="2"/>
											</xs:complexType>
										</xs:element>
									</xs:choice>
								</xs:complexType>
							</xs:element>
							<xs:element name="v2_trendLineLabel" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Label to show with the trendline.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element ref="v2_chartTextContents"/>
										<xs:element ref="propertyList" minOccurs="0"/>
										<xs:element ref="style" minOccurs="0"/>
										<xs:element ref="conditionalStyleRefs" minOccurs="0"/>
										<xs:element ref="XMLAttributes" minOccurs="0"/>
									</xs:all>
									<xs:attribute name="refQuery" type="xs:string" use="required"/>
								</xs:complexType>
							</xs:element>
							<xs:element ref="conditionalRender" minOccurs="0"/>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
						</xs:all>
						<xs:attribute name="regressionLineType" default="allSeriesItems">
							<xs:simpleType>
								<xs:restriction base="xs:NMTOKEN">
									<xs:enumeration value="allSeriesItems"/>
									<xs:enumeration value="eachSeriesItem"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attributeGroup ref="LineStyleAndColorAttributes2"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_connectLines">
		<xs:annotation>
			<xs:documentation>Connecting Lines definition.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="LineStyleAndColorAttributes2"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_maxItems">
		<xs:annotation>
			<xs:documentation>Maximum items (categories or slices) to allow before the remianing items are grouped togehter into a new item (category or slice).  The style of this new category will follow the current palette definition.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="v2_label" minOccurs="0"/>
				<xs:element name="v2_maxNumberOfItems" minOccurs="0">
					<xs:annotation>
						<xs:documentation>If specified, indicates the maximum number of items that will be displayed before gropuing occurs. </xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="maxNumberOfItems" type="xs:positiveInteger" use="required"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="v2_valueThreshold" minOccurs="0">
					<xs:annotation>
						<xs:documentation>If specified, indicates the threshold at which values are grouped.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice>
							<xs:element name="v2_absoluteThreshold">
								<xs:annotation>
									<xs:documentation>Any value below this threshold is grouped into the other category.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:attribute name="absoluteThreshold" type="xs:decimal" use="required"/>
								</xs:complexType>
							</xs:element>
							<xs:element name="v2_percentThreshold">
								<xs:annotation>
									<xs:documentation>Any value below this threshold percentage is grouped into the other category.  This is a percentage of the total data in the data set.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:attribute name="percentageThreshold" use="required">
										<xs:simpleType>
											<xs:restriction base="xs:decimal">
												<xs:minInclusive value="0"/>
												<xs:maxInclusive value="100"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
								</xs:complexType>
							</xs:element>
						</xs:choice>
					</xs:complexType>
				</xs:element>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
			</xs:all>
			<xs:attribute name="newCategoryRollup" default="sum">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="sum"/>
						<xs:enumeration value="average"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_chartMeasure" type="ChartMeasureType2">
		<xs:annotation>
			<xs:documentation>Generic chart measure.  Its meaning is generally derived from its parent element.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="v2_constrainedPosition">
		<xs:annotation>
			<xs:documentation>Generic constrained positions.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="v2_verticalPosition"/>
				<xs:element ref="v2_horizontalPosition"/>
				<xs:element ref="v2_positionAnchor"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_stringValues">
		<xs:annotation>
			<xs:documentation>List of string values to match in a conditional palette.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="v2_stringValue" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_stringValue" type="xs:string">
		<xs:annotation>
			<xs:documentation>String value to match in a conditional palette.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="v2_axisRange">
		<xs:annotation>
			<xs:documentation>In the future, if required, a calculated range element can be added where the values of the min, max and scaleInterval can be calculated from a report or query expression.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element name="v2_automaticRange">
					<xs:annotation>
						<xs:documentation>The range for the axis will be calculated by the server based on the data.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="sameRangeAllInstances" type="xs:boolean" default="true"/>
						<xs:attribute name="includeZeroForAutoScale" type="xs:boolean" default="true"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="v2_specifiedRange">
					<xs:annotation>
						<xs:documentation>The range for the axis is specified by the author.  If any of the optional attributes are not provided, they will be filled in by the server.  For example, the author can specify the min and have the server determine an appropriate max and interval.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="includeZeroForAutoScale" type="xs:boolean" default="true"/>
						<xs:attribute name="min" type="xs:float">
							<xs:annotation>
								<xs:documentation source="doc_att_min_chart"/>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="max" type="xs:float">
							<xs:annotation>
								<xs:documentation source="doc_att_max_chart"/>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="scaleInterval" type="xs:float"/>
					</xs:complexType>
				</xs:element>
			</xs:choice>
			<xs:attribute name="scale" default="linear">
				<xs:annotation>
					<xs:documentation source="doc_att_scale_chart"/>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="linear"/>
						<xs:enumeration value="log"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_gradientColor">
		<xs:annotation>
			<xs:documentation>Color and position.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="gradientColor" type="ColorType" default="black"/>
			<xs:attribute name="colorPosition" default="0">
				<xs:simpleType>
					<xs:restriction base="xs:decimal">
						<xs:minInclusive value="0"/>
						<xs:maxInclusive value="100"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_solidColor">
		<xs:annotation>
			<xs:documentation>Solid color with transparency.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attributeGroup ref="TransparencyAttributes"/>
			<xs:attribute name="color" type="ColorType" default="black"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_linearGradient">
		<xs:annotation>
			<xs:documentation>Linear gradient without transparency because the engine cannot support it.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="v2_gradientColor" maxOccurs="unbounded"/>
			</xs:sequence>
			<xs:attribute name="gradientAngle" default="0">
				<xs:simpleType>
					<xs:restriction base="xs:decimal">
						<xs:minInclusive value="0"/>
						<xs:maxInclusive value="360"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_xAxis" type="ScatterNumericAxisType2">
		<xs:annotation>
			<xs:documentation>X Axis.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="v2_yAxis" type="ScatterNumericAxisType2">
		<xs:annotation>
			<xs:documentation>Y Axis.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="v2_category">
		<xs:annotation>
			<xs:documentation>Category definition.  Just a chartNodes element.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="chartNodes"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_series">
		<xs:annotation>
			<xs:documentation>Series definition.  Just a chartNodes element.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="chartNodes"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_matrix">
		<xs:annotation>
			<xs:documentation>Defines how to render a one or two dimension matrix of this chart.  What about nesting and unioning on these edges?  Decide on convention and stick with it.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="v2_matrixRows" minOccurs="0">
					<xs:annotation>
						<xs:documentation>How many levels of nesting from the series will be used as matrix rows.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element name="v2_matrixRowLabels" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Controls how the matrix labels for the rows will be rendered.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element ref="style" minOccurs="0"/>
									</xs:all>
									<xs:attributeGroup ref="TextTruncationAttributes2"/>
									<xs:attributeGroup ref="AutoFontSizing2"/>
								</xs:complexType>
							</xs:element>
							<xs:element ref="v2_axisTitle" minOccurs="0"/>
						</xs:all>
						<xs:attributeGroup ref="MatrixLabelsLocation"/>
						<xs:attribute name="matrixLevels" type="xs:nonNegativeInteger" default="1"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="v2_matrixColumns" minOccurs="0">
					<xs:annotation>
						<xs:documentation>How many levels of nesting from the category will be used as matrix columns.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element name="v2_matrixColumnLabels" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Controls how the matrix labels for the rows will be rendered.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element ref="style" minOccurs="0"/>
									</xs:all>
									<xs:attributeGroup ref="TextTruncationAttributes2"/>
									<xs:attributeGroup ref="AutoFontSizing2"/>
								</xs:complexType>
							</xs:element>
							<xs:element ref="v2_axisTitle" minOccurs="0"/>
						</xs:all>
						<xs:attributeGroup ref="MatrixLabelsLocation"/>
						<xs:attribute name="matrixLevels" type="xs:nonNegativeInteger" default="1"/>
					</xs:complexType>
				</xs:element>
			</xs:all>
			<xs:attribute name="wrapCells" default="wrapIfPossible">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="noWrap"/>
						<xs:enumeration value="wrapIfPossible"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="showAxesInMatrix" type="xs:boolean" default="false"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_positionAnchor">
		<xs:annotation>
			<xs:documentation>Indicates what the positions are anchored to.  If the anchor is a report expression it will generally result in a category with is a point, bar or similar riser.  The position will be relative to the top or end of this riser and its center on the opposite axis.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element name="v2_relativeChart">
					<xs:annotation>
						<xs:documentation>Positions are relative to the chart.</xs:documentation>
					</xs:annotation>
					<xs:complexType/>
				</xs:element>
				<xs:element ref="v2_relativeChartBody"/>
				<xs:element ref="reportExpression"/>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_ordinalBaselines">
		<xs:annotation>
			<xs:documentation>Commonly called vertical baselines for vertical charts, these baselines are positioned by an ordinal value.  Baselines are rendered in order, therefore the last one in the list will be on top.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="v2_ordinalBaseline" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>Baseline positioned by an ordinal value. </xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="v2_ordinalPosition"/>
							<xs:element ref="v2_label" minOccurs="0"/>
							<xs:element ref="conditionalRender" minOccurs="0"/>
							<xs:element ref="propertyList" minOccurs="0"/>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
						</xs:all>
						<xs:attributeGroup ref="LineStyleAndColorAttributes2"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_chartTitle" type="ChartText2">
		<xs:annotation>
			<xs:documentation>Title for a chart.  STYLE: Titles support font, background color, background image generated background and  color.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="v2_chartSubTitle" type="ChartText2">
		<xs:annotation>
			<xs:documentation>Sub title for a chart.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="v2_chartFooter" type="ChartText2">
		<xs:annotation>
			<xs:documentation>Footer for the chart.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="v2_markerConstrainedPosition">
		<xs:annotation>
			<xs:documentation>Markers cannot be achored to the chart so we have a special definition here that removes that option from the constrainedposition.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="v2_verticalPosition"/>
				<xs:element ref="v2_horizontalPosition"/>
				<xs:element name="v2_markerPositionAnchor">
					<xs:annotation>
						<xs:documentation>A marker can be positioned relative to the chart body or to a value identified by the report expression.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice>
							<xs:element ref="v2_relativeChartBody"/>
							<xs:element ref="reportExpression"/>
						</xs:choice>
					</xs:complexType>
				</xs:element>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_numericColoredRegions">
		<xs:annotation>
			<xs:documentation>This is a collection of rectangles drawn in the chart body to highlight special regions.  They are drawn behind the risers.  For z-order considerations, regions are drawn in order, so the last region will be drawn on top of the others.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="v2_numericColoredRegion" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_numericOrdinalColoredRegions">
		<xs:annotation>
			<xs:documentation>This is a collection of rectangles drawn in the chart body to highlight special regions.  They are drawn behind the risers.  For z-order considerations, regions are drawn in order, so the last region will be drawn on top of the others.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="v2_numericOrdinalColoredRegion" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>A region has a fill defined by style, a start numeric and ordinal positions as well as end numeric and ordinal positions. If both pattern and style (backgfround color, generated background) are defined, the pattern is drawn on top of the item.  The width and height are ignored if the calculated position is used.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="v2_fillEffect"/>
							<xs:element ref="v2_label" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Generic authored label.</xs:documentation>
								</xs:annotation>
							</xs:element>
							<xs:element ref="v2_startNumericPosition"/>
							<xs:element ref="v2_endNumericPosition"/>
							<xs:element ref="v2_startOrdinalPosition"/>
							<xs:element ref="v2_endOrdinalPosition"/>
							<xs:element ref="propertyList" minOccurs="0"/>
							<xs:element ref="masterDetailLinks" minOccurs="0"/>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
							<xs:element ref="conditionalRender" minOccurs="0"/>
						</xs:all>
						<xs:attributeGroup ref="ComboIndex"/>
						<xs:attribute name="refQuery" type="xs:string" use="required"/>
						<xs:attributeGroup ref="LabelLocation"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_numericColoredRegion">
		<xs:annotation>
			<xs:documentation>A region has a fill defined by style, a start numeric and ordinal positions as well as end numeric and ordinal positions. If both pattern and style (backgfround color, generated background) are defined, the pattern is drawn on top of the item.  The width and height are ignored if the calculated position is used.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="v2_fillEffect"/>
				<xs:element ref="v2_label" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Generic authored label.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="v2_topPosition" type="NumericPositionType2">
					<xs:annotation>
						<xs:documentation>Top position of the colored region.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="v2_bottomPosition" type="NumericPositionType2">
					<xs:annotation>
						<xs:documentation>Bottom position of the colored region.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="v2_leftPosition" type="NumericPositionType2">
					<xs:annotation>
						<xs:documentation>Left position of the colorred region.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="v2_rightPosition" type="NumericPositionType2">
					<xs:annotation>
						<xs:documentation>right position ofthe colored region.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element ref="propertyList" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
			</xs:all>
			<xs:attribute name="refQuery" type="xs:string" use="required"/>
			<xs:attributeGroup ref="LabelLocation"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_automaticLabel">
		<xs:annotation>
			<xs:documentation>Server generated label.</xs:documentation>
		</xs:annotation>
		<xs:complexType/>
	</xs:element>
	<xs:element name="v2_horizontalPosition">
		<xs:annotation>
			<xs:documentation>Horizontal position.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element name="v2_left">
					<xs:annotation>
						<xs:documentation>Offset from left.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="offset" type="CSSPosition" default="0px"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="v2_center">
					<xs:annotation>
						<xs:documentation>Offset from the center.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="offset" type="CSSPosition" default="0px"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="v2_right">
					<xs:annotation>
						<xs:documentation>Offset from the right.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="offset" type="CSSPosition" default="0px"/>
					</xs:complexType>
				</xs:element>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_verticalPosition">
		<xs:annotation>
			<xs:documentation>Vertical position.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element name="v2_top">
					<xs:annotation>
						<xs:documentation>Offset from the top.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="offset" type="CSSPosition" default="0px"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="v2_middle">
					<xs:annotation>
						<xs:documentation>Offset from the middle.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="offset" type="CSSPosition" default="0px"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="v2_bottom">
					<xs:annotation>
						<xs:documentation>Offset from the bottom.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="offset" type="CSSPosition" default="0px"/>
					</xs:complexType>
				</xs:element>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_plotArea">
		<xs:annotation>
			<xs:documentation>Represents that area inside the plot, between the axes.  This allows for putting a background there.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="v2_fillEffect"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_relativeChartBody">
		<xs:annotation>
			<xs:documentation>Positions are relative to be chart body.</xs:documentation>
		</xs:annotation>
		<xs:complexType/>
	</xs:element>
	<xs:annotation>
		<xs:documentation>==============================    Palette Stuff  ====================================</xs:documentation>
	</xs:annotation>
	<xs:element name="v2_solidPalette">
		<xs:annotation>
			<xs:documentation>Palette definition for bars, pies and areas</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="v2_solidPaletteEntries" minOccurs="0"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_linePalette">
		<xs:annotation>
			<xs:documentation>Palette definition for lines</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="v2_linePaletteEntries" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Collection of line palette entires.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element ref="v2_linePaletteEntry" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:all>
			<xs:attributeGroup ref="MarkerStyleAttributes2"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_pointPalette">
		<xs:annotation>
			<xs:documentation>Palette definition for points, scatter and bubbles</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="v2_pointPaletteEntries" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Collection of point palette entries.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element ref="v2_pointPaletteEntry" maxOccurs="unbounded"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="v2_pointColorByValue" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Full color by value definition</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="v2_pointColorByValueEntries" minOccurs="0"/>
							<xs:element ref="v2_colorByValueMeasure" minOccurs="0"/>
						</xs:all>
						<xs:attribute name="boundaryValueType" default="percent">
							<xs:simpleType>
								<xs:restriction base="xs:NMTOKEN">
									<xs:enumeration value="percent"/>
									<xs:enumeration value="absolute">
										<xs:annotation>
											<xs:documentation source="doc_enum_boundaryValueType_absolute"/>
										</xs:annotation>
									</xs:enumeration>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attributeGroup ref="ColorByValueMissing"/>
						<xs:attributeGroup ref="MarkerShape2"/>
					</xs:complexType>
				</xs:element>
			</xs:all>
			<xs:attributeGroup ref="MarkerStyleAttributes2"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_progressivePalette">
		<xs:annotation>
			<xs:documentation>Controls the fill on the progressive bars.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="v2_progressivePositiveValueFill" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines how bars for positive values are filled.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="v2_fillEffect"/>
							<xs:element ref="v2_chartTextLabel" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Choice between authored label and automatic label.</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element name="v2_progressiveNegativeValueFill" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines how bars for negative values are filled.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="v2_fillEffect"/>
							<xs:element ref="v2_chartTextLabel" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Choice between authored label and automatic label.</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element name="v2_progressiveFirstValueFill" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines how the first bar is filled.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="v2_fillEffect"/>
							<xs:element ref="v2_chartTextLabel" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Choice between authored label and automatic label.</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element name="v2_progressiveTotalValueFill" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines how the total bar, if present, is filled.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="v2_fillEffect"/>
							<xs:element ref="v2_chartTextLabel" minOccurs="0">
								<xs:annotation>
									<xs:documentation>Choice between authored label and automatic label.</xs:documentation>
								</xs:annotation>
							</xs:element>
						</xs:all>
					</xs:complexType>
				</xs:element>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_fillEffect">
		<xs:annotation>
			<xs:documentation>Definition of a fill effect as indicated by current CGS support.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element ref="v2_solidColor"/>
				<xs:element ref="v2_linearGradient"/>
				<xs:element name="v2_radialRectGradient">
					<xs:annotation>
						<xs:documentation>Radial rectangle gradient without transparency because the engine cannot support it.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element ref="v2_gradientColor" maxOccurs="unbounded"/>
						</xs:sequence>
						<xs:attribute name="focusSize" default="50">
							<xs:simpleType>
								<xs:restriction base="xs:decimal">
									<xs:minInclusive value="0"/>
									<xs:maxInclusive value="100"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name="v2_radialLinearGradient">
					<xs:annotation>
						<xs:documentation>Radial rectangle gradient without transparency because the engine cannot support it.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element ref="v2_gradientColor" maxOccurs="unbounded"/>
						</xs:sequence>
						<xs:attribute name="focusX1Position" type="CSSLength" default="50%"/>
						<xs:attribute name="focusY1Position" type="CSSLength" default="50%"/>
						<xs:attribute name="focusX2Position" type="CSSLength" default="50%"/>
						<xs:attribute name="focusY2Position" type="CSSLength" default="50%"/>
						<xs:attribute name="focusInnerRadius" type="CSSLength" default="0px">
							<xs:annotation>
								<xs:documentation>If this is a percentage, it is a percentage of the greater of the height or the width of the bounding rectange.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
						<xs:attribute name="focusOuterRadius" type="CSSLength" default="0px">
							<xs:annotation>
								<xs:documentation>If this is a percentage, it is a percentage of the greater of the height or the width of the bounding rectange.</xs:documentation>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name="v2_image">
					<xs:annotation>
						<xs:documentation>Image</xs:documentation>
						<xs:documentation>Defines an image.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element name="v2_imagePosition">
								<xs:annotation>
									<xs:documentation>The image can be placed within the generated background through different means.</xs:documentation>
									<xs:documentation>Determines how the image is positioned.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:choice>
										<xs:element name="v2_manualPosition">
											<xs:annotation>
												<xs:documentation>Place the by specifying an X and Y location.</xs:documentation>
												<xs:documentation>Explicit position is measured from the top left corner of the rectangle.</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:attribute name="positionX" type="CSSLength" default="0px"/>
												<xs:attribute name="positionY" type="CSSLength" default="0px"/>
												<xs:attribute name="tile" default="none">
													<xs:annotation>
														<xs:documentation source="doc_att_v2_tile"/>
													</xs:annotation>
													<xs:simpleType>
														<xs:restriction base="xs:NMTOKEN">
															<xs:enumeration value="none">
																<xs:annotation>
																	<xs:documentation source="doc_enum_tile_none"/>
																</xs:annotation>
															</xs:enumeration>
															<xs:enumeration value="vertical">
																<xs:annotation>
																	<xs:documentation source="doc_enum_tile_vertical"/>
																</xs:annotation>
															</xs:enumeration>
															<xs:enumeration value="horizontal">
																<xs:annotation>
																	<xs:documentation source="doc_enum_tile_horizontal"/>
																</xs:annotation>
															</xs:enumeration>
															<xs:enumeration value="both">
																<xs:annotation>
																	<xs:documentation source="doc_enum_tile_both"/>
																</xs:annotation>
															</xs:enumeration>
														</xs:restriction>
													</xs:simpleType>
												</xs:attribute>
											</xs:complexType>
										</xs:element>
										<xs:element name="v2_stretchPosition">
											<xs:annotation>
												<xs:documentation>Stretch the image to fit.</xs:documentation>
											</xs:annotation>
											<xs:complexType/>
										</xs:element>
										<xs:element name="v2_automaticPosition">
											<xs:annotation>
												<xs:documentation>Preset image locations</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:attribute name="imageAutomaticPosition" default="centerCenter">
													<xs:simpleType>
														<xs:restriction base="xs:NMTOKEN">
															<xs:enumeration value="centerLeft"/>
															<xs:enumeration value="centerCenter"/>
															<xs:enumeration value="centerRight"/>
															<xs:enumeration value="topLeft"/>
															<xs:enumeration value="topCenter"/>
															<xs:enumeration value="topRight"/>
															<xs:enumeration value="bottomLeft"/>
															<xs:enumeration value="bottomCenter"/>
															<xs:enumeration value="bottomRight"/>
														</xs:restriction>
													</xs:simpleType>
												</xs:attribute>
												<xs:attribute name="tile" default="none">
													<xs:annotation>
														<xs:documentation source="doc_att_v2_tile"/>
													</xs:annotation>
													<xs:simpleType>
														<xs:restriction base="xs:NMTOKEN">
															<xs:enumeration value="none">
																<xs:annotation>
																	<xs:documentation source="doc_enum_tile_none"/>
																</xs:annotation>
															</xs:enumeration>
															<xs:enumeration value="vertical">
																<xs:annotation>
																	<xs:documentation source="doc_enum_tile_vertical"/>
																</xs:annotation>
															</xs:enumeration>
															<xs:enumeration value="horizontal">
																<xs:annotation>
																	<xs:documentation source="doc_enum_tile_horizontal"/>
																</xs:annotation>
															</xs:enumeration>
															<xs:enumeration value="both">
																<xs:annotation>
																	<xs:documentation source="doc_enum_tile_both"/>
																</xs:annotation>
															</xs:enumeration>
														</xs:restriction>
													</xs:simpleType>
												</xs:attribute>
											</xs:complexType>
										</xs:element>
									</xs:choice>
								</xs:complexType>
							</xs:element>
						</xs:all>
						<xs:attribute name="URL" type="xs:string" use="required">
							<xs:annotation>
								<xs:documentation source="doc_att_chart_URL"/>
							</xs:annotation>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name="v2_pattern">
					<xs:annotation>
						<xs:documentation>Pattern without transparency.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="foregroundColor" type="ColorType" default="black"/>
						<xs:attribute name="backgroundColor" type="ColorType" default="transparent"/>
						<xs:attribute name="patternType" default="horizontal">
							<xs:simpleType>
								<xs:restriction base="xs:NMTOKEN">
									<xs:enumeration value="horizontal">
										<xs:annotation>
											<xs:documentation source="doc_enum_patternType_horizontal"/>
										</xs:annotation>
									</xs:enumeration>
									<xs:enumeration value="vertical">
										<xs:annotation>
											<xs:documentation source="doc_enum_patternType_vertical"/>
										</xs:annotation>
									</xs:enumeration>
									<xs:enumeration value="forwardDiagonal"/>
									<xs:enumeration value="backwardDiagonal"/>
									<xs:enumeration value="cross"/>
									<xs:enumeration value="diagonalCross"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
			</xs:choice>
			<xs:attribute name="defaultColor" type="ColorType" default="black"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_pointColorByValueEntries">
		<xs:annotation>
			<xs:documentation>Palette that uses linear interpolation to determine the color and other attributes for risers in charts.  The conditional data item refers to the numerical value used to determine the location in the list of entries.  Typically this will refer to the query of the chart, but may often not refer to a data item actually displayed in the chart.  For example, the chart could be showing bars of revenue where the bars are colored  by Gross Margin.   The boundaryValueType attribute tells you if the boundary values are percentages of range from min to max of all values or if they are absolute values that will match the data.  Since borders and material effects cannot be linearly interpolated, they are included here.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="v2_colorByValueEntry" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_conditionalSolidPalette">
		<xs:annotation>
			<xs:documentation>Conditionally change the bar color or style.  If no matching condiition is found, the next palette entry is used.  This element is modeled from named conditional styles.  The showInLegend attribute indicates whether or not a legend entry should be generated for each condition.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:choice maxOccurs="unbounded">
					<xs:element name="v2_advancedCondition">
						<xs:annotation>
							<xs:documentation>A report expression is used to choose the pie palette entry.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:all>
								<xs:element name="v2_conditionalCases">
									<xs:annotation>
										<xs:documentation>Container for list of advanced conditions in the pie conditional palette.</xs:documentation>
									</xs:annotation>
									<xs:complexType>
										<xs:sequence>
											<xs:element name="v2_conditionalCase" maxOccurs="unbounded">
												<xs:annotation>
													<xs:documentation>Individual report condition case.  If the child condition is true, use the child piepalette entry.</xs:documentation>
												</xs:annotation>
												<xs:complexType>
													<xs:all>
														<xs:element ref="reportCondition"/>
														<xs:element ref="v2_solidPaletteEntry"/>
														<xs:element ref="v2_conditionalPaletteEntryLabel" minOccurs="0"/>
													</xs:all>
												</xs:complexType>
											</xs:element>
										</xs:sequence>
									</xs:complexType>
								</xs:element>
							</xs:all>
						</xs:complexType>
					</xs:element>
					<xs:element name="v2_rangeCondition">
						<xs:annotation>
							<xs:documentation>A numeric range is used to choose a bar area palette entry.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:all>
								<xs:element ref="conditionalDataItem"/>
								<xs:element name="v2_rangeConditionalCases" minOccurs="0">
									<xs:annotation>
										<xs:documentation>Container for the list of range conditional styles in the bar / area conditional palette.</xs:documentation>
									</xs:annotation>
									<xs:complexType>
										<xs:sequence>
											<xs:element name="v2_rangeConditionalCase" maxOccurs="unbounded">
												<xs:annotation>
													<xs:documentation>Individual range case.  These cases must be ordered according to the value attribute.</xs:documentation>
												</xs:annotation>
												<xs:complexType>
													<xs:all>
														<xs:element ref="v2_solidPaletteEntry"/>
														<xs:element ref="v2_conditionalPaletteEntryLabel" minOccurs="0"/>
													</xs:all>
													<xs:attribute name="value" type="xs:string" use="required">
														<xs:annotation>
															<xs:documentation source="doc_att_value_styleRange"/>
														</xs:annotation>
													</xs:attribute>
													<xs:attribute name="inclusive" type="xs:boolean" default="false"/>
												</xs:complexType>
											</xs:element>
										</xs:sequence>
									</xs:complexType>
								</xs:element>
								<xs:element name="v2_rangeConditionalRemaining" minOccurs="0">
									<xs:annotation>
										<xs:documentation>Any elements not satisfied by the range use this palette entry.</xs:documentation>
									</xs:annotation>
									<xs:complexType>
										<xs:all>
											<xs:element ref="v2_solidPaletteEntry"/>
											<xs:element ref="v2_conditionalPaletteEntryLabel" minOccurs="0"/>
										</xs:all>
									</xs:complexType>
								</xs:element>
							</xs:all>
							<xs:attribute name="type" use="required">
								<xs:annotation>
									<xs:documentation source="doc_att_rangeConditionalStyle_type"/>
								</xs:annotation>
								<xs:simpleType>
									<xs:restriction base="xs:NMTOKEN">
										<xs:enumeration value="number"/>
										<xs:enumeration value="date"/>
										<xs:enumeration value="dateTime"/>
										<xs:enumeration value="time">
											<xs:annotation>
												<xs:documentation source="doc_enum_rangeConditionalStyle_type_time"/>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="interval"/>
									</xs:restriction>
								</xs:simpleType>
							</xs:attribute>
						</xs:complexType>
					</xs:element>
					<xs:element name="v2_stringCondition">
						<xs:annotation>
							<xs:documentation>A condition based on string values, much like a case statement.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:all>
								<xs:element ref="conditionalDataItem"/>
								<xs:element name="v2_stringConditionalCases" minOccurs="0">
									<xs:annotation>
										<xs:documentation>List of string cases.  These can be explicit names or can be string matching criteria.</xs:documentation>
									</xs:annotation>
									<xs:complexType>
										<xs:sequence>
											<xs:choice maxOccurs="unbounded">
												<xs:element name="v2_stringValueList">
													<xs:annotation>
														<xs:documentation>List of strings.  The selectedValues attribute is only used by the authoring tool.</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:all>
															<xs:element ref="v2_stringValues"/>
															<xs:element ref="v2_solidPaletteEntry"/>
															<xs:element ref="v2_conditionalPaletteEntryLabel" minOccurs="0"/>
														</xs:all>
														<xs:attribute name="selectedValues" type="xs:boolean" default="true"/>
													</xs:complexType>
												</xs:element>
												<xs:element name="v2_stringCriteria">
													<xs:annotation>
														<xs:documentation>Rules to match names.</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:all>
															<xs:element ref="v2_stringValue"/>
															<xs:element ref="v2_solidPaletteEntry"/>
															<xs:element ref="v2_conditionalPaletteEntryLabel" minOccurs="0"/>
														</xs:all>
														<xs:attribute name="operator" use="required">
															<xs:simpleType>
																<xs:restriction base="xs:string">
																	<xs:enumeration value="contains"/>
																	<xs:enumeration value="like"/>
																	<xs:enumeration value="beginsWith"/>
																	<xs:enumeration value="endsWith"/>
																	<xs:enumeration value="notContains"/>
																	<xs:enumeration value="notLike"/>
																	<xs:enumeration value="notEndsWith"/>
																	<xs:enumeration value="notBeginsWith"/>
																</xs:restriction>
															</xs:simpleType>
														</xs:attribute>
													</xs:complexType>
												</xs:element>
											</xs:choice>
										</xs:sequence>
									</xs:complexType>
								</xs:element>
							</xs:all>
						</xs:complexType>
					</xs:element>
				</xs:choice>
			</xs:sequence>
			<xs:attribute name="showInLegend" default="show">
				<xs:annotation>
					<xs:documentation source="doc_ele_conditionalPalette_showInLegend"/>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="show">
							<xs:annotation>
								<xs:documentation source="doc_enum_showInLegend_show"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="hide">
							<xs:annotation>
								<xs:documentation source="doc_enum_conditionalPalette_hide"/>
							</xs:annotation>
						</xs:enumeration>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_conditionalPointPalette">
		<xs:annotation>
			<xs:documentation>Conditionally change the point color or style.  If no matching condiition is found, the next palette entry is used.  This element is modeled from named conditional styles.  PP is short for Point Palette. The showInLegend attribute indicates whether or not a legend entry should be generated for each condition.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:choice maxOccurs="unbounded">
					<xs:element name="v2_advancedPointCondition">
						<xs:annotation>
							<xs:documentation>A report expression is used to choose the point palette entry.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:all>
								<xs:element name="v2_pointCases">
									<xs:annotation>
										<xs:documentation>Container for list of advanced conditions in the point conditional palette.</xs:documentation>
									</xs:annotation>
									<xs:complexType>
										<xs:sequence>
											<xs:element name="v2_pointCase" maxOccurs="unbounded">
												<xs:annotation>
													<xs:documentation>Individual report condition case.  If the child condition is true, use the child point palette entry.</xs:documentation>
												</xs:annotation>
												<xs:complexType>
													<xs:all>
														<xs:element ref="reportCondition"/>
														<xs:element ref="v2_pointPaletteEntry"/>
														<xs:element ref="v2_conditionalPaletteEntryLabel" minOccurs="0"/>
													</xs:all>
												</xs:complexType>
											</xs:element>
										</xs:sequence>
									</xs:complexType>
								</xs:element>
							</xs:all>
						</xs:complexType>
					</xs:element>
					<xs:element name="v2_pointRangeCondition">
						<xs:annotation>
							<xs:documentation>A numeric range is used to choose a point palette entry.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:all>
								<xs:element ref="conditionalDataItem"/>
								<xs:element name="v2_pointRangeCases" minOccurs="0">
									<xs:annotation>
										<xs:documentation>Container for the list of range conditional styles in the point conditional palette.</xs:documentation>
									</xs:annotation>
									<xs:complexType>
										<xs:sequence>
											<xs:element name="v2_pointRangeCase" maxOccurs="unbounded">
												<xs:annotation>
													<xs:documentation>Individual range case.  These cases must be ordered according to the value attribute.</xs:documentation>
												</xs:annotation>
												<xs:complexType>
													<xs:all>
														<xs:element ref="v2_pointPaletteEntry"/>
														<xs:element ref="v2_conditionalPaletteEntryLabel" minOccurs="0"/>
													</xs:all>
													<xs:attribute name="value" type="xs:string" use="required">
														<xs:annotation>
															<xs:documentation source="doc_att_value_styleRange"/>
														</xs:annotation>
													</xs:attribute>
													<xs:attribute name="inclusive" type="xs:boolean" default="false"/>
												</xs:complexType>
											</xs:element>
										</xs:sequence>
									</xs:complexType>
								</xs:element>
								<xs:element name="v2_pointRangeRemaining" minOccurs="0">
									<xs:annotation>
										<xs:documentation>Any elements not satisfied by the range use this palette entry.</xs:documentation>
									</xs:annotation>
									<xs:complexType>
										<xs:all>
											<xs:element ref="v2_pointPaletteEntry"/>
											<xs:element ref="v2_conditionalPaletteEntryLabel" minOccurs="0"/>
										</xs:all>
									</xs:complexType>
								</xs:element>
							</xs:all>
							<xs:attribute name="type" use="required">
								<xs:annotation>
									<xs:documentation source="doc_att_rangeConditionalStyle_type"/>
								</xs:annotation>
								<xs:simpleType>
									<xs:restriction base="xs:NMTOKEN">
										<xs:enumeration value="number"/>
										<xs:enumeration value="date"/>
										<xs:enumeration value="dateTime"/>
										<xs:enumeration value="time">
											<xs:annotation>
												<xs:documentation source="doc_enum_rangeConditionalStyle_type_time"/>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="interval"/>
									</xs:restriction>
								</xs:simpleType>
							</xs:attribute>
						</xs:complexType>
					</xs:element>
					<xs:element name="v2_pointStringCondition">
						<xs:annotation>
							<xs:documentation>A condition based on string values, much like a case statement.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:all>
								<xs:element ref="conditionalDataItem"/>
								<xs:element name="v2_pointStringCases" minOccurs="0">
									<xs:annotation>
										<xs:documentation>List of string cases.  These can be explicit names or can be string matching criteria.</xs:documentation>
									</xs:annotation>
									<xs:complexType>
										<xs:sequence>
											<xs:choice maxOccurs="unbounded">
												<xs:element name="v2_pointStringValueList">
													<xs:annotation>
														<xs:documentation>List of strings.  The selectedValues attribute is only used by the authoring tool.</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:all>
															<xs:element ref="v2_stringValues"/>
															<xs:element ref="v2_pointPaletteEntry"/>
															<xs:element ref="v2_conditionalPaletteEntryLabel" minOccurs="0"/>
														</xs:all>
														<xs:attribute name="selectedValues" type="xs:boolean" default="true"/>
													</xs:complexType>
												</xs:element>
												<xs:element name="v2_pointStringCriteria">
													<xs:annotation>
														<xs:documentation>Rules to match names.</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:all>
															<xs:element ref="v2_stringValue"/>
															<xs:element ref="v2_pointPaletteEntry"/>
															<xs:element ref="v2_conditionalPaletteEntryLabel" minOccurs="0"/>
														</xs:all>
														<xs:attribute name="operator" use="required">
															<xs:simpleType>
																<xs:restriction base="xs:string">
																	<xs:enumeration value="contains"/>
																	<xs:enumeration value="like"/>
																	<xs:enumeration value="beginsWith"/>
																	<xs:enumeration value="endsWith"/>
																	<xs:enumeration value="notContains"/>
																	<xs:enumeration value="notLike"/>
																	<xs:enumeration value="notEndsWith"/>
																	<xs:enumeration value="notBeginsWith"/>
																</xs:restriction>
															</xs:simpleType>
														</xs:attribute>
													</xs:complexType>
												</xs:element>
											</xs:choice>
										</xs:sequence>
									</xs:complexType>
								</xs:element>
							</xs:all>
						</xs:complexType>
					</xs:element>
				</xs:choice>
			</xs:sequence>
			<xs:attribute name="showInLegend" default="show">
				<xs:annotation>
					<xs:documentation source="doc_ele_conditionalPalette_showInLegend"/>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="show">
							<xs:annotation>
								<xs:documentation source="doc_enum_showInLegend_show"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="hide">
							<xs:annotation>
								<xs:documentation source="doc_enum_conditionalPalette_hide"/>
							</xs:annotation>
						</xs:enumeration>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_conditionalLinePalette">
		<xs:annotation>
			<xs:documentation>Conditionally change the line and / or point color or style.  If no matching condiition is found, the next palette entry is used.  This element is modeled from named conditional styles.  LP is short for Line Palette. The showInLegend attribute indicates whether or not a legend entry should be generated for each condition.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:choice maxOccurs="unbounded">
					<xs:element name="v2_lineAdvancedCondition">
						<xs:annotation>
							<xs:documentation>A report expression is used to choose the line and / or point palette entry.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:all>
								<xs:element name="v2_lineCases">
									<xs:annotation>
										<xs:documentation>Container for list of advanced conditions in the line and / or point conditional palette.</xs:documentation>
									</xs:annotation>
									<xs:complexType>
										<xs:sequence>
											<xs:element name="v2_lineCase" maxOccurs="unbounded">
												<xs:annotation>
													<xs:documentation>Individual report condition case.  If the child condition is true, use the child point palette entry.</xs:documentation>
												</xs:annotation>
												<xs:complexType>
													<xs:all>
														<xs:element ref="reportCondition"/>
														<xs:element ref="v2_linePaletteEntry" minOccurs="0"/>
														<xs:element ref="v2_conditionalPaletteEntryLabel" minOccurs="0"/>
													</xs:all>
												</xs:complexType>
											</xs:element>
										</xs:sequence>
									</xs:complexType>
								</xs:element>
							</xs:all>
						</xs:complexType>
					</xs:element>
					<xs:element name="v2_lineRangeCondition">
						<xs:annotation>
							<xs:documentation>A numeric range is used to choose a point palette entry.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:all>
								<xs:element ref="conditionalDataItem"/>
								<xs:element name="v2_lineRangeCases" minOccurs="0">
									<xs:annotation>
										<xs:documentation>Container for the list of range conditional styles in the point conditional palette.</xs:documentation>
									</xs:annotation>
									<xs:complexType>
										<xs:sequence>
											<xs:element name="v2_lineRangeCase" maxOccurs="unbounded">
												<xs:annotation>
													<xs:documentation>Individual range case.  These cases must be ordered according to the value attribute.</xs:documentation>
												</xs:annotation>
												<xs:complexType>
													<xs:all>
														<xs:element ref="v2_linePaletteEntry" minOccurs="0"/>
														<xs:element ref="v2_conditionalPaletteEntryLabel" minOccurs="0"/>
													</xs:all>
													<xs:attribute name="value" type="xs:string" use="required">
														<xs:annotation>
															<xs:documentation source="doc_att_value_styleRange"/>
														</xs:annotation>
													</xs:attribute>
													<xs:attribute name="inclusive" type="xs:boolean" default="false"/>
												</xs:complexType>
											</xs:element>
										</xs:sequence>
									</xs:complexType>
								</xs:element>
								<xs:element name="v2_lineRangeRemaining" minOccurs="0">
									<xs:annotation>
										<xs:documentation>Any elements not satisfied by the range use this palette entry.</xs:documentation>
									</xs:annotation>
									<xs:complexType>
										<xs:all>
											<xs:element ref="v2_linePaletteEntry" minOccurs="0"/>
											<xs:element ref="v2_conditionalPaletteEntryLabel" minOccurs="0"/>
										</xs:all>
									</xs:complexType>
								</xs:element>
							</xs:all>
							<xs:attribute name="type" use="required">
								<xs:annotation>
									<xs:documentation source="doc_att_rangeConditionalStyle_type"/>
								</xs:annotation>
								<xs:simpleType>
									<xs:restriction base="xs:NMTOKEN">
										<xs:enumeration value="number"/>
										<xs:enumeration value="date"/>
										<xs:enumeration value="dateTime"/>
										<xs:enumeration value="time">
											<xs:annotation>
												<xs:documentation source="doc_enum_rangeConditionalStyle_type_time"/>
											</xs:annotation>
										</xs:enumeration>
										<xs:enumeration value="interval"/>
									</xs:restriction>
								</xs:simpleType>
							</xs:attribute>
						</xs:complexType>
					</xs:element>
					<xs:element name="v2_lineStringCondition">
						<xs:annotation>
							<xs:documentation>A condition based on string values, much like a case statement.</xs:documentation>
						</xs:annotation>
						<xs:complexType>
							<xs:all>
								<xs:element ref="conditionalDataItem"/>
								<xs:element name="v2_lineStringCases" minOccurs="0">
									<xs:annotation>
										<xs:documentation>List of string cases.  These can be explicit names or can be string matching criteria.</xs:documentation>
									</xs:annotation>
									<xs:complexType>
										<xs:sequence>
											<xs:choice maxOccurs="unbounded">
												<xs:element name="v2_lineStringValueList">
													<xs:annotation>
														<xs:documentation>List of strings.  The selectedValues attribute is only used by the authoring tool.</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:all>
															<xs:element ref="v2_stringValues"/>
															<xs:element ref="v2_linePaletteEntry" minOccurs="0"/>
															<xs:element ref="v2_conditionalPaletteEntryLabel" minOccurs="0"/>
														</xs:all>
														<xs:attribute name="selectedValues" type="xs:boolean" default="true">
															<xs:annotation>
																<xs:documentation>rn_internal_4.0"</xs:documentation>
															</xs:annotation>
														</xs:attribute>
													</xs:complexType>
												</xs:element>
												<xs:element name="v2_lineStringCriteria">
													<xs:annotation>
														<xs:documentation>Rules to match names.</xs:documentation>
													</xs:annotation>
													<xs:complexType>
														<xs:all>
															<xs:element ref="v2_stringValue"/>
															<xs:element ref="v2_linePaletteEntry" minOccurs="0"/>
															<xs:element ref="v2_conditionalPaletteEntryLabel" minOccurs="0"/>
														</xs:all>
														<xs:attribute name="operator" use="required">
															<xs:simpleType>
																<xs:restriction base="xs:string">
																	<xs:enumeration value="contains"/>
																	<xs:enumeration value="like"/>
																	<xs:enumeration value="beginsWith"/>
																	<xs:enumeration value="endsWith"/>
																	<xs:enumeration value="notContains"/>
																	<xs:enumeration value="notLike"/>
																	<xs:enumeration value="notEndsWith"/>
																	<xs:enumeration value="notBeginsWith"/>
																</xs:restriction>
															</xs:simpleType>
														</xs:attribute>
													</xs:complexType>
												</xs:element>
											</xs:choice>
										</xs:sequence>
									</xs:complexType>
								</xs:element>
							</xs:all>
						</xs:complexType>
					</xs:element>
				</xs:choice>
			</xs:sequence>
			<xs:attribute name="showInLegend" default="show">
				<xs:annotation>
					<xs:documentation source="doc_ele_conditionalPalette_showInLegend"/>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="show">
							<xs:annotation>
								<xs:documentation source="doc_enum_showInLegend_show"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="hide">
							<xs:annotation>
								<xs:documentation source="doc_enum_conditionalPalette_hide"/>
							</xs:annotation>
						</xs:enumeration>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_linePaletteEntry">
		<xs:annotation>
			<xs:documentation>Single line palette entry.  The fill will be used for both the line and markers (if defined).</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="v2_lineFill">
					<xs:annotation>
						<xs:documentation>Fill for the line.  This is a limited set of v2_fillEffects</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:choice>
							<xs:element ref="v2_linearGradient"/>
							<xs:element name="v2_color">
								<xs:complexType>
									<xs:attribute name="color" type="ColorType" default="black"/>
								</xs:complexType>
							</xs:element>
						</xs:choice>
						<xs:attribute name="defaultColor" type="ColorType" default="black"/>
					</xs:complexType>
				</xs:element>
				<xs:element ref="v2_pointPaletteEntry"/>
			</xs:all>
			<xs:attributeGroup ref="LineStyleAttributes2"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_pointPaletteEntry">
		<xs:annotation>
			<xs:documentation>Single palette entry for point type charts</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="v2_fillEffect"/>
			</xs:all>
			<xs:attributeGroup ref="MarkerShape2"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_solidPaletteEntry">
		<xs:annotation>
			<xs:documentation>Single entry in the palette</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="v2_fillEffect" minOccurs="0"/>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_conditionalPaletteEntryLabel">
		<xs:annotation>
			<xs:documentation>Label to be shown in the legend for a conditional palette entries</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element ref="v2_automaticLabel"/>
				<xs:element ref="v2_specifiedLabel"/>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_solidPaletteEntries">
		<xs:annotation>
			<xs:documentation>Collection of solid palette entires.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="v2_solidPaletteEntry" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_colorByValueEntry">
		<xs:annotation>
			<xs:documentation>The entry has both color and transparency.  This means that both color and transparency must be interpolated.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="v2_solidColor"/>
			</xs:all>
			<xs:attribute name="boundaryValue" type="xs:decimal" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_colorByValueMeasure" type="ColorByValuetMeasureType2">
		<xs:annotation>
			<xs:documentation>Mesure used during the determination of color by value.</xs:documentation>
		</xs:annotation>
	</xs:element>
	<xs:element name="v2_combinationTypeTooltips">
		<xs:complexType>
			<xs:attribute name="combinationTypeTooltipValueType" default="absolute">
				<xs:simpleType>
					<xs:restriction base="xs:NMTOKEN">
						<xs:enumeration value="absolute">
							<xs:annotation>
								<xs:documentation source="doc_enum_tooltipValueType_absolute"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="cumulative"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_basicTooltips">
		<xs:complexType/>
	</xs:element>
	<xs:element name="chartNodeMember">
		<xs:annotation>
			<xs:documentation>Styling of chart node members must be done by applying style to the appropriate containing element.  Typically this will either be an ordinalAxis or the legend.  The child style element is only used for data formating of display values.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="chartContents" minOccurs="0"/>
				<xs:element ref="chartLabel" minOccurs="0"/>
				<xs:element ref="propertyList" minOccurs="0"/>
				<xs:element ref="sortList" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
			</xs:all>
			<xs:attribute name="refDataItem" type="xs:string" use="required"/>
			<xs:attributeGroup ref="SolveOrderAttributes"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_percentAlongAxis">
		<xs:annotation>
			<xs:documentation>Position along the axis.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:attribute name="percentAlongAxis" type="xs:float" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_chartTextLabel">
		<xs:complexType>
			<xs:choice>
				<xs:element ref="v2_automaticLabel"/>
				<xs:element ref="v2_specifiedLabel"/>
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<xs:element name="v2_specifiedLabel" type="LocalizedTextType"/>
	<xs:element name="v2_axisColors">
		<xs:annotation>
			<xs:documentation>Represents the palette used for coloring the guage axis. Similar to guagePalette from PGSDK.</xs:documentation>
			<xs:documentation>Colors to display behind the axis range (numbers).</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element ref="v2_gradientColor" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="gaugePalette">
		<xs:annotation>
			<xs:documentation>Palette that controls the look of the dialog portion of a gauge.  You can do a tachometer effect, green, yellow and red.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:choice>
				<xs:element ref="continuousChartPalette"/>
				<xs:element name="discreteGaugePalette">
					<xs:annotation>
						<xs:documentation>Describes a list of discrete palette entries.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="discreteGaugePaletteEntry" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>Defines a single discrete palette entrie.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:attribute name="discreteGaugePaletteValue" type="xs:float" use="optional"/>
									<xs:attribute name="discreteGaugePaletteColor" type="ColorType" default="black"/>
									<xs:attribute name="transparency" default="0">
										<xs:simpleType>
											<xs:restriction base="xs:decimal">
												<xs:minInclusive value="0"/>
												<xs:maxInclusive value="100"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
			</xs:choice>
			<xs:attribute name="percentValues" type="xs:boolean" default="true"/>
		</xs:complexType>
	</xs:element>
	<!--==============  Interactive Charts  ======================================-->
	<xs:element name="viz">
		<xs:annotation>
			<xs:documentation>An externally defined visualization. The type attribute indicates the type of the chart e.g. vis.ibm.com.bubblechart</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="vizDataSets" minOccurs="0">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="vizDataSet" maxOccurs="unbounded">
								<xs:complexType>
									<xs:all>
										<xs:element name="vizCategories" minOccurs="0">
											<xs:annotation>
												<xs:documentation>Data items that are on the rows edge of the query generated. The order of the items is the nesting order on the edge.</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:sequence>
													<xs:element name="vizCategoryEdge" maxOccurs="unbounded">
														<xs:annotation>
															<xs:documentation>An edge definining category values.</xs:documentation>
														</xs:annotation>
														<xs:complexType>
															<xs:all>
																<xs:element name="vizCategoryLevels">
																	<xs:annotation>
																		<xs:documentation>Nested levels in the category edge</xs:documentation>
																	</xs:annotation>
																	<xs:complexType>
																		<xs:sequence>
																			<xs:choice maxOccurs="unbounded">
																				<xs:element name="vizCategoryLevel">
																					<xs:annotation>
																						<xs:documentation>Represents a level of unioned values in the query. The fields are mapped to certain sets of values in this level.</xs:documentation>
																					</xs:annotation>
																					<xs:complexType>
																						<xs:sequence>
																							<xs:element name="vizCategoryField" maxOccurs="unbounded">
																								<xs:annotation>
																									<xs:documentation>Maps data item to viz field. idField must reference a viz field defined in the edge or a value field if the data item is numeric</xs:documentation>
																								</xs:annotation>
																								<xs:complexType>
																									<xs:all>
																										<xs:element name="vizCategoryDataItems" minOccurs="0">
																											<xs:annotation>
																												<xs:documentation>Data items that make up the set of values for the categorical field. The data items both sets and measures are unioned together to form a set of values.</xs:documentation>
																											</xs:annotation>
																											<xs:complexType>
																												<xs:sequence>
																													<xs:element name="vizCategoryDataItem" maxOccurs="unbounded">
																														<xs:complexType>
																															<xs:all>
																																<xs:element name="style" minOccurs="0">
																																	<xs:annotation>
																																		<xs:appinfo>subtype</xs:appinfo>
																																		<xs:documentation source="doc_ele_style_dataFormat"/>
																																	</xs:annotation>
																																	<xs:complexType>
																																		<xs:all>
																																			<xs:element ref="dataFormat" minOccurs="0"/>
																																		</xs:all>
																																	</xs:complexType>
																																</xs:element>
																																<xs:element name="vizValueStyle" minOccurs="0">
																																	<xs:annotation>
																																		<xs:documentation>Data formatting for the vizValues associated with this category data item.</xs:documentation>
																																	</xs:annotation>
																																	<xs:complexType>
																																		<xs:all>
																																			<xs:element name="style" minOccurs="0">
																																				<xs:annotation>
																																					<xs:appinfo>subtype</xs:appinfo>
																																					<xs:documentation source="doc_ele_style_dataFormat"/>
																																				</xs:annotation>
																																				<xs:complexType>
																																					<xs:all>
																																						<xs:element ref="dataFormat" minOccurs="0"/>
																																					</xs:all>
																																				</xs:complexType>
																																			</xs:element>
																																		</xs:all>
																																	</xs:complexType>
																																</xs:element>
																																<xs:element ref="sortList" minOccurs="0"/>
																																<xs:element ref="XMLAttributes" minOccurs="0"/>
																															</xs:all>
																															<xs:attribute name="refDataItem" type="xs:string" use="required"/>
																														</xs:complexType>
																													</xs:element>
																												</xs:sequence>
																											</xs:complexType>
																										</xs:element>
																										<xs:element ref="vizLabel" minOccurs="0">
																											<xs:annotation>
																												<xs:documentation>Defines a label for the element to be used as the field label. When not specified the label will be determined from the default labels for the associated data items.</xs:documentation>
																											</xs:annotation>
																										</xs:element>
																										<xs:element ref="XMLAttributes" minOccurs="0"/>
																										<xs:element name="vizEmptyFieldItemLabel" type="LocalizedTextType" minOccurs="0">
																											<xs:annotation>
																												<xs:documentation>Defines a label to be used for the field item label if there are no vizCategoryDataItems. When not specified the label will either be empty, or if there is a single vizValue, show its label.</xs:documentation>
																											</xs:annotation>
																										</xs:element>
																									</xs:all>
																									<xs:attribute name="idField" type="xs:string" use="required"/>
																									<xs:attribute name="valueRange" use="required">
																										<xs:annotation>
																											<xs:documentation>The min/max range of the category field generated will the one of
- all: full set of values 
- filtered: set of values that is visible for the user for the viz (in a non AR report, this is the same as all)</xs:documentation>
																										</xs:annotation>
																										<xs:simpleType>
																											<xs:restriction base="xs:string">
																												<xs:enumeration value="all">
																													<xs:annotation>
																														<xs:documentation source="doc_enum_all_valuerange"/>
																													</xs:annotation>
																												</xs:enumeration>
																												<xs:enumeration value="filtered">
																													<xs:annotation>
																														<xs:documentation source="doc_enum_filtered_valuerange"/>
																													</xs:annotation>
																												</xs:enumeration>
																											</xs:restriction>
																										</xs:simpleType>
																									</xs:attribute>
																								</xs:complexType>
																							</xs:element>
																						</xs:sequence>
																					</xs:complexType>
																				</xs:element>
																				<xs:element name="vizCategoryHiddenLevel">
																					<xs:annotation>
																						<xs:documentation>Levels on this edge that are not visually used in the viz but can be used to filter the data interactively or for setting of variables. By default, put at lower levels so that they do not interfere with sorting. Only used in Active Reports.</xs:documentation>
																					</xs:annotation>
																					<xs:complexType>
																						<xs:all>
																							<xs:element ref="XMLAttributes" minOccurs="0"/>
																						</xs:all>
																						<xs:attribute name="refDataItem" type="xs:string" use="required"/>
																					</xs:complexType>
																				</xs:element>
																			</xs:choice>
																		</xs:sequence>
																	</xs:complexType>
																</xs:element>
																<xs:element ref="XMLAttributes" minOccurs="0"/>
															</xs:all>
															<xs:attribute name="refEdge" type="xs:string" use="required"/>
														</xs:complexType>
													</xs:element>
												</xs:sequence>
											</xs:complexType>
										</xs:element>
										<xs:element name="vizValues" minOccurs="0">
											<xs:annotation>
												<xs:documentation>Values that are used in the viz. The data items will be unioned on to the columns edge of the query generated. The category(rows) edge of the query will have a higher solve order than the values(columns) edge.</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:sequence>
													<xs:choice maxOccurs="unbounded">
														<xs:element name="vizValue">
															<xs:annotation>
																<xs:documentation>Represents a value in the viz. Can be one of measure,  member or tuple. Maps data item to a value field in viz.</xs:documentation>
															</xs:annotation>
															<xs:complexType>
																<xs:all>
																	<xs:element name="vizValueRange" minOccurs="0">
																		<xs:complexType>
																			<xs:choice>
																				<xs:element name="vizValueRangeComputed">
																					<xs:complexType>
																						<xs:attribute name="rangeData" use="required">
																							<xs:annotation>
																								<xs:documentation>The min/max range of the value field generated will the one of
- full set of values generated for all details in a master/detail
- set of values generate for an individual detail in a master/detail  (if there is not master, then master and detail are the same)
- set of values that is visible for the user for the viz (in a non AR report, this is the same as detail</xs:documentation>
																							</xs:annotation>
																							<xs:simpleType>
																								<xs:restriction base="xs:string">
																									<xs:enumeration value="all">
																										<xs:annotation>
																											<xs:documentation source="doc_enum_all_vizValueRangeComputed"/>
																										</xs:annotation>
																									</xs:enumeration>
																									<xs:enumeration value="allDetails"/>
																									<xs:enumeration value="filtered">
																										<xs:annotation>
																											<xs:documentation source="doc_enum_filtered_vizValueRangeComputed"/>
																										</xs:annotation>
																									</xs:enumeration>
																								</xs:restriction>
																							</xs:simpleType>
																						</xs:attribute>
																						<xs:attribute name="rangeIncludesZero" type="xs:boolean" default="true">
																							<xs:annotation>
																								<xs:documentation>Ensure that the min/max range generated for this field will always contain 0</xs:documentation>
																							</xs:annotation>
																						</xs:attribute>
																					</xs:complexType>
																				</xs:element>
																				<xs:element name="vizValueRangeSpecified">
																					<xs:complexType>
																						<xs:attribute name="min" type="xs:decimal" use="required"/>
																						<xs:attribute name="max" type="xs:decimal" use="required"/>
																					</xs:complexType>
																				</xs:element>
																			</xs:choice>
																		</xs:complexType>
																	</xs:element>
																	<xs:element name="style" minOccurs="0">
																		<xs:annotation>
																			<xs:appinfo>subtype</xs:appinfo>
																			<xs:documentation source="doc_ele_style_dataFormat"/>
																		</xs:annotation>
																		<xs:complexType>
																			<xs:all>
																				<xs:element ref="dataFormat" minOccurs="0"/>
																			</xs:all>
																		</xs:complexType>
																	</xs:element>
																	<xs:element ref="vizLabel" minOccurs="0"/>
																	<xs:element ref="XMLAttributes" minOccurs="0"/>
																</xs:all>
																<xs:attribute name="idField" type="xs:string" use="required"/>
																<xs:attribute name="refDataItem" type="xs:string" use="required"/>
																<xs:attribute name="rollupMethod" default="total">
																	<xs:simpleType>
																		<xs:restriction base="xs:string">
																			<xs:enumeration value="total"/>
																			<xs:enumeration value="minimum"/>
																			<xs:enumeration value="maximum"/>
																			<xs:enumeration value="average"/>
																		</xs:restriction>
																	</xs:simpleType>
																</xs:attribute>
																<xs:attribute name="decimal" type="xs:boolean" default="false"/>
															</xs:complexType>
														</xs:element>
														<xs:element name="vizHiddenValue">
															<xs:annotation>
																<xs:documentation>Represents a value in the viz that is not visually used in the viz but is available to filter the data interactively. Only used in Active Reports.</xs:documentation>
															</xs:annotation>
															<xs:complexType>
																<xs:all>
																	<xs:element ref="XMLAttributes" minOccurs="0"/>
																</xs:all>
																<xs:attribute name="refDataItem" type="xs:string" use="required"/>
																<xs:attribute name="decimal" type="xs:boolean" default="false"/>
																<xs:attribute name="rollupMethod" default="total">
																	<xs:simpleType>
																		<xs:restriction base="xs:string">
																			<xs:enumeration value="total"/>
																			<xs:enumeration value="minimum"/>
																			<xs:enumeration value="maximum"/>
																			<xs:enumeration value="average"/>
																		</xs:restriction>
																	</xs:simpleType>
																</xs:attribute>
															</xs:complexType>
														</xs:element>
													</xs:choice>
												</xs:sequence>
											</xs:complexType>
										</xs:element>
										<xs:element name="vizDefaultMeasure" minOccurs="0">
											<xs:annotation>
												<xs:documentation>The default measure for the query generated for the viz. This allows queries that do not have measures for the vizValues to resolve to a value.</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:attribute name="refDataItem" type="xs:string" use="required"/>
											</xs:complexType>
										</xs:element>
										<xs:element ref="appContainerFilter" minOccurs="0"/>
										<xs:element ref="appContainerSelect" minOccurs="0"/>
										<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
										<xs:element ref="reportDrills" minOccurs="0"/>
										<xs:element ref="masterDetailLinks" minOccurs="0"/>
										<xs:element ref="XMLAttributes" minOccurs="0"/>
										<xs:element ref="appDrills" minOccurs="0"/>
										<xs:element name="appVizDataSetProperties" minOccurs="0">
											<xs:complexType>
												<xs:attribute name="showHover" type="xs:boolean" default="true"/>
											</xs:complexType>
										</xs:element>
										<xs:element ref="dataStore" minOccurs="0"/>
									</xs:all>
									<xs:attribute name="idDataSet" type="xs:string" use="required">
										<xs:annotation>
											<xs:documentation>id for the data set definition in the RAVE spec</xs:documentation>
										</xs:annotation>
									</xs:attribute>
									<xs:attribute name="refQuery" type="xs:string" use="required"/>
									<xs:attribute name="name" type="xs:string" use="required"/>
									<xs:attribute name="showTooltips" type="xs:boolean" default="true"/>
									<xs:attribute name="maxHotspots" type="xs:nonNegativeInteger"/>
								</xs:complexType>
								<xs:unique name="dataSetDataItemUniqueness">
									<xs:selector xpath="rspec:vizCategories/rspec:vizCategoryEdge/rspec:vizCategoryFilterLevels/rspec:vizCategoryFilterLevel | rspec:vizCategories/rspec:vizCategoryEdge/rspec:vizCategoryLevels/rspec:vizCategoryLevel/rspec:vizCategoryField/rspec:vizCategoryDataItems/rspec:vizCategoryDataItem | rspec:vizValues/rspec:vizValue"/>
									<xs:field xpath="@refDataItem"/>
								</xs:unique>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element ref="vizPropertyValues" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="alternateText" minOccurs="0"/>
				<xs:element name="style" minOccurs="0">
					<xs:annotation>
						<xs:appinfo>subtype</xs:appinfo>
						<xs:documentation source="doc_ele_style_dataFormat"/>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="dataFormat" minOccurs="0"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element name="appVizProperties" minOccurs="0">
					<xs:complexType>
						<xs:attribute name="clickable" type="xs:boolean" default="false"/>
					</xs:complexType>
				</xs:element>
				<xs:element ref="appOnSelectSetVariableValues" minOccurs="0"/>
			</xs:all>
			<xs:attribute name="name" type="xs:string" use="required"/>
			<xs:attribute name="type" type="xs:string" use="required">
				<xs:annotation>
					<xs:documentation>Indicates the type of the chart e.g. vis.ibm.com.bubblechart</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attributeGroup ref="AppOrientationControlAttributes"/>
			<xs:attribute name="outputType" use="required">
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="static">
							<xs:annotation>
								<xs:documentation source="doc_enum_static_viz"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="javascript"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="vizLabel" type="LocalizedTextType"/>
	<xs:element name="vizPropertyValues">
		<xs:complexType>
			<xs:sequence>
				<xs:group ref="vizPropertyValuesGroup" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
		<xs:unique name="chartTypePropertyUniqueness">
			<xs:selector xpath=".//*"/>
			<xs:field xpath="@name"/>
		</xs:unique>
	</xs:element>
	<xs:group name="vizPropertyValuesGroup">
		<xs:choice>
			<xs:element name="vizPropertyBooleanValue">
				<xs:complexType>
					<xs:simpleContent>
						<xs:extension base="xs:boolean">
							<xs:attribute name="name" type="xs:string" use="required"/>
						</xs:extension>
					</xs:simpleContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="vizPropertyStringValue">
				<xs:complexType>
					<xs:simpleContent>
						<xs:extension base="TextType">
							<xs:attribute name="name" type="xs:string" use="required"/>
						</xs:extension>
					</xs:simpleContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="vizPropertyIntegerValue">
				<xs:complexType>
					<xs:simpleContent>
						<xs:extension base="xs:integer">
							<xs:attribute name="name" type="xs:string" use="required"/>
						</xs:extension>
					</xs:simpleContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="vizPropertyDecimalValue">
				<xs:complexType>
					<xs:simpleContent>
						<xs:extension base="xs:decimal">
							<xs:attribute name="name" type="xs:string" use="required"/>
						</xs:extension>
					</xs:simpleContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="vizPropertyEnumValue">
				<xs:complexType>
					<xs:simpleContent>
						<xs:extension base="xs:string">
							<xs:attribute name="name" type="xs:string" use="required"/>
						</xs:extension>
					</xs:simpleContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="vizPropertyColorValue">
				<xs:complexType>
					<xs:attribute name="r" use="required">
						<xs:simpleType>
							<xs:restriction base="xs:nonNegativeInteger">
								<xs:maxInclusive value="255"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="g" use="required">
						<xs:simpleType>
							<xs:restriction base="xs:nonNegativeInteger">
								<xs:maxInclusive value="255"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="b" use="required">
						<xs:simpleType>
							<xs:restriction base="xs:nonNegativeInteger">
								<xs:maxInclusive value="255"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="a" default="1">
						<xs:simpleType>
							<xs:restriction base="xs:decimal">
								<xs:minInclusive value="0"/>
								<xs:maxInclusive value="1"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="name" type="xs:string" use="required"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="vizPropertyFontValue">
				<xs:complexType>
					<xs:attribute name="name" type="xs:string" use="required"/>
					<xs:attribute name="family" type="xs:string" use="optional"/>
					<xs:attribute name="size" type="xs:string" use="optional"/>
					<xs:attribute name="weight" use="optional">
						<xs:simpleType>
							<xs:restriction base="xs:NMTOKEN">
								<xs:enumeration value="normal"/>
								<xs:enumeration value="bold"/>
								<xs:enumeration value="inherit"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="style" use="optional">
						<xs:simpleType>
							<xs:restriction base="xs:NMTOKEN">
								<xs:enumeration value="inherit"/>
								<xs:enumeration value="normal"/>
								<xs:enumeration value="italic"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="vizPropertyLengthValue">
				<xs:complexType>
					<xs:simpleContent>
						<xs:extension base="CSSLength">
							<xs:attribute name="name" type="xs:string" use="required"/>
						</xs:extension>
					</xs:simpleContent>
				</xs:complexType>
			</xs:element>
		</xs:choice>
	</xs:group>
</xs:schema>
