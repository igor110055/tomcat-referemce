<?xml version="1.0" encoding="UTF-8"?>
<!--
 Licensed Materials - Property of IBM
 IBM Cognos Products: rspec
 (C) Copyright IBM Corp. 2003, 2014
 US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
--> 
<!--
    Copyright (C) 2008 Cognos ULC, an IBM Company. All rights reserved.
    Cognos (R) is a trademark of Cognos ULC, (formerly Cognos Incorporated).
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xs:include schemaLocation="V5_layoutbase.xsd"/>
	<xs:include schemaLocation="V5_chart.xsd"/>
	<xs:include schemaLocation="V5_prompt.xsd"/>
	<xs:group name="layoutElement">
		<xs:choice>
			<xs:element ref="list"/>
			<xs:element ref="crosstab"/>
			<xs:element ref="repeaterTable"/>
			<xs:element ref="repeater"/>
			<xs:element name="block">
				<xs:annotation>
					<xs:documentation>A Block represents a set of elements in a layout. It behaves similarly to a div or paragraph in HTML and MS Word. It follows the HTML definition of a div element.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:complexContent>
						<xs:extension base="GenericContainerElementType">
							<xs:attributeGroup ref="CommonLayoutAttributes"/>
						</xs:extension>
					</xs:complexContent>
				</xs:complexType>
			</xs:element>
			<xs:element name="table">
				<xs:annotation>
					<xs:documentation>Equivalenet to an HTML TABLE.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:all>
						<xs:element name="tableRows">
							<xs:complexType>
								<xs:sequence>
									<xs:element name="tableRow" maxOccurs="unbounded">
										<xs:annotation>
											<xs:documentation>Equivalent to an HTML TR.</xs:documentation>
										</xs:annotation>
										<xs:complexType>
											<xs:all>
												<xs:element name="tableCells">
													<xs:complexType>
														<xs:sequence>
															<xs:element name="tableCell" maxOccurs="unbounded">
																<xs:annotation>
																	<xs:documentation>Equivalent to an HTML TD.</xs:documentation>
																</xs:annotation>
																<xs:complexType>
																	<xs:complexContent>
																		<xs:extension base="GenericContainerSubElementType">
																			<xs:attributeGroup ref="DefaultLayoutStyleAttributes"/>
																			<xs:attribute name="colSpan" type="xs:positiveInteger" default="1">
																				<xs:annotation>
																					<xs:documentation>Count of columns the cell should span</xs:documentation>
																				</xs:annotation>
																			</xs:attribute>
																		</xs:extension>
																	</xs:complexContent>
																</xs:complexType>
															</xs:element>
														</xs:sequence>
													</xs:complexType>
												</xs:element>
												<xs:element ref="style" minOccurs="0"/>
												<xs:element ref="conditionalStyles" minOccurs="0"/>
												<xs:element ref="XMLAttributes" minOccurs="0"/>
											</xs:all>
											<xs:attributeGroup ref="DefaultLayoutStyleAttributes"/>
										</xs:complexType>
									</xs:element>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						<xs:element ref="conditionalStyles" minOccurs="0"/>
						<xs:element ref="XMLAttributes" minOccurs="0"/>
						<xs:element ref="style" minOccurs="0"/>
						<xs:element ref="conditionalRender" minOccurs="0"/>
					</xs:all>
					<xs:attributeGroup ref="CommonLayoutAttributes"/>
					<xs:attribute name="repeatOnPageBreak" type="xs:boolean" default="true">
						<xs:annotation>
							<xs:documentation>This property will control whether the table will repeat the rendering for the previous rows when it is broken across pages.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="textItem">
				<xs:annotation>
					<xs:documentation>This element is used to render text in the layout. The text to render is determined by the data source of the element. </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:all>
						<xs:element ref="dataSource"/>
						<xs:element ref="conditionalDataSources" minOccurs="0"/>
						<xs:element ref="reportDrills" minOccurs="0"/>
						<xs:element ref="style" minOccurs="0"/>
						<xs:element ref="conditionalStyles" minOccurs="0"/>
						<xs:element ref="conditionalRender" minOccurs="0"/>
						<xs:element ref="XMLAttributes" minOccurs="0"/>
					</xs:all>
					<xs:attribute name="maxCharacters" type="xs:positiveInteger" use="optional">
						<xs:annotation>
							<xs:documentation>The maximum number of characters that should be rendered. Default: Render all characters.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attribute name="useDetailValue" type="xs:boolean" default="false">
						<xs:annotation>
							<xs:documentation>This attribute affects the rendering of textItems that occur on a page but not inside of a list or repeater frame and if the page and list query context are the same.
If the value is true it will render the value for the last detail row of the list if the text item occurs in the page footer or the first detail row if it is outside the page footer.
If the value is false it will render the value for the current row the page is being rendered for.</xs:documentation>
						</xs:annotation>
					</xs:attribute>
					<xs:attributeGroup ref="CommonLayoutAttributes"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="image">
				<xs:annotation>
					<xs:documentation>This element is used to render an image in the layout. The URL for the image is determined by the data source of the element. </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:all>
						<xs:element ref="dataSource"/>
						<xs:element ref="conditionalDataSources" minOccurs="0"/>
						<xs:element ref="reportDrills" minOccurs="0"/>
						<xs:element ref="style" minOccurs="0"/>
						<xs:element ref="conditionalStyles" minOccurs="0"/>
						<xs:element ref="conditionalRender" minOccurs="0"/>
						<xs:element ref="XMLAttributes" minOccurs="0"/>
					</xs:all>
					<xs:attributeGroup ref="CommonLayoutAttributes"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="hyperlink">
				<xs:annotation>
					<xs:documentation>This element represents an HTML style anchor(hyperlink). The hyperlink dataSource defines the URL to be used for the hyperlink. The hyperlink also is a layout container and has layout elements contained within it.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:all>
						<xs:element ref="contents"/>
						<xs:element ref="dataSource"/>
						<xs:element ref="conditionalDataSources" minOccurs="0"/>
						<xs:element ref="style" minOccurs="0"/>
						<xs:element ref="conditionalStyles" minOccurs="0"/>
						<xs:element ref="conditionalRender" minOccurs="0"/>
						<xs:element ref="XMLAttributes" minOccurs="0"/>
					</xs:all>
					<xs:attributeGroup ref="CommonLayoutAttributes"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="button">
				<xs:annotation>
					<xs:documentation>This element represents an HTML style button hyperlink. The hyperlink dataSource defines the URL to be used for the hyperlink. The hyperlink also is a layout container and has layout elements contained within it.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:all>
						<xs:element ref="contents"/>
						<xs:element ref="dataSource"/>
						<xs:element ref="conditionalDataSources" minOccurs="0"/>
						<xs:element ref="style" minOccurs="0"/>
						<xs:element ref="conditionalStyles" minOccurs="0"/>
						<xs:element ref="conditionalRender" minOccurs="0"/>
						<xs:element ref="XMLAttributes" minOccurs="0"/>
					</xs:all>
					<xs:attributeGroup ref="CommonLayoutAttributes"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="promptButton">
				<xs:annotation>
					<xs:documentation>This element represents an HTML style button. The button can be used on a prompt page to intiate the navigation from page to page (e.g. next, previous). The prompt button also is a layout container and optionally has layout elements contained within it.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:all>
						<xs:element ref="contents"/>
						<xs:element ref="style" minOccurs="0"/>
						<xs:element ref="conditionalStyles" minOccurs="0"/>
						<xs:element ref="conditionalRender" minOccurs="0"/>
						<xs:element ref="XMLAttributes" minOccurs="0"/>
					</xs:all>
					<xs:attribute name="type">
						<xs:annotation>
							<xs:documentation>Identifies the type of then prompt button. If their are not contents to the prompt button, they type will dictate what text is rendered as the prompt button label.</xs:documentation>
							<xs:documentation source="doc_att_type_promptButton"/>
						</xs:annotation>
						<xs:simpleType>
							<xs:restriction base="xs:string">
								<xs:enumeration value="back"/>
								<xs:enumeration value="cancel"/>
								<xs:enumeration value="next"/>
								<xs:enumeration value="finish"/>
								<xs:enumeration value="reprompt"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attributeGroup ref="CommonLayoutAttributes"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="HTMLItem">
				<xs:annotation>
					<xs:documentation>This element is used to render HTML in the layout. The HTML may come from either a static or dynamic source. </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:all>
						<xs:element ref="dataSource"/>
						<xs:element ref="conditionalDataSources" minOccurs="0"/>
						<xs:element ref="conditionalRender" minOccurs="0"/>
						<xs:element ref="XMLAttributes" minOccurs="0"/>
					</xs:all>
					<xs:attributeGroup ref="NameLayoutAttributes"/>
					<xs:attributeGroup ref="DescriptionLayoutAttributes"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="richTextItem">
				<xs:annotation>
					<xs:documentation>This element is used to render HTML in the layout. The HTML may come from either a static or dynamic source. The difference between this element and HTMLItem is that a richTextIem will render in PDF whereas an HTMLItem will not. As well, the value for a richTextItem must validate against V5_richText.dtd.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:all>
						<xs:element ref="dataSource"/>
						<xs:element ref="conditionalDataSources" minOccurs="0"/>
						<xs:element ref="conditionalRender" minOccurs="0"/>
						<xs:element ref="XMLAttributes" minOccurs="0"/>
					</xs:all>
					<xs:attributeGroup ref="NameLayoutAttributes"/>
					<xs:attributeGroup ref="DescriptionLayoutAttributes"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="bookmark">
				<xs:annotation>
					<xs:documentation>A bookmark alllows for linking to a location in the rendered layout. The name of the bookmark is determined by its dataSource. It is the equivalent of a named anchor in HTML. (e.g. <A NAME="MyBookmark"/>)</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:all>
						<xs:element ref="dataSource"/>
						<xs:element ref="XMLAttributes" minOccurs="0"/>
					</xs:all>
				</xs:complexType>
			</xs:element>
			<xs:element name="fieldSet">
				<xs:annotation>
					<xs:documentation>A fieldSet is the equivalent of a group box in a windows app. </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:all>
						<xs:element ref="contents"/>
						<xs:element name="fieldSetCaption" type="GenericContainerSubElementType"/>
						<xs:element ref="style" minOccurs="0"/>
						<xs:element ref="conditionalStyles" minOccurs="0"/>
						<xs:element ref="conditionalRender" minOccurs="0"/>
						<xs:element ref="XMLAttributes" minOccurs="0"/>
					</xs:all>
					<xs:attribute name="showCaption" default="left">
						<xs:simpleType>
							<xs:restriction base="xs:string">
								<xs:enumeration value="left">
									<xs:annotation>
										<xs:documentation source="doc_enum_left_showCaption"/>
									</xs:annotation>
								</xs:enumeration>
								<xs:enumeration value="right">
									<xs:annotation>
										<xs:documentation source="doc_enum_right_showCaption"/>
									</xs:annotation>
								</xs:enumeration>
								<xs:enumeration value="center"/>
								<xs:enumeration value="hide"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attributeGroup ref="CommonLayoutAttributes"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="conditionalBlocks">
				<xs:annotation>
					<xs:documentation>This element will conditionally render one block (conditionalBlock) from a set of blocks. Any styling applied to this element will be appied to each conditionalBlock when  rendered.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:all>
						<xs:element name="conditionalBlockCases" minOccurs="0">
							<xs:complexType>
								<xs:sequence>
									<xs:element name="conditionalBlock" maxOccurs="unbounded">
										<xs:complexType>
											<xs:complexContent>
												<xs:extension base="GenericContainerSubElementType">
													<xs:attributeGroup ref="ConditionalPartAttributes"/>
													<xs:attributeGroup ref="DefaultLayoutStyleAttributes"/>
												</xs:extension>
											</xs:complexContent>
										</xs:complexType>
									</xs:element>
								</xs:sequence>
								<xs:attributeGroup ref="ConditionalOwnerAttributes"/>
							</xs:complexType>
						</xs:element>
						<xs:element name="conditionalBlockDefault">
							<xs:complexType>
								<xs:complexContent>
									<xs:extension base="GenericContainerSubElementType">
										<xs:attributeGroup ref="DefaultLayoutStyleAttributes"/>
									</xs:extension>
								</xs:complexContent>
							</xs:complexType>
						</xs:element>
						<xs:element ref="XMLAttributes" minOccurs="0"/>
					</xs:all>
					<xs:attributeGroup ref="NameLayoutAttributes"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="layoutComponentRef">
				<xs:annotation>
					<xs:documentation>The element is used to reference a named layout element from within this report or another report. The layout element will be rendered in its place with no containing structure.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:all>
						<xs:element ref="reportPath" minOccurs="0"/>
						<xs:element name="layoutComponent" minOccurs="0">
							<xs:annotation>
								<xs:documentation>If the component referenced is in another report, then this optional element may be used to hold a copy of the referenced component. When rendering, this copy will be used if available. This component allows for design time references versus run time references.</xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:group ref="layoutElement"/>
							</xs:complexType>
						</xs:element>
						<xs:element name="layoutComponentOverrides" minOccurs="0">
							<xs:annotation>
								<xs:documentation>Optionally, any named layout element within the layout component being referenced may be overridden with a different layout element. </xs:documentation>
							</xs:annotation>
							<xs:complexType>
								<xs:sequence>
									<xs:element name="layoutComponentOverride" maxOccurs="unbounded">
										<xs:complexType>
											<xs:group ref="layoutElement" minOccurs="0"/>
											<xs:attribute name="refLayoutElement" type="xs:string" use="required"/>
										</xs:complexType>
									</xs:element>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						<xs:element ref="XMLAttributes" minOccurs="0"/>
					</xs:all>
					<xs:attribute name="refLayoutElement" type="xs:string" use="required"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="CMMMap">
				<xs:annotation>
					<xs:documentation>Identifies a map in Metrics Manager (CMM). The cmmID attribute identifies the map in CMM and is used  by the server to construct a full CMM request.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="cmmID" type="xs:string" use="required"/>
					<xs:attributeGroup ref="DescriptionLayoutAttributes"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="asOfTime">
				<xs:annotation>
					<xs:documentation>This element is used to determine the value to use for the asOfTime property in the object model. The value of the first asOfTime encountered during rendering  will be used to set the asOfTime preoprety in the BAOM.
More...</xs:documentation>
					<xs:documentation>Any report output is a snapshot of data at a particular point in time. Some reports reflect the snapshot of data at the time the report is run. However, most production reports reflect a particular time period, which is often described by the last day of that period; for example, the last day of the month for a monthly report. In that case, even though the August Monthly report is run on September 5 (when all the data have been vetted), the report actually reflects a month-long time period that ends on the last day of August. It is required that the output reflect the last [business] day in August, rather than the actual run date of September 5.
This element allows the report author to define the value to be used for the asOfTime report object property, as well as the return value for the asOfDate() and asOfTime() report functions. The value is defined via a report expression, and is most likely derived from a query item or a prompt value. The result of this asOfTime report expression must be date-time. If this element is omitted, the system time at the beginning of report execution will be used. </xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:all>
						<xs:element ref="reportExpression"/>
					</xs:all>
				</xs:complexType>
			</xs:element>
			<xs:group ref="chartElement"/>
			<xs:group ref="promptElement"/>
		</xs:choice>
	</xs:group>
	<xs:element name="layouts">
		<xs:complexType>
			<xs:all>
				<xs:element name="layout" type="LayoutType"/>
				<xs:element name="conditionalLayouts" minOccurs="0">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="conditionalLayout" maxOccurs="unbounded">
								<xs:complexType>
									<xs:complexContent>
										<xs:extension base="LayoutType">
											<xs:attributeGroup ref="ConditionalPartAttributes"/>
										</xs:extension>
									</xs:complexContent>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attributeGroup ref="ConditionalOwnerAttributes"/>
					</xs:complexType>
				</xs:element>
			</xs:all>
		</xs:complexType>
	</xs:element>
	<xs:element name="pageSet">
		<xs:annotation>
			<xs:documentation>A page set allows for the controlling of the rendering of the pages and/or pageSets it contains. The pages (or child page sets) are rendered according to a grouping structure defined for the page set.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="pageOverallGroup" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines the overall group of the page set (i.e. start of data, end of data)</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="headerPages" minOccurs="0"/>
							<xs:element ref="footerPages" minOccurs="0"/>
							<xs:element ref="propertyList" minOccurs="0"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element name="pageGroups" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines the grouping structure of the page set.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="pageGroup" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>Defines a group in the page set.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element ref="headerPages" minOccurs="0"/>
										<xs:element ref="footerPages" minOccurs="0"/>
										<xs:element ref="propertyList" minOccurs="0"/>
										<xs:element ref="sortList" minOccurs="0"/>
									</xs:all>
									<xs:attribute name="refDataItem" type="xs:string" use="required"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="detailPages">
					<xs:annotation>
						<xs:documentation>Detail pages are rendered within the lowest level grouping of the page set. All detail rows from the page set query within the lowest level grouping are available for rendering. If there are no page groupings, then the detail pages will be rendered for each row of the result set. The detail page may contain layout elements that use the same query as the pageSet.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:choice minOccurs="0" maxOccurs="unbounded">
								<xs:element ref="page"/>
								<xs:element ref="pageSet"/>
							</xs:choice>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="propertyList" minOccurs="0"/>
				<xs:element ref="sortList" minOccurs="0"/>
			</xs:all>
			<xs:attribute name="name" type="xs:string" use="required"/>
			<xs:attribute name="refQuery" type="xs:string" use="required"/>
			<xs:attributeGroup ref="ResetPageAttributes"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="page">
		<xs:annotation>
			<xs:documentation>The refQuery attribute of page has the following behavior:

If the page contains a list that references the same query as the page, then the page will behave like the list page header in that it will render the value for the first row rendered in the list. The rendering of the list itself will be unaffected by this. 

If the page does not contain a list that references the same query, then a singleton result set will be generated for the page and only the first row will be used for rendering elements on the page. 

If the refQuery attribute is defined then the page can have a propertyList, otherwise the propertyList is ignored.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="pageBody">
					<xs:complexType>
						<xs:complexContent>
							<xs:extension base="GenericContainerSubElementType">
								<xs:attributeGroup ref="DefaultLayoutStyleAttributes"/>
							</xs:extension>
						</xs:complexContent>
					</xs:complexType>
				</xs:element>
				<xs:element name="pageHeader" minOccurs="0">
					<xs:complexType>
						<xs:complexContent>
							<xs:extension base="GenericContainerSubElementType">
								<xs:attributeGroup ref="DefaultLayoutStyleAttributes"/>
							</xs:extension>
						</xs:complexContent>
					</xs:complexType>
				</xs:element>
				<xs:element name="pageFooter" minOccurs="0">
					<xs:complexType>
						<xs:complexContent>
							<xs:extension base="GenericContainerSubElementType">
								<xs:attributeGroup ref="DefaultLayoutStyleAttributes"/>
							</xs:extension>
						</xs:complexContent>
					</xs:complexType>
				</xs:element>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="propertyList" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
			</xs:all>
			<xs:attribute name="name" type="xs:string" use="required"/>
			<xs:attribute name="refQuery" type="xs:string">
				<xs:annotation>
					<xs:documentation>The refQuery attribute of page has the following behavior:

If the page contains a list that references the same query as the page, then the page will behave like the list page header in that it will render the value for the first row rendered in the list. The rendering of the list itself will be unaffected by this. 

If the page does not contain a list that references the same query, then a singleton result set will be generated for the page and only the first row will be used for rendering elements on the page. If the refQuery attribute is defined then the page can have a propertyList.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attributeGroup ref="DefaultLayoutStyleAttributes"/>
			<xs:attributeGroup ref="ResetPageAttributes"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="list">
		<xs:annotation>
			<xs:documentation>A list is used to present query results in a list fashion.

If a listColumnBody in the list contains another frame that uses the same query as this list, then the grouping strucutre of this list will section the inner frame. A frame that uses the same query anywhere else in the list will get its own result set.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="listColumns" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines the columns that are to be rendered for this list.  A list column may render the values of 0 or more member sets from the query. There is not a 1 to 1 relationship between a list column and a member set from a query.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="listColumn" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>Defines a list column.  </xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element name="listColumnTitle">
											<xs:annotation>
												<xs:documentation>Defines the column title of the column.

The precedence of styling is: 
class style, 
listColumnStyle, 
listColumnTitleStyle, 
listColumn,  
style, 
conditionalStyles.</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:all>
													<xs:element ref="contents"/>
													<xs:element ref="style" minOccurs="0"/>
													<xs:element ref="conditionalStyles" minOccurs="0"/>
													<xs:element ref="XMLAttributes" minOccurs="0"/>
												</xs:all>
												<xs:attributeGroup ref="DefaultLayoutStyleAttributes"/>
											</xs:complexType>
										</xs:element>
										<xs:element name="listColumnBody">
											<xs:annotation>
												<xs:documentation>Defines the column body of the column. Any styling applies to the listColumnBody but also any header/footer cell that spans only this column. 

The precedence of styling is:
class style, 
listColumnStyle, 
listColumnBodyStyle, 
listColumn,  
style, 
conditionalStyles.</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:all>
													<xs:element ref="contents"/>
													<xs:element name="listColumnRowSpan" minOccurs="0">
														<xs:annotation>
															<xs:documentation>Indicates that the column cells should span the rows of the indicated group. If refDataItem is omitted, then cells should span all rows (i.e. the overall group).</xs:documentation>
														</xs:annotation>
														<xs:complexType>
															<xs:attribute name="refDataItem" type="xs:string" use="optional"/>
														</xs:complexType>
													</xs:element>
													<xs:element ref="style" minOccurs="0"/>
													<xs:element ref="conditionalStyles" minOccurs="0"/>
													<xs:element ref="XMLAttributes" minOccurs="0"/>
												</xs:all>
												<xs:attributeGroup ref="DefaultLayoutStyleAttributes"/>
											</xs:complexType>
										</xs:element>
										<xs:element ref="style" minOccurs="0"/>
										<xs:element ref="conditionalStyles" minOccurs="0"/>
										<xs:element ref="conditionalRender" minOccurs="0"/>
										<xs:element ref="XMLAttributes" minOccurs="0"/>
									</xs:all>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="listColumnStyle" type="GenericLayoutStyleType" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines a style which is applied individually to all listColumn elements.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="listColumnTitleStyle" type="GenericLayoutStyleType" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines a style which is applied individually to all listColumnTitle elements.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="listColumnBodyStyle" type="GenericLayoutStyleType" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines a style which is applied  individually to all listColumnBody elements.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="listOverallGroup" minOccurs="0">
					<xs:complexType>
						<xs:all>
							<xs:element ref="listHeader" minOccurs="0"/>
							<xs:element ref="listFooter" minOccurs="0"/>
							<xs:element ref="propertyList" minOccurs="0"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
				<xs:element name="listGroups" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines the grouping structure of the list. This includes the header and footer definitions as well.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="listGroup" maxOccurs="unbounded">
								<xs:complexType>
									<xs:all>
										<xs:element ref="listHeader" minOccurs="0"/>
										<xs:element ref="listFooter" minOccurs="0"/>
										<xs:element ref="propertyList" minOccurs="0"/>
										<xs:element ref="sortList" minOccurs="0"/>
										<xs:element ref="XMLAttributes" minOccurs="0"/>
									</xs:all>
									<xs:attribute name="refDataItem" type="xs:string" use="required"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element ref="propertyList" minOccurs="0"/>
				<xs:element ref="sortList" minOccurs="0"/>
				<xs:element name="listPageHeader" minOccurs="0">
					<xs:annotation>
						<xs:documentation>This element represents a header in the list that will appear on every page rendered. It occurs after the column titles and before the overal group header of the list.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:complexContent>
							<xs:extension base="ListHFType">
								<xs:attribute name="afterOverallHeader" type="xs:boolean" default="false"/>
							</xs:extension>
						</xs:complexContent>
					</xs:complexType>
				</xs:element>
				<xs:element name="listPageFooter" minOccurs="0">
					<xs:annotation>
						<xs:documentation>This element represents a footer in the list that will appear on every page rendered. It occurs after all details and other footers of the list.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:complexContent>
							<xs:extension base="ListHFType">
								<xs:attributeGroup ref="PushToBottom"/>
							</xs:extension>
						</xs:complexContent>
					</xs:complexType>
				</xs:element>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
			</xs:all>
			<xs:attribute name="refQuery" type="xs:string" use="required"/>
			<xs:attribute name="rowsPerPage" type="xs:positiveInteger">
				<xs:annotation>
					<xs:documentation>Denotes the maximum number of rows to appear on each page. Used to allocate vertical space on a page body between two or more competing frames.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="cellHeightBehavior" default="minimal">
				<xs:annotation>
					<xs:documentation>Controls height of cells in the frame. When 'minimal', the cell will grow to the minimal height that is required to render the result. When 'stretch', the cell is stretched to cover the height of the entire frame. Default: Minimal.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="minimal">
							<xs:annotation>
								<xs:documentation source="doc_enum_minimal_cellHeightBehavior"/>
							</xs:annotation>
						</xs:enumeration>
						<xs:enumeration value="stretch"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="showColumnTitles" default="startOfList">
				<xs:annotation>
					<xs:documentation>Determines where or whether column titles should be displayed. If displayed, the column titles can appear at the beginning of the list ("startOfList") on each page or only after headings ("startOfDetails"), if headings exist. Column titles can be simulated using headers. To prevent column titles from being displayed, set to "hide". Default: startOfList.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="hide"/>
						<xs:enumeration value="startOfList"/>
						<xs:enumeration value="startOfDetails"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="pageBreakText" type="xs:boolean" default="true">
				<xs:annotation>
					<xs:documentation>Indicates whether or not large text items are allowed to be split across more then one page.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attributeGroup ref="CommonLayoutAttributes"/>
			<xs:attributeGroup ref="RepeatEveryPageAttributes"/>
			<xs:attributeGroup ref="KeepWithAttributes"/>
			<xs:attributeGroup ref="ShareQuery"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="crosstab">
		<xs:annotation>
			<xs:documentation>A crosstab is used to render the data from a query in a crosstab fashion.

A crosstab cannot contain an embedded  frame (e.g. list, crosstab, chart or repeater elements)</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="crosstabColumns" type="CrosstabNodeListType" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines the column members  of the crosstab.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="crosstabRows" type="CrosstabNodeListType" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Defines the row members of the crosstab.</xs:documentation>
					</xs:annotation>
				</xs:element>
				<xs:element name="crosstabFactCell" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Describes the contents of the  fact cells of the crosstab. There is only one fact cell definition for the crosstab, regardless of how many measures there are.

The class attribute is overridden by a class set on an applied factCellStyle element.

The styles are applied in the following order:

- style element
- factCellStyle from outer level to inner level
- conditionaStyle
</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:complexContent>
							<xs:extension base="GenericContainerSubElementType">
								<xs:attributeGroup ref="DefaultLayoutStyleAttributes"/>
							</xs:extension>
						</xs:complexContent>
					</xs:complexType>
				</xs:element>
				<xs:element ref="defaultMeasure" minOccurs="0"/>
				<xs:element name="crosstabCorner" minOccurs="0">
					<xs:annotation>
						<xs:documentation>This element represents the top left had corner of the crosstab.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:complexContent>
							<xs:extension base="GenericContainerSubElementType">
								<xs:attributeGroup ref="DefaultLayoutStyleAttributes"/>
							</xs:extension>
						</xs:complexContent>
					</xs:complexType>
				</xs:element>
				<xs:element name="crosstabIntersections" minOccurs="0">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="crosstabIntersection" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>This element allows for the optional defintion of the cell contents and/or style at a specified row/column intersection. Its definition will be similar to the crosstabFactCell element except the the contents sub-element will be optional instead of required.
The crosstabIntersection element can only be defined between the leaf members of each edge, all other definitions will be ignored.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element ref="contents" minOccurs="0"/>
										<xs:element ref="style" minOccurs="0"/>
										<xs:element ref="conditionalStyles" minOccurs="0"/>
										<xs:element ref="XMLAttributes" minOccurs="0"/>
									</xs:all>
									<xs:attribute name="row" type="xs:string" use="required"/>
									<xs:attribute name="column" type="xs:string" use="required"/>
									<xs:attributeGroup ref="DefaultLayoutStyleAttributes"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="crosstabRowNodeStyle" type="GenericLayoutStyleType" minOccurs="0"/>
				<xs:element name="crosstabColumnNodeStyle" type="GenericLayoutStyleType" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
			</xs:all>
			<xs:attribute name="refQuery" type="xs:string" use="required"/>
			<xs:attribute name="rowsPerPage" type="xs:positiveInteger">
				<xs:annotation>
					<xs:documentation>Denotes the maximum number of rows to appear on each page. Used to allocate vertical space on a page body between two or more competing frames.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="factCellStylePrecedence" default="rows">
				<xs:annotation>
					<xs:documentation>Indicates the precedence of whether the row cell styling is applied before or after the column cell styling.</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="rows"/>
						<xs:enumeration value="columns"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="pageBreakText" type="xs:boolean" default="true">
				<xs:annotation>
					<xs:documentation>Indicates whether or not large text items are allowed to be split across more then one page.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attributeGroup ref="CommonLayoutAttributes"/>
			<xs:attributeGroup ref="RepeatEveryPageAttributes"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="repeaterTable">
		<xs:annotation>
			<xs:documentation>The element will generate a table by going through the results of the query. If there is a grouping structure defined, then a table cell will be generated for each instance of the lowest level group. If no grouping structure is defined, then a table cell will be generated for each row.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="repeaterTableCell">
					<xs:complexType>
						<xs:complexContent>
							<xs:extension base="GenericContainerElementType">
								<xs:attributeGroup ref="DefaultLayoutStyleAttributes"/>
							</xs:extension>
						</xs:complexContent>
					</xs:complexType>
				</xs:element>
				<xs:element ref="repeaterGroups" minOccurs="0"/>
				<xs:element ref="propertyList" minOccurs="0"/>
				<xs:element ref="sortList" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
			</xs:all>
			<xs:attribute name="refQuery" type="xs:string" use="required"/>
			<xs:attribute name="across" type="xs:positiveInteger">
				<xs:annotation>
					<xs:documentation>The number of times across (columns) that the frame contents should be rendered. Default: infinite.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="down" type="xs:positiveInteger">
				<xs:annotation>
					<xs:documentation>The number of times down (rows) that the frame contents should be rendered. Default: infinite.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="direction" default="lr-tb">
				<xs:annotation>
					<xs:documentation>When 'lr-tb', the frame will render left to right then top to bottom.
When 'tb-lr', frame will render top to bottom then left to right.</xs:documentation>
					<xs:documentation source="doc_att_direction_layout"/>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:enumeration value="lr-tb"/>
						<xs:enumeration value="tb-lr"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attributeGroup ref="CommonLayoutAttributes"/>
			<xs:attributeGroup ref="RepeatEveryPageAttributes"/>
			<xs:attributeGroup ref="ShareQuery"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="repeater">
		<xs:annotation>
			<xs:documentation>The element simply repeats it's contents with no wrapping layout strucutre. It iterates through the data in the same manner as repeaterTable does.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="contents"/>
				<xs:element ref="repeaterGroups" minOccurs="0"/>
				<xs:element ref="propertyList" minOccurs="0"/>
				<xs:element ref="sortList" minOccurs="0"/>
				<xs:element ref="conditionalRender" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
				<xs:element ref="masterDetailLinks" minOccurs="0"/>
			</xs:all>
			<xs:attribute name="refQuery" type="xs:string" use="required"/>
			<xs:attribute name="rowsPerPage" type="xs:positiveInteger"/>
			<xs:attributeGroup ref="NameLayoutAttributes"/>
			<xs:attributeGroup ref="RepeatEveryPageAttributes"/>
			<xs:attributeGroup ref="ShareQuery"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="burst">
		<xs:annotation>
			<xs:documentation>The element specifies how the report can be bursted if it needs to be bursted. If this element is not specified, then the report cannot be bursted. The burst is controlled by the query indicated.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element name="burstGroups">
					<xs:annotation>
						<xs:documentation>Describes the grouping structure to be used for the burst. A burst will occur for every instance of the lowest level group.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:sequence>
							<xs:element name="burstGroup" maxOccurs="unbounded">
								<xs:complexType>
									<xs:all>
										<xs:element ref="sortList" minOccurs="0"/>
									</xs:all>
									<xs:attribute name="refDataItem" type="xs:string" use="required"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="burstRecipient">
					<xs:annotation>
						<xs:documentation>Describes what recipients are to recieve each burst. The query that determines the recipients may be the same query as the burst, or it may come from another query in which case it will be a detail of the burst query. </xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="masterDetailLinks" minOccurs="0"/>
						</xs:all>
						<xs:attribute name="refQuery" type="xs:string" use="required"/>
						<xs:attribute name="refDataItem" type="xs:string" use="required"/>
						<xs:attribute name="type" default="auto">
							<xs:annotation>
								<xs:documentation>Specifies the type of the burst recipient.</xs:documentation>
								<xs:documentation source="doc_att_type_burstRecipient"/>
							</xs:annotation>
							<xs:simpleType>
								<xs:restriction base="xs:string">
									<xs:enumeration value="auto"/>
									<xs:enumeration value="email"/>
									<xs:enumeration value="directory"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
				<xs:element name="burstLabel" minOccurs="0">
					<xs:annotation>
						<xs:documentation>Identifies the data item to use as a label for each burst.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:attribute name="refDataItem" type="xs:string" use="required"/>
					</xs:complexType>
				</xs:element>
			</xs:all>
			<xs:attribute name="refQuery" type="xs:string" use="required"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="repeaterGroups">
		<xs:annotation>
			<xs:documentation>Defines the grouping structure used by the repeater.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="repeaterGroup" maxOccurs="unbounded">
					<xs:complexType>
						<xs:all>
							<xs:element ref="sortList" minOccurs="0"/>
							<xs:element ref="propertyList" minOccurs="0"/>
						</xs:all>
						<xs:attribute name="refDataItem" type="xs:string" use="required"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="reportVariables">
		<xs:annotation>
			<xs:documentation>Defines variables that can be used in the layout for conditional elements (e.g. style, dataSource).</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="reportVariable" maxOccurs="unbounded">
					<xs:complexType>
						<xs:all>
							<xs:element ref="reportExpression"/>
							<xs:element name="variableValues" minOccurs="0">
								<xs:annotation>
									<xs:documentation>This element describes the return values that can be expected from the evaluation of the report variable.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:sequence>
										<xs:choice maxOccurs="unbounded">
											<xs:element ref="variableValue"/>
											<xs:element name="variableValueGroup">
												<xs:annotation>
													<xs:documentation>This element allows for multiple return values to be grouped and retuned as a single value.</xs:documentation>
												</xs:annotation>
												<xs:complexType>
													<xs:sequence>
														<xs:element ref="variableValue" maxOccurs="unbounded"/>
													</xs:sequence>
													<xs:attribute name="value" type="xs:string" use="required">
														<xs:annotation>
															<xs:documentation source="doc_att_value_variableValue"/>
														</xs:annotation>
													</xs:attribute>
												</xs:complexType>
											</xs:element>
										</xs:choice>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
						</xs:all>
						<xs:attribute name="name" type="xs:string" use="required"/>
						<xs:attribute name="type" use="required">
							<xs:annotation>
								<xs:documentation source="doc_att_type_reportVariable"/>
							</xs:annotation>
							<xs:simpleType>
								<xs:restriction base="xs:string">
									<xs:enumeration value="string"/>
									<xs:enumeration value="boolean"/>
									<xs:enumeration value="locale"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="classStyles">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="classStyle" maxOccurs="unbounded">
					<xs:annotation>
						<xs:documentation>This element represents a class style. The name attribute identifies the class name that can be used in the layout. The label  is optional, and is only used to show a meaningful name in the UI.</xs:documentation>
					</xs:annotation>
					<xs:complexType>
						<xs:all>
							<xs:element ref="CSS" minOccurs="0"/>
						</xs:all>
						<xs:attribute name="name" type="xs:string" use="required"/>
						<xs:attribute name="label" type="xs:string" use="optional">
							<xs:annotation>
								<xs:documentation source="doc_att_label_layout"/>
							</xs:annotation>
						</xs:attribute>
						<xs:attributeGroup ref="DescriptionLayoutAttributes"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="drillBehavior">
		<xs:annotation>
			<xs:documentation>This element is used to define the behavior of the  queries during drill up and down operations.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="drillQueryBehavior" minOccurs="0" maxOccurs="unbounded">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="drillDataItemBehavior" maxOccurs="unbounded">
								<xs:annotation>
									<xs:documentation>This element is used to control how this data item will behave during a drill up or down operation.

Drill up/down capabilities can be disabled using the disableDrillUp /disableDrillDown properties. A value of false means that the dataItem will and drill if it makes sense.</xs:documentation>
								</xs:annotation>
								<xs:complexType>
									<xs:all>
										<xs:element name="drillUpBehavior" type="DrillBehaviorType" minOccurs="0"/>
										<xs:element name="drillDownBehavior" type="DrillBehaviorType" minOccurs="0"/>
									</xs:all>
									<xs:attribute name="refDataItem" type="xs:string" use="required"/>
									<xs:attribute name="disableDrillUp" type="xs:boolean" default="false"/>
									<xs:attribute name="disableDrillDown" type="xs:boolean" default="false"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="refQuery" type="xs:string" use="required"/>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="drillUpDown" type="xs:boolean" default="false">
				<xs:annotation>
					<xs:documentation>Determine whether this report will allow drill up/down operations.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="modelBasedDrillThru" type="xs:boolean" default="false">
				<xs:annotation>
					<xs:documentation>Determine whether this report will allow model based drill through operations.</xs:documentation>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:complexType name="LayoutType">
		<xs:annotation>
			<xs:documentation>A layout is comprised of pages. These pages are orgainized into pageSets which are rendered in the order they occur.</xs:documentation>
		</xs:annotation>
		<xs:all>
			<xs:element name="reportPages" minOccurs="0">
				<xs:annotation>
					<xs:documentation>The report pages is made up  of a list of pages and pageSets. They are rendered in the order in which they are listed.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence>
						<xs:choice maxOccurs="unbounded">
							<xs:element ref="page"/>
							<xs:element ref="pageSet"/>
						</xs:choice>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="promptPages" minOccurs="0">
				<xs:complexType>
					<xs:sequence>
						<xs:element ref="page" maxOccurs="unbounded"/>
					</xs:sequence>
				</xs:complexType>
			</xs:element>
			<xs:element name="defaultDataFormats" minOccurs="0">
				<xs:annotation>
					<xs:documentation>This defines the default data formatting rules to be used in the layout. Each data type can have a default data format.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:all>
						<xs:element ref="numberFormat" minOccurs="0"/>
						<xs:element ref="percentFormat" minOccurs="0"/>
						<xs:element ref="currencyFormat" minOccurs="0"/>
						<xs:element ref="dateFormat" minOccurs="0"/>
						<xs:element ref="dateTimeFormat" minOccurs="0"/>
						<xs:element ref="timeFormat" minOccurs="0"/>
						<xs:element ref="intervalFormat" minOccurs="0"/>
						<xs:element ref="stringFormat" minOccurs="0"/>
					</xs:all>
				</xs:complexType>
			</xs:element>
			<xs:element name="pageSetup" minOccurs="0">
				<xs:complexType>
					<xs:choice minOccurs="0">
						<xs:element name="namedPaper">
							<xs:complexType>
								<xs:attribute name="name" type="xs:string" use="required"/>
							</xs:complexType>
						</xs:element>
						<xs:element name="customPaper">
							<xs:complexType>
								<xs:attribute name="width" type="xs:decimal" use="required">
									<xs:annotation>
										<xs:documentation source="doc_att_width_layout"/>
									</xs:annotation>
								</xs:attribute>
								<xs:attribute name="height" type="xs:decimal" use="required">
									<xs:annotation>
										<xs:documentation source="doc_att_height_layout"/>
									</xs:annotation>
								</xs:attribute>
								<xs:attribute name="unit" default="in">
									<xs:simpleType>
										<xs:restriction base="xs:NMTOKEN">
											<xs:enumeration value="in"/>
											<xs:enumeration value="cm"/>
										</xs:restriction>
									</xs:simpleType>
								</xs:attribute>
							</xs:complexType>
						</xs:element>
					</xs:choice>
					<xs:attribute name="orientation" default="portrait">
						<xs:annotation>
							<xs:documentation source="doc_att_orientation_layout"/>
						</xs:annotation>
						<xs:simpleType>
							<xs:restriction base="xs:NMTOKEN">
								<xs:enumeration value="portrait"/>
								<xs:enumeration value="landscape"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
		</xs:all>
	</xs:complexType>
	<xs:complexType name="GenericContainerSubElementType">
		<xs:all>
			<xs:element ref="contents"/>
			<xs:element ref="style" minOccurs="0"/>
			<xs:element ref="conditionalStyles" minOccurs="0"/>
			<xs:element ref="XMLAttributes" minOccurs="0"/>
		</xs:all>
	</xs:complexType>
	<xs:complexType name="GenericContainerElementType">
		<xs:all>
			<xs:element ref="contents"/>
			<xs:element ref="style" minOccurs="0"/>
			<xs:element ref="conditionalStyles" minOccurs="0"/>
			<xs:element ref="conditionalRender" minOccurs="0"/>
			<xs:element ref="XMLAttributes" minOccurs="0"/>
		</xs:all>
	</xs:complexType>
	<xs:complexType name="ListHFType">
		<xs:all>
			<xs:element ref="listRows"/>
			<xs:element ref="rowCellsStyle" minOccurs="0"/>
			<xs:element ref="XMLAttributes" minOccurs="0"/>
		</xs:all>
	</xs:complexType>
	<xs:complexType name="ListGroupHFType">
		<xs:all>
			<xs:element ref="listRows"/>
			<xs:element ref="rowCellsStyle" minOccurs="0"/>
			<xs:element ref="XMLAttributes" minOccurs="0"/>
			<xs:element ref="propertyList" minOccurs="0"/>
		</xs:all>
	</xs:complexType>
	<xs:complexType name="CrosstabNodeListType">
		<xs:sequence>
			<xs:element name="crosstabNode" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>Describes a node (or nesting group) on an edge. It is defined by one or more members sets and spacers that are unioned together and  optionally 1 or more crosstab nodes that will be nested within.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:all>
						<xs:element name="crosstabNodeMembers">
							<xs:complexType>
								<xs:sequence>
									<xs:choice maxOccurs="unbounded">
										<xs:element name="crosstabNodeMember">
											<xs:annotation>
												<xs:documentation>Describes a member in the crosstab node. 

The precedence of styling  is as follows:

class style,
crosstabColumnNodeStyle or crosstabRowNodeStyle,
style,
conditionalStyles</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:all>
													<xs:element ref="contents"/>
													<xs:element ref="style" minOccurs="0"/>
													<xs:element ref="conditionalStyles" minOccurs="0"/>
													<xs:element ref="factCellStyle" minOccurs="0"/>
													<xs:element ref="factCell" minOccurs="0"/>
													<xs:element ref="propertyList" minOccurs="0"/>
													<xs:element ref="sortList" minOccurs="0"/>
													<xs:element ref="XMLAttributes" minOccurs="0"/>
												</xs:all>
												<xs:attribute name="refDataItem" type="xs:string" use="required"/>
												<xs:attribute name="indentationLength" type="xs:string">
													<xs:annotation>
														<xs:documentation>If specified the members will be indented according to their level in the hiearchy. The string value represents a CSS length (e.g. 10px, 0.5in, ...). If not specified, then the members are rendered in a flat list with no indenting.</xs:documentation>
													</xs:annotation>
												</xs:attribute>
												<xs:attribute name="indentationStartLevel" type="xs:positiveInteger">
													<xs:annotation>
														<xs:documentation>If specificied, indentation of members willl only start at the indicated level number.</xs:documentation>
													</xs:annotation>
												</xs:attribute>
												<xs:attributeGroup ref="DefaultLayoutStyleAttributes"/>
												<xs:attributeGroup ref="RepeatEveryPageAttributes"/>
												<xs:attributeGroup ref="KeepWithNextPrevAttributes"/>
												<xs:attributeGroup ref="SolveOrderAttributes"/>
												<xs:attributeGroup ref="CrosstabEdgeLocation"/>
											</xs:complexType>
										</xs:element>
										<xs:element name="crosstabSpacer">
											<xs:annotation>
												<xs:documentation>The element allows for the insertion of  non-data cells on an edge of a crosstab.

The precedence of styling  is as follows:

class style,
crosstabColumnNodeStyle or crosstabRowNodeStyle,
style,
conditionalStyles</xs:documentation>
											</xs:annotation>
											<xs:complexType>
												<xs:all>
													<xs:element ref="contents"/>
													<xs:element ref="style" minOccurs="0"/>
													<xs:element ref="conditionalStyles" minOccurs="0"/>
													<xs:element ref="factCell" minOccurs="0"/>
													<xs:element ref="XMLAttributes" minOccurs="0"/>
												</xs:all>
												<xs:attributeGroup ref="DefaultLayoutStyleAttributes"/>
												<xs:attributeGroup ref="RepeatEveryPageAttributes"/>
												<xs:attributeGroup ref="KeepWithNextPrevAttributes"/>
												<xs:attributeGroup ref="CrosstabEdgeLocation"/>
											</xs:complexType>
										</xs:element>
									</xs:choice>
								</xs:sequence>
							</xs:complexType>
						</xs:element>
						<xs:element name="crosstabNestedNodes" type="CrosstabNodeListType" minOccurs="0">
							<xs:annotation>
								<xs:documentation>Describes the crosstab nodes that are nested with this node.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:all>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="DrillBehaviorType">
		<xs:choice>
			<xs:element name="drillSimpleType">
				<xs:annotation>
					<xs:documentation>The values are as follows:

preserve : use this data item in the drill report

emptySet : set data item to an empty set

replaceItem : replace this data item with children of the parent of the selected drill value. Default for the lowest level on an edge.

replaceExpression : replace this data item with the expression children of the selected item. Default for the parent of the lowest level on an edge.

</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="type" use="required">
						<xs:annotation>
							<xs:documentation source="doc_att_type_drillSimpleType"/>
							<xs:documentation>The values are as follows:

preserve : use this data item in the drill report



emptySet : set data item to an empty set



replaceItem : replace this data item with children of the parent of the selected drill value. Default for the lowest level on an edge.


replaceExpression : replace this data item with the expression children of the selected item. Default for the parent of the lowest level on an edge.


changeExpression : set the data item expression to a specific data item.
</xs:documentation>
						</xs:annotation>
						<xs:simpleType>
							<xs:restriction base="xs:NMTOKEN">
								<xs:enumeration value="preserve">
									<xs:annotation>
										<xs:documentation source="doc_enum_preserve_type"/>
									</xs:annotation>
								</xs:enumeration>
								<xs:enumeration value="emptySet"/>
								<xs:enumeration value="replaceItem"/>
								<xs:enumeration value="replaceExpression"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
				</xs:complexType>
			</xs:element>
			<xs:element name="drillChange">
				<xs:annotation>
					<xs:documentation>Replace the dataItem expression with a reference to this dataItem.</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="refDataItem" type="xs:string" use="required"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="drillChangeToDepthBasedExpression">
				<xs:annotation>
					<xs:documentation>Changes the expression to be a descendant of parent expression with the appropriate depth
</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="depthOffset" type="xs:integer" use="required"/>
				</xs:complexType>
			</xs:element>
			<xs:element name="drillAncestor">
				<xs:annotation>
					<xs:documentation>Parent of the data item at the next lower level. Default for any grandparent (or higher) of the lowest level on an edge.

</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:attribute name="depthOffset" type="xs:integer" use="required"/>
				</xs:complexType>
			</xs:element>
		</xs:choice>
	</xs:complexType>
	<xs:element name="contents">
		<xs:annotation>
			<xs:documentation>Defines the contents of the container.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:group ref="layoutElement" minOccurs="0" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="rowCellsStyle" type="GenericLayoutStyleType"/>
	<xs:element name="factCellStyle">
		<xs:annotation>
			<xs:documentation>NOTE: This element is deprecated after WO1255 is implemented. Use the factCell element instead.

Describes the styling for the fact cells that are associated (by row or column) with this crosstab node.

If the class attribute is specified, it will override the class attribute specified on the crosstabFactCell element.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="GenericLayoutStyleType"/>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="factCell">
		<xs:annotation>
			<xs:documentation>This element allows for the optional defintion of the cell contents and/or style at a specified row/column intersection. Its definition will be similar to the crosstabFactCell element except the the contents sub-element will be optional instead of required. The factCellStylePrecedence attribute of the crosstab will be used to determine the precedence for both the style and content application of the factCell element.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:all>
				<xs:element ref="contents" minOccurs="0"/>
				<xs:element ref="style" minOccurs="0"/>
				<xs:element ref="conditionalStyles" minOccurs="0"/>
				<xs:element ref="XMLAttributes" minOccurs="0"/>
			</xs:all>
			<xs:attributeGroup ref="DefaultLayoutStyleAttributes"/>
		</xs:complexType>
	</xs:element>
	<xs:element name="variableValue">
		<xs:complexType>
			<xs:attribute name="value" type="xs:string" use="required">
				<xs:annotation>
					<xs:documentation source="doc_att_value_variableValue"/>
				</xs:annotation>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<xs:element name="headerPages">
		<xs:annotation>
			<xs:documentation>Contains the list of pages (in order) that will be rendered at the start of the group. Only the first row of group of the page set query is available for rendering.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:choice maxOccurs="unbounded">
					<xs:element ref="page"/>
					<xs:element ref="pageSet"/>
				</xs:choice>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="footerPages">
		<xs:annotation>
			<xs:documentation>Contains the list of pages (in order) that will be rendered at the start of the group. Only the last row of group of the page set query is available for rendering.</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:choice maxOccurs="unbounded">
					<xs:element ref="page"/>
					<xs:element ref="pageSet"/>
				</xs:choice>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="listRows">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="listRow" maxOccurs="unbounded">
					<xs:complexType>
						<xs:all>
							<xs:element name="rowCells">
								<xs:complexType>
									<xs:sequence>
										<xs:element name="rowCell" maxOccurs="unbounded">
											<xs:complexType>
												<xs:complexContent>
													<xs:extension base="GenericContainerSubElementType">
														<xs:attribute name="colSpan" type="xs:positiveInteger" default="1"/>
														<xs:attributeGroup ref="DefaultLayoutStyleAttributes"/>
													</xs:extension>
												</xs:complexContent>
											</xs:complexType>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
							<xs:element ref="rowCellsStyle" minOccurs="0"/>
							<xs:element ref="XMLAttributes" minOccurs="0"/>
						</xs:all>
					</xs:complexType>
				</xs:element>
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<xs:element name="listHeader">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="ListGroupHFType">
					<xs:attributeGroup ref="RepeatEveryPageAttributes"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:element name="listFooter">
		<xs:complexType>
			<xs:complexContent>
				<xs:extension base="ListGroupHFType">
					<xs:attributeGroup ref="PushToBottom"/>
				</xs:extension>
			</xs:complexContent>
		</xs:complexType>
	</xs:element>
	<xs:attributeGroup name="CrosstabEdgeLocation">
		<xs:attribute name="edgeLocation" type="xs:string">
			<xs:annotation>
				<xs:documentation>Uniquely identifies a node member or spacer on an edge of the crosstab. This attribute is used by the crosstabIntersection element to uniquely identify the intersection of elements from each edge.</xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:attributeGroup name="ShareQuery">
		<xs:attribute name="shareQuery" type="xs:boolean" default="false">
			<xs:annotation>
				<xs:documentation>All frames that have shareQuery true and reference the same query will submit only one QRD to the query engine and share the result returned. All of the frames must have the same grouping structure and only one of the frames can have a propertyList. As well, they cannot be part of a master/detail relationship.
</xs:documentation>
				<xs:documentation source="rn_added_3.0"/>
			</xs:annotation>
		</xs:attribute>
	</xs:attributeGroup>
	<xs:annotation>
		<xs:documentation>Notes:</xs:documentation>
	</xs:annotation>
	<xs:annotation>
		<xs:documentation>Sectioing behavior</xs:documentation>
		<xs:documentation>In the V5 report specification, in certain circumstances an element that reference the same query will share one result set. This sharing is done by one element sectioning the other according to where the content is in the parents grouping structure. Sectioing will work as follows: </xs:documentation>
		<xs:documentation>burst, pageSet, list, repeater and repeaterTable elements can be used to section other layout elements using the same query. Sectioning will only occur if the contained element is in a detail area. For pageSet, this means that a sectioned frame can only exist in the detailPages. For a list, this means a sectioned frame can only exist in a listColumnBody. If an element is using the same query but not in a secitioning relationship/area you get a different QRD.
</xs:documentation>
		<xs:documentation>pageSet, list, repeater, and repeaterTable can be sectioned by a sectioning element.
</xs:documentation>
		<xs:documentation>sectioning of a pageSet, list, repeater or repeaterTable would simply add the sectioning groups as higher level groupings of the sectioned frame in the QRD
</xs:documentation>
		<xs:documentation>crosstabs and charts cannot be sectioned in Bering. The report server should return a validation error if it encounters a crosstab or chart that is sectioned in the report spec. Post Bering, we will consider making the sectioning approach for crosstabs and charts an option. For example, crosstab would have an option to choose whether to section the rows, columns or entire crosstab (separate edge in QRD). A pie chart would have an option to choose whether to section the pies, pie slices or entire chart. When the RSVP team is implementing sectioning they should keep this in mind so that we do not preclude it in the future.
</xs:documentation>
	</xs:annotation>
</xs:schema>
